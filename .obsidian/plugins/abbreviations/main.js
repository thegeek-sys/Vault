/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AbbreviationPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/types.ts
var DEFAULT_SETTINGS = {
  abbreviations: {
    "eg.": {
      value: "for example",
      isEnabled: true,
      position: 0
    },
    "atm": {
      value: "at the moment",
      isEnabled: true,
      position: 1
    },
    "imo": {
      value: "in my opinion",
      isEnabled: true,
      position: 2
    },
    "w/": {
      value: "with",
      isEnabled: true,
      position: 3
    },
    "w/o": {
      value: "without",
      isEnabled: true,
      position: 4
    },
    "ily": {
      value: "I love you",
      isEnabled: true,
      position: 5
    },
    "btw": {
      value: "by the way",
      isEnabled: true,
      position: 6
    },
    "afaik": {
      value: "as far as I know",
      isEnabled: true,
      position: 7
    },
    "rn": {
      value: "right now",
      isEnabled: true,
      position: 8
    }
  }
};

// src/components/ExpansionEntrySetting.ts
var import_obsidian = require("obsidian");
var ExpansionEntrySetting = class extends import_obsidian.Setting {
  constructor(elt, opt) {
    super(elt);
    elt.addClass("center-h");
    this.abbreviation = opt.abbreviation;
    this.expansion = opt.expansion;
    const emptyFunction = (..._) => {
    };
    this.addToggle(
      (toggle) => {
        var _a;
        return toggle.setValue(this.expansion.isEnabled).onChange((_a = opt.onDisable) != null ? _a : emptyFunction);
      }
    ).addText(
      (textAreaAbbrev) => textAreaAbbrev.setPlaceholder("Abbreviation").setValue(this.abbreviation).onChange(
        (0, import_obsidian.debounce)(
          (value) => opt.onAbbreviationEdit ? opt.onAbbreviationEdit(value, this.abbreviation) : emptyFunction,
          750,
          true
        )
      ).setDisabled(!this.expansion.isEnabled)
    ).addText(
      (textAreaExpansion) => textAreaExpansion.setPlaceholder("Meaning").setValue(this.expansion.value).onChange(
        (0, import_obsidian.debounce)(
          (value) => opt.onExpansionEdit ? opt.onExpansionEdit(value, this.expansion.value) : emptyFunction,
          750
        )
      ).setDisabled(!this.expansion.isEnabled)
    ).addButton((caseButton) => {
      var _a;
      caseButton.setIcon("case-sensitive").setTooltip("Case sensitive").onClick((_a = opt.onCaseSensitiveChange) != null ? _a : emptyFunction);
      if (this.expansion.isCaseSensitive)
        caseButton.setClass("turned-on");
    }).addExtraButton(
      (removeButton) => {
        var _a;
        return removeButton.setIcon("cross").setTooltip("Remove").onClick((_a = opt.onRemove) != null ? _a : emptyFunction);
      }
    );
  }
  get getAbbreviation() {
    return this.abbreviation;
  }
  get getExpansion() {
    return this.expansion;
  }
};

// src/components/ConfirmationModal.ts
var import_obsidian2 = require("obsidian");
var ConfirmationModal = class extends import_obsidian2.Modal {
  constructor(app, callback) {
    super(app);
    this.callback = callback;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "\u{1F6D1} Are you sure?" });
    contentEl.createEl("p", { text: "This will reset all your settings to default." });
    contentEl.createEl("p", { text: "Every changes you made so far will be undone" });
    new import_obsidian2.Setting(contentEl).addButton(
      (button) => button.setButtonText("Reset").setWarning().onClick(() => {
        this.callback();
        this.close();
      })
    );
  }
  onClose() {
    this.contentEl.empty();
  }
};

// src/main.ts
var AbbreviationPlugin = class extends import_obsidian3.Plugin {
  /**
   * Detects an abbreviation at the left of the cursor, returns its meaning and starting position
   * returns null if no abbreviation is found
   * 
   * example (lets assume atm is in the list of abbreviations):
   * 			               v cursor				
   * > what are you doing atm|
   * ☝️ this will detect atm
   * 
   * but not here:
   * 							v cursor 
   * > what are you doing atm |
   * 
   * @param line line of text 
   * @param position position of the cursor
   * @returns {AbbreviationLocation | null}
   */
  detectAbbreviation(line, position) {
    let wordStart = position.ch;
    do {
      const previous = wordStart - 1 < 0 ? 0 : wordStart - 1;
      if (/\s/.test(line[previous]))
        break;
      --wordStart;
    } while (wordStart > 0);
    const word = line.substring(wordStart, position.ch);
    const wordAbbrv = Object.keys(this.settings.abbreviations).find((k) => k.toLocaleLowerCase() === word.toLocaleLowerCase());
    if (!wordAbbrv)
      return null;
    const wordEntry = this.settings.abbreviations[wordAbbrv];
    const sameCase = word === wordAbbrv;
    if (word !== "" && (wordEntry == null ? void 0 : wordEntry.value) && (sameCase || !wordEntry.isCaseSensitive))
      return {
        position: { line: position.line, ch: wordStart },
        abbreviation: this.settings.abbreviations[wordAbbrv]
      };
    return null;
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new AbbreviationSettingTab(this.app, this));
    this.registerDomEvent(document, "keydown", (event) => {
      const view = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
      if (!view)
        return;
      const editor = view.editor;
      const position = editor.getCursor();
      const line = editor.getLine(position.line).substring(0, position.ch);
      if (event.code == "Space") {
        const abbreviationLocation = this.detectAbbreviation(line, position);
        if (abbreviationLocation == null ? void 0 : abbreviationLocation.abbreviation.isEnabled) {
          view.editor.replaceRange(abbreviationLocation.abbreviation.value, abbreviationLocation.position, position);
          return;
        }
      }
    });
  }
  async loadSettings() {
    this.settings = { ...structuredClone(DEFAULT_SETTINGS), ...await this.loadData() };
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async resetSettings() {
    this.settings = { ...structuredClone(DEFAULT_SETTINGS) };
    await this.saveData(this.settings);
  }
};
var AbbreviationSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian3.Setting(containerEl).setName("Abbreviations").setDesc("Add abbreviations to be replaced in your notes").addButton(
      (addButton) => addButton.setIcon("plus").onClick(async () => {
        if ("" in this.plugin.settings.abbreviations)
          return;
        this.plugin.settings.abbreviations[""] = {
          value: "",
          isEnabled: true,
          position: 0
        };
        const offsetted = Object.fromEntries(
          Object.entries(this.plugin.settings.abbreviations).map(
            ([abbreviation, expansion]) => {
              return [abbreviation, {
                ...expansion,
                position: !abbreviation ? expansion.position : expansion.position + 1
              }];
            }
          )
        );
        this.plugin.settings.abbreviations = offsetted;
        await this.plugin.saveSettings();
        this.display();
      })
    ).addExtraButton(
      (resetButton) => resetButton.setIcon("reset").setTooltip("Reset to defaults").onClick(async () => {
        new ConfirmationModal(this.app, () => {
          this.plugin.resetSettings();
          this.display();
        }).open();
      })
    );
    containerEl.createEl("p", { text: "Here you can define your abbreviations." });
    const listingFeatEl = containerEl.createEl("ul");
    listingFeatEl.createEl("li", { text: "The toggle button at the left of each entry allows you to enable/disable the abbreviation." });
    listingFeatEl.createEl("li", { text: "The first text field at the center is the abbreviation itself." });
    listingFeatEl.createEl("li", { text: "The second text field is its meaning, which will appear on your documents." });
    listingFeatEl.createEl("li", { text: "The button at the right of each entry allows you to set if your abbreviation is case sentitive." });
    listingFeatEl.createEl("li", { text: "The last button at the far right of an entry allows you to remove it." });
    const listEl = containerEl.createEl("ul");
    Object.entries(this.plugin.settings.abbreviations).sort((a, b) => a[1].position - b[1].position).forEach((entry) => {
      const [abbreviation, expansion] = entry;
      new ExpansionEntrySetting(listEl, {
        abbreviation,
        expansion,
        onRemove: async () => {
          delete this.plugin.settings.abbreviations[abbreviation];
          const updated = Object.fromEntries(
            Object.entries(this.plugin.settings.abbreviations).filter((e) => expansion.position < e[1].position).map(
              ([abbreviation2, expansion2]) => {
                return [abbreviation2, {
                  ...expansion2,
                  position: !abbreviation2 ? expansion2.position : expansion2.position - 1
                }];
              }
            )
          );
          this.plugin.settings.abbreviations = {
            ...this.plugin.settings.abbreviations,
            ...updated
          };
          this.display();
          await this.plugin.saveSettings();
        },
        onAbbreviationEdit: async (newAbbreviation, oldAbbreviation) => {
          newAbbreviation = newAbbreviation.trim();
          if (newAbbreviation in this.plugin.settings.abbreviations) {
            new import_obsidian3.Notice(`\u26A0\uFE0F Abbreviation ${newAbbreviation} already exists
This change will not be saved`);
            return;
          }
          this.plugin.settings.abbreviations[newAbbreviation] = this.plugin.settings.abbreviations[abbreviation];
          delete this.plugin.settings.abbreviations[oldAbbreviation];
          this.display();
          await this.plugin.saveSettings();
        },
        onExpansionEdit: async (newExpansion) => {
          newExpansion = newExpansion.trim();
          this.plugin.settings.abbreviations[abbreviation].value = newExpansion;
          if (!newExpansion) {
            new import_obsidian3.Notice(`\u26A0\uFE0F Expansion cannot be empty
This change will be saved but not applied`);
            return;
          }
          await this.plugin.saveSettings();
        },
        onDisable: async (isEnabled) => {
          this.plugin.settings.abbreviations[abbreviation].isEnabled = isEnabled;
          await this.plugin.saveSettings();
          this.display();
        },
        onCaseSensitiveChange: async () => {
          this.plugin.settings.abbreviations[abbreviation].isCaseSensitive = !this.plugin.settings.abbreviations[abbreviation].isCaseSensitive;
          await this.plugin.saveSettings();
          this.display();
        }
      });
    });
  }
};
