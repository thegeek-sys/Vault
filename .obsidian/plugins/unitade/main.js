/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __reflectGet = Reflect.get;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __superGet = (cls, obj, key) => __reflectGet(__getProtoOf(cls), key, obj);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// lib/codemirror.js
var require_codemirror = __commonJS({
  "lib/codemirror.js"(exports, module2) {
    "use strict";
    module2.exports = CodeMirror;
  }
});

// mode/apl/apl.js
var require_apl = __commonJS({
  "mode/apl/apl.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("apl", function() {
        var builtInOps = {
          ".": "innerProduct",
          "\\": "scan",
          "/": "reduce",
          "\u233F": "reduce1Axis",
          "\u2340": "scan1Axis",
          "\xA8": "each",
          "\u2363": "power"
        };
        var builtInFuncs = {
          "+": ["conjugate", "add"],
          "\u2212": ["negate", "subtract"],
          "\xD7": ["signOf", "multiply"],
          "\xF7": ["reciprocal", "divide"],
          "\u2308": ["ceiling", "greaterOf"],
          "\u230A": ["floor", "lesserOf"],
          "\u2223": ["absolute", "residue"],
          "\u2373": ["indexGenerate", "indexOf"],
          "?": ["roll", "deal"],
          "\u22C6": ["exponentiate", "toThePowerOf"],
          "\u235F": ["naturalLog", "logToTheBase"],
          "\u25CB": ["piTimes", "circularFuncs"],
          "!": ["factorial", "binomial"],
          "\u2339": ["matrixInverse", "matrixDivide"],
          "<": [null, "lessThan"],
          "\u2264": [null, "lessThanOrEqual"],
          "=": [null, "equals"],
          ">": [null, "greaterThan"],
          "\u2265": [null, "greaterThanOrEqual"],
          "\u2260": [null, "notEqual"],
          "\u2261": ["depth", "match"],
          "\u2262": [null, "notMatch"],
          "\u2208": ["enlist", "membership"],
          "\u2377": [null, "find"],
          "\u222A": ["unique", "union"],
          "\u2229": [null, "intersection"],
          "\u223C": ["not", "without"],
          "\u2228": [null, "or"],
          "\u2227": [null, "and"],
          "\u2371": [null, "nor"],
          "\u2372": [null, "nand"],
          "\u2374": ["shapeOf", "reshape"],
          ",": ["ravel", "catenate"],
          "\u236A": [null, "firstAxisCatenate"],
          "\u233D": ["reverse", "rotate"],
          "\u2296": ["axis1Reverse", "axis1Rotate"],
          "\u2349": ["transpose", null],
          "\u2191": ["first", "take"],
          "\u2193": [null, "drop"],
          "\u2282": ["enclose", "partitionWithAxis"],
          "\u2283": ["diclose", "pick"],
          "\u2337": [null, "index"],
          "\u234B": ["gradeUp", null],
          "\u2352": ["gradeDown", null],
          "\u22A4": ["encode", null],
          "\u22A5": ["decode", null],
          "\u2355": ["format", "formatByExample"],
          "\u234E": ["execute", null],
          "\u22A3": ["stop", "left"],
          "\u22A2": ["pass", "right"]
        };
        var isOperator = /[\.\/⌿⍀¨⍣]/;
        var isNiladic = /⍬/;
        var isFunction = /[\+−×÷⌈⌊∣⍳\?⋆⍟○!⌹<≤=>≥≠≡≢∈⍷∪∩∼∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⌷⍋⍒⊤⊥⍕⍎⊣⊢]/;
        var isArrow = /←/;
        var isComment = /[⍝#].*$/;
        var stringEater = function(type) {
          var prev;
          prev = false;
          return function(c) {
            prev = c;
            if (c === type) {
              return prev === "\\";
            }
            return true;
          };
        };
        return {
          startState: function() {
            return {
              prev: false,
              func: false,
              op: false,
              string: false,
              escape: false
            };
          },
          token: function(stream, state) {
            var ch, funcName;
            if (stream.eatSpace()) {
              return null;
            }
            ch = stream.next();
            if (ch === '"' || ch === "'") {
              stream.eatWhile(stringEater(ch));
              stream.next();
              state.prev = true;
              return "string";
            }
            if (/[\[{\(]/.test(ch)) {
              state.prev = false;
              return null;
            }
            if (/[\]}\)]/.test(ch)) {
              state.prev = true;
              return null;
            }
            if (isNiladic.test(ch)) {
              state.prev = false;
              return "niladic";
            }
            if (/[¯\d]/.test(ch)) {
              if (state.func) {
                state.func = false;
                state.prev = false;
              } else {
                state.prev = true;
              }
              stream.eatWhile(/[\w\.]/);
              return "number";
            }
            if (isOperator.test(ch)) {
              return "operator apl-" + builtInOps[ch];
            }
            if (isArrow.test(ch)) {
              return "apl-arrow";
            }
            if (isFunction.test(ch)) {
              funcName = "apl-";
              if (builtInFuncs[ch] != null) {
                if (state.prev) {
                  funcName += builtInFuncs[ch][1];
                } else {
                  funcName += builtInFuncs[ch][0];
                }
              }
              state.func = true;
              state.prev = false;
              return "function " + funcName;
            }
            if (isComment.test(ch)) {
              stream.skipToEnd();
              return "comment";
            }
            if (ch === "\u2218" && stream.peek() === ".") {
              stream.next();
              return "function jot-dot";
            }
            stream.eatWhile(/[\w\$_]/);
            state.prev = true;
            return "keyword";
          }
        };
      });
      CodeMirror2.defineMIME("text/apl", "apl");
    });
  }
});

// mode/asciiarmor/asciiarmor.js
var require_asciiarmor = __commonJS({
  "mode/asciiarmor/asciiarmor.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      function errorIfNotEmpty(stream) {
        var nonWS = stream.match(/^\s*\S/);
        stream.skipToEnd();
        return nonWS ? "error" : null;
      }
      CodeMirror2.defineMode("asciiarmor", function() {
        return {
          token: function(stream, state) {
            var m;
            if (state.state == "top") {
              if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\s*$/))) {
                state.state = "headers";
                state.type = m[1];
                return "tag";
              }
              return errorIfNotEmpty(stream);
            } else if (state.state == "headers") {
              if (stream.sol() && stream.match(/^\w+:/)) {
                state.state = "header";
                return "atom";
              } else {
                var result = errorIfNotEmpty(stream);
                if (result)
                  state.state = "body";
                return result;
              }
            } else if (state.state == "header") {
              stream.skipToEnd();
              state.state = "headers";
              return "string";
            } else if (state.state == "body") {
              if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\s*$/))) {
                if (m[1] != state.type)
                  return "error";
                state.state = "end";
                return "tag";
              } else {
                if (stream.eatWhile(/[A-Za-z0-9+\/=]/)) {
                  return null;
                } else {
                  stream.next();
                  return "error";
                }
              }
            } else if (state.state == "end") {
              return errorIfNotEmpty(stream);
            }
          },
          blankLine: function(state) {
            if (state.state == "headers")
              state.state = "body";
          },
          startState: function() {
            return { state: "top", type: null };
          }
        };
      });
      CodeMirror2.defineMIME("application/pgp", "asciiarmor");
      CodeMirror2.defineMIME("application/pgp-encrypted", "asciiarmor");
      CodeMirror2.defineMIME("application/pgp-keys", "asciiarmor");
      CodeMirror2.defineMIME("application/pgp-signature", "asciiarmor");
    });
  }
});

// mode/asn.1/asn.1.js
var require_asn_1 = __commonJS({
  "mode/asn.1/asn.1.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("asn.1", function(config, parserConfig) {
        var indentUnit = config.indentUnit, keywords = parserConfig.keywords || {}, cmipVerbs = parserConfig.cmipVerbs || {}, compareTypes = parserConfig.compareTypes || {}, status = parserConfig.status || {}, tags = parserConfig.tags || {}, storage = parserConfig.storage || {}, modifier = parserConfig.modifier || {}, accessTypes = parserConfig.accessTypes || {}, multiLineStrings = parserConfig.multiLineStrings, indentStatements = parserConfig.indentStatements !== false;
        var isOperatorChar = /[\|\^]/;
        var curPunc;
        function tokenBase(stream, state) {
          var ch = stream.next();
          if (ch == '"' || ch == "'") {
            state.tokenize = tokenString(ch);
            return state.tokenize(stream, state);
          }
          if (/[\[\]\(\){}:=,;]/.test(ch)) {
            curPunc = ch;
            return "punctuation";
          }
          if (ch == "-") {
            if (stream.eat("-")) {
              stream.skipToEnd();
              return "comment";
            }
          }
          if (/\d/.test(ch)) {
            stream.eatWhile(/[\w\.]/);
            return "number";
          }
          if (isOperatorChar.test(ch)) {
            stream.eatWhile(isOperatorChar);
            return "operator";
          }
          stream.eatWhile(/[\w\-]/);
          var cur = stream.current();
          if (keywords.propertyIsEnumerable(cur))
            return "keyword";
          if (cmipVerbs.propertyIsEnumerable(cur))
            return "variable cmipVerbs";
          if (compareTypes.propertyIsEnumerable(cur))
            return "atom compareTypes";
          if (status.propertyIsEnumerable(cur))
            return "comment status";
          if (tags.propertyIsEnumerable(cur))
            return "variable-3 tags";
          if (storage.propertyIsEnumerable(cur))
            return "builtin storage";
          if (modifier.propertyIsEnumerable(cur))
            return "string-2 modifier";
          if (accessTypes.propertyIsEnumerable(cur))
            return "atom accessTypes";
          return "variable";
        }
        function tokenString(quote) {
          return function(stream, state) {
            var escaped = false, next, end = false;
            while ((next = stream.next()) != null) {
              if (next == quote && !escaped) {
                var afterNext = stream.peek();
                if (afterNext) {
                  afterNext = afterNext.toLowerCase();
                  if (afterNext == "b" || afterNext == "h" || afterNext == "o")
                    stream.next();
                }
                end = true;
                break;
              }
              escaped = !escaped && next == "\\";
            }
            if (end || !(escaped || multiLineStrings))
              state.tokenize = null;
            return "string";
          };
        }
        function Context(indented, column, type, align, prev) {
          this.indented = indented;
          this.column = column;
          this.type = type;
          this.align = align;
          this.prev = prev;
        }
        function pushContext(state, col, type) {
          var indent = state.indented;
          if (state.context && state.context.type == "statement")
            indent = state.context.indented;
          return state.context = new Context(indent, col, type, null, state.context);
        }
        function popContext(state) {
          var t = state.context.type;
          if (t == ")" || t == "]" || t == "}")
            state.indented = state.context.indented;
          return state.context = state.context.prev;
        }
        return {
          startState: function(basecolumn) {
            return {
              tokenize: null,
              context: new Context((basecolumn || 0) - indentUnit, 0, "top", false),
              indented: 0,
              startOfLine: true
            };
          },
          token: function(stream, state) {
            var ctx = state.context;
            if (stream.sol()) {
              if (ctx.align == null)
                ctx.align = false;
              state.indented = stream.indentation();
              state.startOfLine = true;
            }
            if (stream.eatSpace())
              return null;
            curPunc = null;
            var style = (state.tokenize || tokenBase)(stream, state);
            if (style == "comment")
              return style;
            if (ctx.align == null)
              ctx.align = true;
            if ((curPunc == ";" || curPunc == ":" || curPunc == ",") && ctx.type == "statement") {
              popContext(state);
            } else if (curPunc == "{")
              pushContext(state, stream.column(), "}");
            else if (curPunc == "[")
              pushContext(state, stream.column(), "]");
            else if (curPunc == "(")
              pushContext(state, stream.column(), ")");
            else if (curPunc == "}") {
              while (ctx.type == "statement")
                ctx = popContext(state);
              if (ctx.type == "}")
                ctx = popContext(state);
              while (ctx.type == "statement")
                ctx = popContext(state);
            } else if (curPunc == ctx.type)
              popContext(state);
            else if (indentStatements && ((ctx.type == "}" || ctx.type == "top") && curPunc != ";" || ctx.type == "statement" && curPunc == "newstatement"))
              pushContext(state, stream.column(), "statement");
            state.startOfLine = false;
            return style;
          },
          electricChars: "{}",
          lineComment: "--",
          fold: "brace"
        };
      });
      function words(str) {
        var obj = {}, words2 = str.split(" ");
        for (var i = 0; i < words2.length; ++i)
          obj[words2[i]] = true;
        return obj;
      }
      CodeMirror2.defineMIME("text/x-ttcn-asn", {
        name: "asn.1",
        keywords: words("DEFINITIONS OBJECTS IF DERIVED INFORMATION ACTION REPLY ANY NAMED CHARACTERIZED BEHAVIOUR REGISTERED WITH AS IDENTIFIED CONSTRAINED BY PRESENT BEGIN IMPORTS FROM UNITS SYNTAX MIN-ACCESS MAX-ACCESS MINACCESS MAXACCESS REVISION STATUS DESCRIPTION SEQUENCE SET COMPONENTS OF CHOICE DistinguishedName ENUMERATED SIZE MODULE END INDEX AUGMENTS EXTENSIBILITY IMPLIED EXPORTS"),
        cmipVerbs: words("ACTIONS ADD GET NOTIFICATIONS REPLACE REMOVE"),
        compareTypes: words("OPTIONAL DEFAULT MANAGED MODULE-TYPE MODULE_IDENTITY MODULE-COMPLIANCE OBJECT-TYPE OBJECT-IDENTITY OBJECT-COMPLIANCE MODE CONFIRMED CONDITIONAL SUBORDINATE SUPERIOR CLASS TRUE FALSE NULL TEXTUAL-CONVENTION"),
        status: words("current deprecated mandatory obsolete"),
        tags: words("APPLICATION AUTOMATIC EXPLICIT IMPLICIT PRIVATE TAGS UNIVERSAL"),
        storage: words("BOOLEAN INTEGER OBJECT IDENTIFIER BIT OCTET STRING UTCTime InterfaceIndex IANAifType CMIP-Attribute REAL PACKAGE PACKAGES IpAddress PhysAddress NetworkAddress BITS BMPString TimeStamp TimeTicks TruthValue RowStatus DisplayString GeneralString GraphicString IA5String NumericString PrintableString SnmpAdminAtring TeletexString UTF8String VideotexString VisibleString StringStore ISO646String T61String UniversalString Unsigned32 Integer32 Gauge Gauge32 Counter Counter32 Counter64"),
        modifier: words("ATTRIBUTE ATTRIBUTES MANDATORY-GROUP MANDATORY-GROUPS GROUP GROUPS ELEMENTS EQUALITY ORDERING SUBSTRINGS DEFINED"),
        accessTypes: words("not-accessible accessible-for-notify read-only read-create read-write"),
        multiLineStrings: true
      });
    });
  }
});

// mode/asterisk/asterisk.js
var require_asterisk = __commonJS({
  "mode/asterisk/asterisk.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("asterisk", function() {
        var atoms = ["exten", "same", "include", "ignorepat", "switch"], dpcmd = ["#include", "#exec"], apps = [
          "addqueuemember",
          "adsiprog",
          "aelsub",
          "agentlogin",
          "agentmonitoroutgoing",
          "agi",
          "alarmreceiver",
          "amd",
          "answer",
          "authenticate",
          "background",
          "backgrounddetect",
          "bridge",
          "busy",
          "callcompletioncancel",
          "callcompletionrequest",
          "celgenuserevent",
          "changemonitor",
          "chanisavail",
          "channelredirect",
          "chanspy",
          "clearhash",
          "confbridge",
          "congestion",
          "continuewhile",
          "controlplayback",
          "dahdiacceptr2call",
          "dahdibarge",
          "dahdiras",
          "dahdiscan",
          "dahdisendcallreroutingfacility",
          "dahdisendkeypadfacility",
          "datetime",
          "dbdel",
          "dbdeltree",
          "deadagi",
          "dial",
          "dictate",
          "directory",
          "disa",
          "dumpchan",
          "eagi",
          "echo",
          "endwhile",
          "exec",
          "execif",
          "execiftime",
          "exitwhile",
          "extenspy",
          "externalivr",
          "festival",
          "flash",
          "followme",
          "forkcdr",
          "getcpeid",
          "gosub",
          "gosubif",
          "goto",
          "gotoif",
          "gotoiftime",
          "hangup",
          "iax2provision",
          "ices",
          "importvar",
          "incomplete",
          "ivrdemo",
          "jabberjoin",
          "jabberleave",
          "jabbersend",
          "jabbersendgroup",
          "jabberstatus",
          "jack",
          "log",
          "macro",
          "macroexclusive",
          "macroexit",
          "macroif",
          "mailboxexists",
          "meetme",
          "meetmeadmin",
          "meetmechanneladmin",
          "meetmecount",
          "milliwatt",
          "minivmaccmess",
          "minivmdelete",
          "minivmgreet",
          "minivmmwi",
          "minivmnotify",
          "minivmrecord",
          "mixmonitor",
          "monitor",
          "morsecode",
          "mp3player",
          "mset",
          "musiconhold",
          "nbscat",
          "nocdr",
          "noop",
          "odbc",
          "odbc",
          "odbcfinish",
          "originate",
          "ospauth",
          "ospfinish",
          "osplookup",
          "ospnext",
          "page",
          "park",
          "parkandannounce",
          "parkedcall",
          "pausemonitor",
          "pausequeuemember",
          "pickup",
          "pickupchan",
          "playback",
          "playtones",
          "privacymanager",
          "proceeding",
          "progress",
          "queue",
          "queuelog",
          "raiseexception",
          "read",
          "readexten",
          "readfile",
          "receivefax",
          "receivefax",
          "receivefax",
          "record",
          "removequeuemember",
          "resetcdr",
          "retrydial",
          "return",
          "ringing",
          "sayalpha",
          "saycountedadj",
          "saycountednoun",
          "saycountpl",
          "saydigits",
          "saynumber",
          "sayphonetic",
          "sayunixtime",
          "senddtmf",
          "sendfax",
          "sendfax",
          "sendfax",
          "sendimage",
          "sendtext",
          "sendurl",
          "set",
          "setamaflags",
          "setcallerpres",
          "setmusiconhold",
          "sipaddheader",
          "sipdtmfmode",
          "sipremoveheader",
          "skel",
          "slastation",
          "slatrunk",
          "sms",
          "softhangup",
          "speechactivategrammar",
          "speechbackground",
          "speechcreate",
          "speechdeactivategrammar",
          "speechdestroy",
          "speechloadgrammar",
          "speechprocessingsound",
          "speechstart",
          "speechunloadgrammar",
          "stackpop",
          "startmusiconhold",
          "stopmixmonitor",
          "stopmonitor",
          "stopmusiconhold",
          "stopplaytones",
          "system",
          "testclient",
          "testserver",
          "transfer",
          "tryexec",
          "trysystem",
          "unpausemonitor",
          "unpausequeuemember",
          "userevent",
          "verbose",
          "vmauthenticate",
          "vmsayname",
          "voicemail",
          "voicemailmain",
          "wait",
          "waitexten",
          "waitfornoise",
          "waitforring",
          "waitforsilence",
          "waitmusiconhold",
          "waituntil",
          "while",
          "zapateller"
        ];
        function basicToken(stream, state) {
          var cur = "";
          var ch = stream.next();
          if (state.blockComment) {
            if (ch == "-" && stream.match("-;", true)) {
              state.blockComment = false;
            } else if (stream.skipTo("--;")) {
              stream.next();
              stream.next();
              stream.next();
              state.blockComment = false;
            } else {
              stream.skipToEnd();
            }
            return "comment";
          }
          if (ch == ";") {
            if (stream.match("--", true)) {
              if (!stream.match("-", false)) {
                state.blockComment = true;
                return "comment";
              }
            }
            stream.skipToEnd();
            return "comment";
          }
          if (ch == "[") {
            stream.skipTo("]");
            stream.eat("]");
            return "header";
          }
          if (ch == '"') {
            stream.skipTo('"');
            return "string";
          }
          if (ch == "'") {
            stream.skipTo("'");
            return "string-2";
          }
          if (ch == "#") {
            stream.eatWhile(/\w/);
            cur = stream.current();
            if (dpcmd.indexOf(cur) !== -1) {
              stream.skipToEnd();
              return "strong";
            }
          }
          if (ch == "$") {
            var ch1 = stream.peek();
            if (ch1 == "{") {
              stream.skipTo("}");
              stream.eat("}");
              return "variable-3";
            }
          }
          stream.eatWhile(/\w/);
          cur = stream.current();
          if (atoms.indexOf(cur) !== -1) {
            state.extenStart = true;
            switch (cur) {
              case "same":
                state.extenSame = true;
                break;
              case "include":
              case "switch":
              case "ignorepat":
                state.extenInclude = true;
                break;
              default:
                break;
            }
            return "atom";
          }
        }
        return {
          startState: function() {
            return {
              blockComment: false,
              extenStart: false,
              extenSame: false,
              extenInclude: false,
              extenExten: false,
              extenPriority: false,
              extenApplication: false
            };
          },
          token: function(stream, state) {
            var cur = "";
            if (stream.eatSpace())
              return null;
            if (state.extenStart) {
              stream.eatWhile(/[^\s]/);
              cur = stream.current();
              if (/^=>?$/.test(cur)) {
                state.extenExten = true;
                state.extenStart = false;
                return "strong";
              } else {
                state.extenStart = false;
                stream.skipToEnd();
                return "error";
              }
            } else if (state.extenExten) {
              state.extenExten = false;
              state.extenPriority = true;
              stream.eatWhile(/[^,]/);
              if (state.extenInclude) {
                stream.skipToEnd();
                state.extenPriority = false;
                state.extenInclude = false;
              }
              if (state.extenSame) {
                state.extenPriority = false;
                state.extenSame = false;
                state.extenApplication = true;
              }
              return "tag";
            } else if (state.extenPriority) {
              state.extenPriority = false;
              state.extenApplication = true;
              stream.next();
              if (state.extenSame)
                return null;
              stream.eatWhile(/[^,]/);
              return "number";
            } else if (state.extenApplication) {
              stream.eatWhile(/,/);
              cur = stream.current();
              if (cur === ",")
                return null;
              stream.eatWhile(/\w/);
              cur = stream.current().toLowerCase();
              state.extenApplication = false;
              if (apps.indexOf(cur) !== -1) {
                return "def strong";
              }
            } else {
              return basicToken(stream, state);
            }
            return null;
          },
          blockCommentStart: ";--",
          blockCommentEnd: "--;",
          lineComment: ";"
        };
      });
      CodeMirror2.defineMIME("text/x-asterisk", "asterisk");
    });
  }
});

// mode/brainfuck/brainfuck.js
var require_brainfuck = __commonJS({
  "mode/brainfuck/brainfuck.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      var reserve = "><+-.,[]".split("");
      CodeMirror2.defineMode("brainfuck", function() {
        return {
          startState: function() {
            return {
              commentLine: false,
              left: 0,
              right: 0,
              commentLoop: false
            };
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            if (stream.sol()) {
              state.commentLine = false;
            }
            var ch = stream.next().toString();
            if (reserve.indexOf(ch) !== -1) {
              if (state.commentLine === true) {
                if (stream.eol()) {
                  state.commentLine = false;
                }
                return "comment";
              }
              if (ch === "]" || ch === "[") {
                if (ch === "[") {
                  state.left++;
                } else {
                  state.right++;
                }
                return "bracket";
              } else if (ch === "+" || ch === "-") {
                return "keyword";
              } else if (ch === "<" || ch === ">") {
                return "atom";
              } else if (ch === "." || ch === ",") {
                return "def";
              }
            } else {
              state.commentLine = true;
              if (stream.eol()) {
                state.commentLine = false;
              }
              return "comment";
            }
            if (stream.eol()) {
              state.commentLine = false;
            }
          }
        };
      });
      CodeMirror2.defineMIME("text/x-brainfuck", "brainfuck");
    });
  }
});

// mode/clike/clike.js
var require_clike = __commonJS({
  "mode/clike/clike.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      function Context(indented, column, type, info, align, prev) {
        this.indented = indented;
        this.column = column;
        this.type = type;
        this.info = info;
        this.align = align;
        this.prev = prev;
      }
      function pushContext(state, col, type, info) {
        var indent = state.indented;
        if (state.context && state.context.type == "statement" && type != "statement")
          indent = state.context.indented;
        return state.context = new Context(indent, col, type, info, null, state.context);
      }
      function popContext(state) {
        var t = state.context.type;
        if (t == ")" || t == "]" || t == "}")
          state.indented = state.context.indented;
        return state.context = state.context.prev;
      }
      function typeBefore(stream, state, pos) {
        if (state.prevToken == "variable" || state.prevToken == "type")
          return true;
        if (/\S(?:[^- ]>|[*\]])\s*$|\*$/.test(stream.string.slice(0, pos)))
          return true;
        if (state.typeAtEndOfLine && stream.column() == stream.indentation())
          return true;
      }
      function isTopScope(context) {
        for (; ; ) {
          if (!context || context.type == "top")
            return true;
          if (context.type == "}" && context.prev.info != "namespace")
            return false;
          context = context.prev;
        }
      }
      CodeMirror2.defineMode("clike", function(config, parserConfig) {
        var indentUnit = config.indentUnit, statementIndentUnit = parserConfig.statementIndentUnit || indentUnit, dontAlignCalls = parserConfig.dontAlignCalls, keywords = parserConfig.keywords || {}, types = parserConfig.types || {}, builtin = parserConfig.builtin || {}, blockKeywords = parserConfig.blockKeywords || {}, defKeywords = parserConfig.defKeywords || {}, atoms = parserConfig.atoms || {}, hooks = parserConfig.hooks || {}, multiLineStrings = parserConfig.multiLineStrings, indentStatements = parserConfig.indentStatements !== false, indentSwitch = parserConfig.indentSwitch !== false, namespaceSeparator = parserConfig.namespaceSeparator, isPunctuationChar = parserConfig.isPunctuationChar || /[\[\]{}\(\),;\:\.]/, numberStart = parserConfig.numberStart || /[\d\.]/, number = parserConfig.number || /^(?:0x[a-f\d]+|0b[01]+|(?:\d+\.?\d*|\.\d+)(?:e[-+]?\d+)?)(u|ll?|l|f)?/i, isOperatorChar = parserConfig.isOperatorChar || /[+\-*&%=<>!?|\/]/, isIdentifierChar = parserConfig.isIdentifierChar || /[\w\$_\xa1-\uffff]/, isReservedIdentifier = parserConfig.isReservedIdentifier || false;
        var curPunc, isDefKeyword;
        function tokenBase(stream, state) {
          var ch = stream.next();
          if (hooks[ch]) {
            var result = hooks[ch](stream, state);
            if (result !== false)
              return result;
          }
          if (ch == '"' || ch == "'") {
            state.tokenize = tokenString(ch);
            return state.tokenize(stream, state);
          }
          if (isPunctuationChar.test(ch)) {
            curPunc = ch;
            return null;
          }
          if (numberStart.test(ch)) {
            stream.backUp(1);
            if (stream.match(number))
              return "number";
            stream.next();
          }
          if (ch == "/") {
            if (stream.eat("*")) {
              state.tokenize = tokenComment;
              return tokenComment(stream, state);
            }
            if (stream.eat("/")) {
              stream.skipToEnd();
              return "comment";
            }
          }
          if (isOperatorChar.test(ch)) {
            while (!stream.match(/^\/[\/*]/, false) && stream.eat(isOperatorChar)) {
            }
            return "operator";
          }
          stream.eatWhile(isIdentifierChar);
          if (namespaceSeparator)
            while (stream.match(namespaceSeparator))
              stream.eatWhile(isIdentifierChar);
          var cur = stream.current();
          if (contains(keywords, cur)) {
            if (contains(blockKeywords, cur))
              curPunc = "newstatement";
            if (contains(defKeywords, cur))
              isDefKeyword = true;
            return "keyword";
          }
          if (contains(types, cur))
            return "type";
          if (contains(builtin, cur) || isReservedIdentifier && isReservedIdentifier(cur)) {
            if (contains(blockKeywords, cur))
              curPunc = "newstatement";
            return "builtin";
          }
          if (contains(atoms, cur))
            return "atom";
          return "variable";
        }
        function tokenString(quote) {
          return function(stream, state) {
            var escaped = false, next, end = false;
            while ((next = stream.next()) != null) {
              if (next == quote && !escaped) {
                end = true;
                break;
              }
              escaped = !escaped && next == "\\";
            }
            if (end || !(escaped || multiLineStrings))
              state.tokenize = null;
            return "string";
          };
        }
        function tokenComment(stream, state) {
          var maybeEnd = false, ch;
          while (ch = stream.next()) {
            if (ch == "/" && maybeEnd) {
              state.tokenize = null;
              break;
            }
            maybeEnd = ch == "*";
          }
          return "comment";
        }
        function maybeEOL(stream, state) {
          if (parserConfig.typeFirstDefinitions && stream.eol() && isTopScope(state.context))
            state.typeAtEndOfLine = typeBefore(stream, state, stream.pos);
        }
        return {
          startState: function(basecolumn) {
            return {
              tokenize: null,
              context: new Context((basecolumn || 0) - indentUnit, 0, "top", null, false),
              indented: 0,
              startOfLine: true,
              prevToken: null
            };
          },
          token: function(stream, state) {
            var ctx = state.context;
            if (stream.sol()) {
              if (ctx.align == null)
                ctx.align = false;
              state.indented = stream.indentation();
              state.startOfLine = true;
            }
            if (stream.eatSpace()) {
              maybeEOL(stream, state);
              return null;
            }
            curPunc = isDefKeyword = null;
            var style = (state.tokenize || tokenBase)(stream, state);
            if (style == "comment" || style == "meta")
              return style;
            if (ctx.align == null)
              ctx.align = true;
            if (curPunc == ";" || curPunc == ":" || curPunc == "," && stream.match(/^\s*(?:\/\/.*)?$/, false))
              while (state.context.type == "statement")
                popContext(state);
            else if (curPunc == "{")
              pushContext(state, stream.column(), "}");
            else if (curPunc == "[")
              pushContext(state, stream.column(), "]");
            else if (curPunc == "(")
              pushContext(state, stream.column(), ")");
            else if (curPunc == "}") {
              while (ctx.type == "statement")
                ctx = popContext(state);
              if (ctx.type == "}")
                ctx = popContext(state);
              while (ctx.type == "statement")
                ctx = popContext(state);
            } else if (curPunc == ctx.type)
              popContext(state);
            else if (indentStatements && ((ctx.type == "}" || ctx.type == "top") && curPunc != ";" || ctx.type == "statement" && curPunc == "newstatement")) {
              pushContext(state, stream.column(), "statement", stream.current());
            }
            if (style == "variable" && (state.prevToken == "def" || parserConfig.typeFirstDefinitions && typeBefore(stream, state, stream.start) && isTopScope(state.context) && stream.match(/^\s*\(/, false)))
              style = "def";
            if (hooks.token) {
              var result = hooks.token(stream, state, style);
              if (result !== void 0)
                style = result;
            }
            if (style == "def" && parserConfig.styleDefs === false)
              style = "variable";
            state.startOfLine = false;
            state.prevToken = isDefKeyword ? "def" : style || curPunc;
            maybeEOL(stream, state);
            return style;
          },
          indent: function(state, textAfter) {
            if (state.tokenize != tokenBase && state.tokenize != null || state.typeAtEndOfLine)
              return CodeMirror2.Pass;
            var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
            var closing = firstChar == ctx.type;
            if (ctx.type == "statement" && firstChar == "}")
              ctx = ctx.prev;
            if (parserConfig.dontIndentStatements)
              while (ctx.type == "statement" && parserConfig.dontIndentStatements.test(ctx.info))
                ctx = ctx.prev;
            if (hooks.indent) {
              var hook = hooks.indent(state, ctx, textAfter, indentUnit);
              if (typeof hook == "number")
                return hook;
            }
            var switchBlock = ctx.prev && ctx.prev.info == "switch";
            if (parserConfig.allmanIndentation && /[{(]/.test(firstChar)) {
              while (ctx.type != "top" && ctx.type != "}")
                ctx = ctx.prev;
              return ctx.indented;
            }
            if (ctx.type == "statement")
              return ctx.indented + (firstChar == "{" ? 0 : statementIndentUnit);
            if (ctx.align && (!dontAlignCalls || ctx.type != ")"))
              return ctx.column + (closing ? 0 : 1);
            if (ctx.type == ")" && !closing)
              return ctx.indented + statementIndentUnit;
            return ctx.indented + (closing ? 0 : indentUnit) + (!closing && switchBlock && !/^(?:case|default)\b/.test(textAfter) ? indentUnit : 0);
          },
          electricInput: indentSwitch ? /^\s*(?:case .*?:|default:|\{\}?|\})$/ : /^\s*[{}]$/,
          blockCommentStart: "/*",
          blockCommentEnd: "*/",
          blockCommentContinue: " * ",
          lineComment: "//",
          fold: "brace"
        };
      });
      function words(str) {
        var obj = {}, words2 = str.split(" ");
        for (var i = 0; i < words2.length; ++i)
          obj[words2[i]] = true;
        return obj;
      }
      function contains(words2, word) {
        if (typeof words2 === "function") {
          return words2(word);
        } else {
          return words2.propertyIsEnumerable(word);
        }
      }
      var cKeywords = "auto if break case register continue return default do sizeof static else struct switch extern typedef union for goto while enum const volatile inline restrict asm fortran";
      var cppKeywords = "alignas alignof and and_eq audit axiom bitand bitor catch class compl concept constexpr const_cast decltype delete dynamic_cast explicit export final friend import module mutable namespace new noexcept not not_eq operator or or_eq override private protected public reinterpret_cast requires static_assert static_cast template this thread_local throw try typeid typename using virtual xor xor_eq";
      var objCKeywords = "bycopy byref in inout oneway out self super atomic nonatomic retain copy readwrite readonly strong weak assign typeof nullable nonnull null_resettable _cmd @interface @implementation @end @protocol @encode @property @synthesize @dynamic @class @public @package @private @protected @required @optional @try @catch @finally @import @selector @encode @defs @synchronized @autoreleasepool @compatibility_alias @available";
      var objCBuiltins = "FOUNDATION_EXPORT FOUNDATION_EXTERN NS_INLINE NS_FORMAT_FUNCTION  NS_RETURNS_RETAINEDNS_ERROR_ENUM NS_RETURNS_NOT_RETAINED NS_RETURNS_INNER_POINTER NS_DESIGNATED_INITIALIZER NS_ENUM NS_OPTIONS NS_REQUIRES_NIL_TERMINATION NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_SWIFT_NAME NS_REFINED_FOR_SWIFT";
      var basicCTypes = words("int long char short double float unsigned signed void bool");
      var basicObjCTypes = words("SEL instancetype id Class Protocol BOOL");
      function cTypes(identifier) {
        return contains(basicCTypes, identifier) || /.+_t$/.test(identifier);
      }
      function objCTypes(identifier) {
        return cTypes(identifier) || contains(basicObjCTypes, identifier);
      }
      var cBlockKeywords = "case do else for if switch while struct enum union";
      var cDefKeywords = "struct enum union";
      function cppHook(stream, state) {
        if (!state.startOfLine)
          return false;
        for (var ch, next = null; ch = stream.peek(); ) {
          if (ch == "\\" && stream.match(/^.$/)) {
            next = cppHook;
            break;
          } else if (ch == "/" && stream.match(/^\/[\/\*]/, false)) {
            break;
          }
          stream.next();
        }
        state.tokenize = next;
        return "meta";
      }
      function pointerHook(_stream, state) {
        if (state.prevToken == "type")
          return "type";
        return false;
      }
      function cIsReservedIdentifier(token) {
        if (!token || token.length < 2)
          return false;
        if (token[0] != "_")
          return false;
        return token[1] == "_" || token[1] !== token[1].toLowerCase();
      }
      function cpp14Literal(stream) {
        stream.eatWhile(/[\w\.']/);
        return "number";
      }
      function cpp11StringHook(stream, state) {
        stream.backUp(1);
        if (stream.match(/(R|u8R|uR|UR|LR)/)) {
          var match = stream.match(/"([^\s\\()]{0,16})\(/);
          if (!match) {
            return false;
          }
          state.cpp11RawStringDelim = match[1];
          state.tokenize = tokenRawString;
          return tokenRawString(stream, state);
        }
        if (stream.match(/(u8|u|U|L)/)) {
          if (stream.match(
            /["']/,
            /* eat */
            false
          )) {
            return "string";
          }
          return false;
        }
        stream.next();
        return false;
      }
      function cppLooksLikeConstructor(word) {
        var lastTwo = /(\w+)::~?(\w+)$/.exec(word);
        return lastTwo && lastTwo[1] == lastTwo[2];
      }
      function tokenAtString(stream, state) {
        var next;
        while ((next = stream.next()) != null) {
          if (next == '"' && !stream.eat('"')) {
            state.tokenize = null;
            break;
          }
        }
        return "string";
      }
      function tokenRawString(stream, state) {
        var delim = state.cpp11RawStringDelim.replace(/[^\w\s]/g, "\\$&");
        var match = stream.match(new RegExp(".*?\\)" + delim + '"'));
        if (match)
          state.tokenize = null;
        else
          stream.skipToEnd();
        return "string";
      }
      function def(mimes, mode) {
        if (typeof mimes == "string")
          mimes = [mimes];
        var words2 = [];
        function add(obj) {
          if (obj) {
            for (var prop in obj)
              if (obj.hasOwnProperty(prop))
                words2.push(prop);
          }
        }
        add(mode.keywords);
        add(mode.types);
        add(mode.builtin);
        add(mode.atoms);
        if (words2.length) {
          mode.helperType = mimes[0];
          CodeMirror2.registerHelper("hintWords", mimes[0], words2);
        }
        for (var i = 0; i < mimes.length; ++i)
          CodeMirror2.defineMIME(mimes[i], mode);
      }
      def(["text/x-csrc", "text/x-c", "text/x-chdr"], {
        name: "clike",
        keywords: words(cKeywords),
        types: cTypes,
        blockKeywords: words(cBlockKeywords),
        defKeywords: words(cDefKeywords),
        typeFirstDefinitions: true,
        atoms: words("NULL true false"),
        isReservedIdentifier: cIsReservedIdentifier,
        hooks: {
          "#": cppHook,
          "*": pointerHook
        },
        modeProps: { fold: ["brace", "include"] }
      });
      def(["text/x-c++src", "text/x-c++hdr"], {
        name: "clike",
        keywords: words(cKeywords + " " + cppKeywords),
        types: cTypes,
        blockKeywords: words(cBlockKeywords + " class try catch"),
        defKeywords: words(cDefKeywords + " class namespace"),
        typeFirstDefinitions: true,
        atoms: words("true false NULL nullptr"),
        dontIndentStatements: /^template$/,
        isIdentifierChar: /[\w\$_~\xa1-\uffff]/,
        isReservedIdentifier: cIsReservedIdentifier,
        hooks: {
          "#": cppHook,
          "*": pointerHook,
          "u": cpp11StringHook,
          "U": cpp11StringHook,
          "L": cpp11StringHook,
          "R": cpp11StringHook,
          "0": cpp14Literal,
          "1": cpp14Literal,
          "2": cpp14Literal,
          "3": cpp14Literal,
          "4": cpp14Literal,
          "5": cpp14Literal,
          "6": cpp14Literal,
          "7": cpp14Literal,
          "8": cpp14Literal,
          "9": cpp14Literal,
          token: function(stream, state, style) {
            if (style == "variable" && stream.peek() == "(" && (state.prevToken == ";" || state.prevToken == null || state.prevToken == "}") && cppLooksLikeConstructor(stream.current()))
              return "def";
          }
        },
        namespaceSeparator: "::",
        modeProps: { fold: ["brace", "include"] }
      });
      def("text/x-java", {
        name: "clike",
        keywords: words("abstract assert break case catch class const continue default do else enum extends final finally for goto if implements import instanceof interface native new package private protected public return static strictfp super switch synchronized this throw throws transient try volatile while @interface"),
        types: words("byte short int long float double boolean char void Boolean Byte Character Double Float Integer Long Number Object Short String StringBuffer StringBuilder Void"),
        blockKeywords: words("catch class do else finally for if switch try while"),
        defKeywords: words("class interface enum @interface"),
        typeFirstDefinitions: true,
        atoms: words("true false null"),
        number: /^(?:0x[a-f\d_]+|0b[01_]+|(?:[\d_]+\.?\d*|\.\d+)(?:e[-+]?[\d_]+)?)(u|ll?|l|f)?/i,
        hooks: {
          "@": function(stream) {
            if (stream.match("interface", false))
              return false;
            stream.eatWhile(/[\w\$_]/);
            return "meta";
          }
        },
        modeProps: { fold: ["brace", "import"] }
      });
      def("text/x-csharp", {
        name: "clike",
        keywords: words("abstract as async await base break case catch checked class const continue default delegate do else enum event explicit extern finally fixed for foreach goto if implicit in interface internal is lock namespace new operator out override params private protected public readonly ref return sealed sizeof stackalloc static struct switch this throw try typeof unchecked unsafe using virtual void volatile while add alias ascending descending dynamic from get global group into join let orderby partial remove select set value var yield"),
        types: words("Action Boolean Byte Char DateTime DateTimeOffset Decimal Double Func Guid Int16 Int32 Int64 Object SByte Single String Task TimeSpan UInt16 UInt32 UInt64 bool byte char decimal double short int long object sbyte float string ushort uint ulong"),
        blockKeywords: words("catch class do else finally for foreach if struct switch try while"),
        defKeywords: words("class interface namespace struct var"),
        typeFirstDefinitions: true,
        atoms: words("true false null"),
        hooks: {
          "@": function(stream, state) {
            if (stream.eat('"')) {
              state.tokenize = tokenAtString;
              return tokenAtString(stream, state);
            }
            stream.eatWhile(/[\w\$_]/);
            return "meta";
          }
        }
      });
      function tokenTripleString(stream, state) {
        var escaped = false;
        while (!stream.eol()) {
          if (!escaped && stream.match('"""')) {
            state.tokenize = null;
            break;
          }
          escaped = stream.next() == "\\" && !escaped;
        }
        return "string";
      }
      function tokenNestedComment(depth) {
        return function(stream, state) {
          var ch;
          while (ch = stream.next()) {
            if (ch == "*" && stream.eat("/")) {
              if (depth == 1) {
                state.tokenize = null;
                break;
              } else {
                state.tokenize = tokenNestedComment(depth - 1);
                return state.tokenize(stream, state);
              }
            } else if (ch == "/" && stream.eat("*")) {
              state.tokenize = tokenNestedComment(depth + 1);
              return state.tokenize(stream, state);
            }
          }
          return "comment";
        };
      }
      def("text/x-scala", {
        name: "clike",
        keywords: words(
          /* scala */
          "abstract case catch class def do else extends final finally for forSome if implicit import lazy match new null object override package private protected return sealed super this throw trait try type val var while with yield _ assert assume require print println printf readLine readBoolean readByte readShort readChar readInt readLong readFloat readDouble"
        ),
        types: words(
          "AnyVal App Application Array BufferedIterator BigDecimal BigInt Char Console Either Enumeration Equiv Error Exception Fractional Function IndexedSeq Int Integral Iterable Iterator List Map Numeric Nil NotNull Option Ordered Ordering PartialFunction PartialOrdering Product Proxy Range Responder Seq Serializable Set Specializable Stream StringBuilder StringContext Symbol Throwable Traversable TraversableOnce Tuple Unit Vector Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable Compiler Double Exception Float Integer Long Math Number Object Package Pair Process Runtime Runnable SecurityManager Short StackTraceElement StrictMath String StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void"
        ),
        multiLineStrings: true,
        blockKeywords: words("catch class enum do else finally for forSome if match switch try while"),
        defKeywords: words("class enum def object package trait type val var"),
        atoms: words("true false null"),
        indentStatements: false,
        indentSwitch: false,
        isOperatorChar: /[+\-*&%=<>!?|\/#:@]/,
        hooks: {
          "@": function(stream) {
            stream.eatWhile(/[\w\$_]/);
            return "meta";
          },
          '"': function(stream, state) {
            if (!stream.match('""'))
              return false;
            state.tokenize = tokenTripleString;
            return state.tokenize(stream, state);
          },
          "'": function(stream) {
            stream.eatWhile(/[\w\$_\xa1-\uffff]/);
            return "atom";
          },
          "=": function(stream, state) {
            var cx = state.context;
            if (cx.type == "}" && cx.align && stream.eat(">")) {
              state.context = new Context(cx.indented, cx.column, cx.type, cx.info, null, cx.prev);
              return "operator";
            } else {
              return false;
            }
          },
          "/": function(stream, state) {
            if (!stream.eat("*"))
              return false;
            state.tokenize = tokenNestedComment(1);
            return state.tokenize(stream, state);
          }
        },
        modeProps: { closeBrackets: { pairs: '()[]{}""', triples: '"' } }
      });
      function tokenKotlinString(tripleString) {
        return function(stream, state) {
          var escaped = false, next, end = false;
          while (!stream.eol()) {
            if (!tripleString && !escaped && stream.match('"')) {
              end = true;
              break;
            }
            if (tripleString && stream.match('"""')) {
              end = true;
              break;
            }
            next = stream.next();
            if (!escaped && next == "$" && stream.match("{"))
              stream.skipTo("}");
            escaped = !escaped && next == "\\" && !tripleString;
          }
          if (end || !tripleString)
            state.tokenize = null;
          return "string";
        };
      }
      def("text/x-kotlin", {
        name: "clike",
        keywords: words(
          /*keywords*/
          "package as typealias class interface this super val operator var fun for is in This throw return annotation break continue object if else while do try when !in !is as? file import where by get set abstract enum open inner override private public internal protected catch finally out final vararg reified dynamic companion constructor init sealed field property receiver param sparam lateinit data inline noinline tailrec external annotation crossinline const operator infix suspend actual expect setparam"
        ),
        types: words(
          /* package java.lang */
          "Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable Compiler Double Exception Float Integer Long Math Number Object Package Pair Process Runtime Runnable SecurityManager Short StackTraceElement StrictMath String StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void Annotation Any BooleanArray ByteArray Char CharArray DeprecationLevel DoubleArray Enum FloatArray Function Int IntArray Lazy LazyThreadSafetyMode LongArray Nothing ShortArray Unit"
        ),
        intendSwitch: false,
        indentStatements: false,
        multiLineStrings: true,
        number: /^(?:0x[a-f\d_]+|0b[01_]+|(?:[\d_]+(\.\d+)?|\.\d+)(?:e[-+]?[\d_]+)?)(u|ll?|l|f)?/i,
        blockKeywords: words("catch class do else finally for if where try while enum"),
        defKeywords: words("class val var object interface fun"),
        atoms: words("true false null this"),
        hooks: {
          "@": function(stream) {
            stream.eatWhile(/[\w\$_]/);
            return "meta";
          },
          "*": function(_stream, state) {
            return state.prevToken == "." ? "variable" : "operator";
          },
          '"': function(stream, state) {
            state.tokenize = tokenKotlinString(stream.match('""'));
            return state.tokenize(stream, state);
          },
          "/": function(stream, state) {
            if (!stream.eat("*"))
              return false;
            state.tokenize = tokenNestedComment(1);
            return state.tokenize(stream, state);
          },
          indent: function(state, ctx, textAfter, indentUnit) {
            var firstChar = textAfter && textAfter.charAt(0);
            if ((state.prevToken == "}" || state.prevToken == ")") && textAfter == "")
              return state.indented;
            if (state.prevToken == "operator" && textAfter != "}" && state.context.type != "}" || state.prevToken == "variable" && firstChar == "." || (state.prevToken == "}" || state.prevToken == ")") && firstChar == ".")
              return indentUnit * 2 + ctx.indented;
            if (ctx.align && ctx.type == "}")
              return ctx.indented + (state.context.type == (textAfter || "").charAt(0) ? 0 : indentUnit);
          }
        },
        modeProps: { closeBrackets: { triples: '"' } }
      });
      def(["x-shader/x-vertex", "x-shader/x-fragment"], {
        name: "clike",
        keywords: words("sampler1D sampler2D sampler3D samplerCube sampler1DShadow sampler2DShadow const attribute uniform varying break continue discard return for while do if else struct in out inout"),
        types: words("float int bool void vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 mat2 mat3 mat4"),
        blockKeywords: words("for while do if else struct"),
        builtin: words("radians degrees sin cos tan asin acos atan pow exp log exp2 sqrt inversesqrt abs sign floor ceil fract mod min max clamp mix step smoothstep length distance dot cross normalize ftransform faceforward reflect refract matrixCompMult lessThan lessThanEqual greaterThan greaterThanEqual equal notEqual any all not texture1D texture1DProj texture1DLod texture1DProjLod texture2D texture2DProj texture2DLod texture2DProjLod texture3D texture3DProj texture3DLod texture3DProjLod textureCube textureCubeLod shadow1D shadow2D shadow1DProj shadow2DProj shadow1DLod shadow2DLod shadow1DProjLod shadow2DProjLod dFdx dFdy fwidth noise1 noise2 noise3 noise4"),
        atoms: words("true false gl_FragColor gl_SecondaryColor gl_Normal gl_Vertex gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 gl_FogCoord gl_PointCoord gl_Position gl_PointSize gl_ClipVertex gl_FrontColor gl_BackColor gl_FrontSecondaryColor gl_BackSecondaryColor gl_TexCoord gl_FogFragCoord gl_FragCoord gl_FrontFacing gl_FragData gl_FragDepth gl_ModelViewMatrix gl_ProjectionMatrix gl_ModelViewProjectionMatrix gl_TextureMatrix gl_NormalMatrix gl_ModelViewMatrixInverse gl_ProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse gl_TexureMatrixTranspose gl_ModelViewMatrixInverseTranspose gl_ProjectionMatrixInverseTranspose gl_ModelViewProjectionMatrixInverseTranspose gl_TextureMatrixInverseTranspose gl_NormalScale gl_DepthRange gl_ClipPlane gl_Point gl_FrontMaterial gl_BackMaterial gl_LightSource gl_LightModel gl_FrontLightModelProduct gl_BackLightModelProduct gl_TextureColor gl_EyePlaneS gl_EyePlaneT gl_EyePlaneR gl_EyePlaneQ gl_FogParameters gl_MaxLights gl_MaxClipPlanes gl_MaxTextureUnits gl_MaxTextureCoords gl_MaxVertexAttribs gl_MaxVertexUniformComponents gl_MaxVaryingFloats gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits gl_MaxFragmentUniformComponents gl_MaxCombineTextureImageUnits gl_MaxDrawBuffers"),
        indentSwitch: false,
        hooks: { "#": cppHook },
        modeProps: { fold: ["brace", "include"] }
      });
      def("text/x-nesc", {
        name: "clike",
        keywords: words(cKeywords + " as atomic async call command component components configuration event generic implementation includes interface module new norace nx_struct nx_union post provides signal task uses abstract extends"),
        types: cTypes,
        blockKeywords: words(cBlockKeywords),
        atoms: words("null true false"),
        hooks: { "#": cppHook },
        modeProps: { fold: ["brace", "include"] }
      });
      def("text/x-objectivec", {
        name: "clike",
        keywords: words(cKeywords + " " + objCKeywords),
        types: objCTypes,
        builtin: words(objCBuiltins),
        blockKeywords: words(cBlockKeywords + " @synthesize @try @catch @finally @autoreleasepool @synchronized"),
        defKeywords: words(cDefKeywords + " @interface @implementation @protocol @class"),
        dontIndentStatements: /^@.*$/,
        typeFirstDefinitions: true,
        atoms: words("YES NO NULL Nil nil true false nullptr"),
        isReservedIdentifier: cIsReservedIdentifier,
        hooks: {
          "#": cppHook,
          "*": pointerHook
        },
        modeProps: { fold: ["brace", "include"] }
      });
      def("text/x-objectivec++", {
        name: "clike",
        keywords: words(cKeywords + " " + objCKeywords + " " + cppKeywords),
        types: objCTypes,
        builtin: words(objCBuiltins),
        blockKeywords: words(cBlockKeywords + " @synthesize @try @catch @finally @autoreleasepool @synchronized class try catch"),
        defKeywords: words(cDefKeywords + " @interface @implementation @protocol @class class namespace"),
        dontIndentStatements: /^@.*$|^template$/,
        typeFirstDefinitions: true,
        atoms: words("YES NO NULL Nil nil true false nullptr"),
        isReservedIdentifier: cIsReservedIdentifier,
        hooks: {
          "#": cppHook,
          "*": pointerHook,
          "u": cpp11StringHook,
          "U": cpp11StringHook,
          "L": cpp11StringHook,
          "R": cpp11StringHook,
          "0": cpp14Literal,
          "1": cpp14Literal,
          "2": cpp14Literal,
          "3": cpp14Literal,
          "4": cpp14Literal,
          "5": cpp14Literal,
          "6": cpp14Literal,
          "7": cpp14Literal,
          "8": cpp14Literal,
          "9": cpp14Literal,
          token: function(stream, state, style) {
            if (style == "variable" && stream.peek() == "(" && (state.prevToken == ";" || state.prevToken == null || state.prevToken == "}") && cppLooksLikeConstructor(stream.current()))
              return "def";
          }
        },
        namespaceSeparator: "::",
        modeProps: { fold: ["brace", "include"] }
      });
      def("text/x-squirrel", {
        name: "clike",
        keywords: words("base break clone continue const default delete enum extends function in class foreach local resume return this throw typeof yield constructor instanceof static"),
        types: cTypes,
        blockKeywords: words("case catch class else for foreach if switch try while"),
        defKeywords: words("function local class"),
        typeFirstDefinitions: true,
        atoms: words("true false null"),
        hooks: { "#": cppHook },
        modeProps: { fold: ["brace", "include"] }
      });
      var stringTokenizer = null;
      function tokenCeylonString(type) {
        return function(stream, state) {
          var escaped = false, next, end = false;
          while (!stream.eol()) {
            if (!escaped && stream.match('"') && (type == "single" || stream.match('""'))) {
              end = true;
              break;
            }
            if (!escaped && stream.match("``")) {
              stringTokenizer = tokenCeylonString(type);
              end = true;
              break;
            }
            next = stream.next();
            escaped = type == "single" && !escaped && next == "\\";
          }
          if (end)
            state.tokenize = null;
          return "string";
        };
      }
      def("text/x-ceylon", {
        name: "clike",
        keywords: words("abstracts alias assembly assert assign break case catch class continue dynamic else exists extends finally for function given if import in interface is let module new nonempty object of out outer package return satisfies super switch then this throw try value void while"),
        types: function(word) {
          var first = word.charAt(0);
          return first === first.toUpperCase() && first !== first.toLowerCase();
        },
        blockKeywords: words("case catch class dynamic else finally for function if interface module new object switch try while"),
        defKeywords: words("class dynamic function interface module object package value"),
        builtin: words("abstract actual aliased annotation by default deprecated doc final formal late license native optional sealed see serializable shared suppressWarnings tagged throws variable"),
        isPunctuationChar: /[\[\]{}\(\),;\:\.`]/,
        isOperatorChar: /[+\-*&%=<>!?|^~:\/]/,
        numberStart: /[\d#$]/,
        number: /^(?:#[\da-fA-F_]+|\$[01_]+|[\d_]+[kMGTPmunpf]?|[\d_]+\.[\d_]+(?:[eE][-+]?\d+|[kMGTPmunpf]|)|)/i,
        multiLineStrings: true,
        typeFirstDefinitions: true,
        atoms: words("true false null larger smaller equal empty finished"),
        indentSwitch: false,
        styleDefs: false,
        hooks: {
          "@": function(stream) {
            stream.eatWhile(/[\w\$_]/);
            return "meta";
          },
          '"': function(stream, state) {
            state.tokenize = tokenCeylonString(stream.match('""') ? "triple" : "single");
            return state.tokenize(stream, state);
          },
          "`": function(stream, state) {
            if (!stringTokenizer || !stream.match("`"))
              return false;
            state.tokenize = stringTokenizer;
            stringTokenizer = null;
            return state.tokenize(stream, state);
          },
          "'": function(stream) {
            stream.eatWhile(/[\w\$_\xa1-\uffff]/);
            return "atom";
          },
          token: function(_stream, state, style) {
            if ((style == "variable" || style == "type") && state.prevToken == ".") {
              return "variable-2";
            }
          }
        },
        modeProps: {
          fold: ["brace", "import"],
          closeBrackets: { triples: '"' }
        }
      });
    });
  }
});

// mode/clojure/clojure.js
var require_clojure = __commonJS({
  "mode/clojure/clojure.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports === "object" && typeof module2 === "object")
        mod(require_codemirror());
      else if (typeof define === "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("clojure", function(options) {
        var atoms = ["false", "nil", "true"];
        var specialForms = [
          ".",
          "catch",
          "def",
          "do",
          "if",
          "monitor-enter",
          "monitor-exit",
          "new",
          "quote",
          "recur",
          "set!",
          "throw",
          "try",
          "var"
        ];
        var coreSymbols = [
          "*",
          "*'",
          "*1",
          "*2",
          "*3",
          "*agent*",
          "*allow-unresolved-vars*",
          "*assert*",
          "*clojure-version*",
          "*command-line-args*",
          "*compile-files*",
          "*compile-path*",
          "*compiler-options*",
          "*data-readers*",
          "*default-data-reader-fn*",
          "*e",
          "*err*",
          "*file*",
          "*flush-on-newline*",
          "*fn-loader*",
          "*in*",
          "*math-context*",
          "*ns*",
          "*out*",
          "*print-dup*",
          "*print-length*",
          "*print-level*",
          "*print-meta*",
          "*print-namespace-maps*",
          "*print-readably*",
          "*read-eval*",
          "*reader-resolver*",
          "*source-path*",
          "*suppress-read*",
          "*unchecked-math*",
          "*use-context-classloader*",
          "*verbose-defrecords*",
          "*warn-on-reflection*",
          "+",
          "+'",
          "-",
          "-'",
          "->",
          "->>",
          "->ArrayChunk",
          "->Eduction",
          "->Vec",
          "->VecNode",
          "->VecSeq",
          "-cache-protocol-fn",
          "-reset-methods",
          "..",
          "/",
          "<",
          "<=",
          "=",
          "==",
          ">",
          ">=",
          "EMPTY-NODE",
          "Inst",
          "StackTraceElement->vec",
          "Throwable->map",
          "accessor",
          "aclone",
          "add-classpath",
          "add-watch",
          "agent",
          "agent-error",
          "agent-errors",
          "aget",
          "alength",
          "alias",
          "all-ns",
          "alter",
          "alter-meta!",
          "alter-var-root",
          "amap",
          "ancestors",
          "and",
          "any?",
          "apply",
          "areduce",
          "array-map",
          "as->",
          "aset",
          "aset-boolean",
          "aset-byte",
          "aset-char",
          "aset-double",
          "aset-float",
          "aset-int",
          "aset-long",
          "aset-short",
          "assert",
          "assoc",
          "assoc!",
          "assoc-in",
          "associative?",
          "atom",
          "await",
          "await-for",
          "await1",
          "bases",
          "bean",
          "bigdec",
          "bigint",
          "biginteger",
          "binding",
          "bit-and",
          "bit-and-not",
          "bit-clear",
          "bit-flip",
          "bit-not",
          "bit-or",
          "bit-set",
          "bit-shift-left",
          "bit-shift-right",
          "bit-test",
          "bit-xor",
          "boolean",
          "boolean-array",
          "boolean?",
          "booleans",
          "bound-fn",
          "bound-fn*",
          "bound?",
          "bounded-count",
          "butlast",
          "byte",
          "byte-array",
          "bytes",
          "bytes?",
          "case",
          "cast",
          "cat",
          "char",
          "char-array",
          "char-escape-string",
          "char-name-string",
          "char?",
          "chars",
          "chunk",
          "chunk-append",
          "chunk-buffer",
          "chunk-cons",
          "chunk-first",
          "chunk-next",
          "chunk-rest",
          "chunked-seq?",
          "class",
          "class?",
          "clear-agent-errors",
          "clojure-version",
          "coll?",
          "comment",
          "commute",
          "comp",
          "comparator",
          "compare",
          "compare-and-set!",
          "compile",
          "complement",
          "completing",
          "concat",
          "cond",
          "cond->",
          "cond->>",
          "condp",
          "conj",
          "conj!",
          "cons",
          "constantly",
          "construct-proxy",
          "contains?",
          "count",
          "counted?",
          "create-ns",
          "create-struct",
          "cycle",
          "dec",
          "dec'",
          "decimal?",
          "declare",
          "dedupe",
          "default-data-readers",
          "definline",
          "definterface",
          "defmacro",
          "defmethod",
          "defmulti",
          "defn",
          "defn-",
          "defonce",
          "defprotocol",
          "defrecord",
          "defstruct",
          "deftype",
          "delay",
          "delay?",
          "deliver",
          "denominator",
          "deref",
          "derive",
          "descendants",
          "destructure",
          "disj",
          "disj!",
          "dissoc",
          "dissoc!",
          "distinct",
          "distinct?",
          "doall",
          "dorun",
          "doseq",
          "dosync",
          "dotimes",
          "doto",
          "double",
          "double-array",
          "double?",
          "doubles",
          "drop",
          "drop-last",
          "drop-while",
          "eduction",
          "empty",
          "empty?",
          "ensure",
          "ensure-reduced",
          "enumeration-seq",
          "error-handler",
          "error-mode",
          "eval",
          "even?",
          "every-pred",
          "every?",
          "ex-data",
          "ex-info",
          "extend",
          "extend-protocol",
          "extend-type",
          "extenders",
          "extends?",
          "false?",
          "ffirst",
          "file-seq",
          "filter",
          "filterv",
          "find",
          "find-keyword",
          "find-ns",
          "find-protocol-impl",
          "find-protocol-method",
          "find-var",
          "first",
          "flatten",
          "float",
          "float-array",
          "float?",
          "floats",
          "flush",
          "fn",
          "fn?",
          "fnext",
          "fnil",
          "for",
          "force",
          "format",
          "frequencies",
          "future",
          "future-call",
          "future-cancel",
          "future-cancelled?",
          "future-done?",
          "future?",
          "gen-class",
          "gen-interface",
          "gensym",
          "get",
          "get-in",
          "get-method",
          "get-proxy-class",
          "get-thread-bindings",
          "get-validator",
          "group-by",
          "halt-when",
          "hash",
          "hash-combine",
          "hash-map",
          "hash-ordered-coll",
          "hash-set",
          "hash-unordered-coll",
          "ident?",
          "identical?",
          "identity",
          "if-let",
          "if-not",
          "if-some",
          "ifn?",
          "import",
          "in-ns",
          "inc",
          "inc'",
          "indexed?",
          "init-proxy",
          "inst-ms",
          "inst-ms*",
          "inst?",
          "instance?",
          "int",
          "int-array",
          "int?",
          "integer?",
          "interleave",
          "intern",
          "interpose",
          "into",
          "into-array",
          "ints",
          "io!",
          "isa?",
          "iterate",
          "iterator-seq",
          "juxt",
          "keep",
          "keep-indexed",
          "key",
          "keys",
          "keyword",
          "keyword?",
          "last",
          "lazy-cat",
          "lazy-seq",
          "let",
          "letfn",
          "line-seq",
          "list",
          "list*",
          "list?",
          "load",
          "load-file",
          "load-reader",
          "load-string",
          "loaded-libs",
          "locking",
          "long",
          "long-array",
          "longs",
          "loop",
          "macroexpand",
          "macroexpand-1",
          "make-array",
          "make-hierarchy",
          "map",
          "map-entry?",
          "map-indexed",
          "map?",
          "mapcat",
          "mapv",
          "max",
          "max-key",
          "memfn",
          "memoize",
          "merge",
          "merge-with",
          "meta",
          "method-sig",
          "methods",
          "min",
          "min-key",
          "mix-collection-hash",
          "mod",
          "munge",
          "name",
          "namespace",
          "namespace-munge",
          "nat-int?",
          "neg-int?",
          "neg?",
          "newline",
          "next",
          "nfirst",
          "nil?",
          "nnext",
          "not",
          "not-any?",
          "not-empty",
          "not-every?",
          "not=",
          "ns",
          "ns-aliases",
          "ns-imports",
          "ns-interns",
          "ns-map",
          "ns-name",
          "ns-publics",
          "ns-refers",
          "ns-resolve",
          "ns-unalias",
          "ns-unmap",
          "nth",
          "nthnext",
          "nthrest",
          "num",
          "number?",
          "numerator",
          "object-array",
          "odd?",
          "or",
          "parents",
          "partial",
          "partition",
          "partition-all",
          "partition-by",
          "pcalls",
          "peek",
          "persistent!",
          "pmap",
          "pop",
          "pop!",
          "pop-thread-bindings",
          "pos-int?",
          "pos?",
          "pr",
          "pr-str",
          "prefer-method",
          "prefers",
          "primitives-classnames",
          "print",
          "print-ctor",
          "print-dup",
          "print-method",
          "print-simple",
          "print-str",
          "printf",
          "println",
          "println-str",
          "prn",
          "prn-str",
          "promise",
          "proxy",
          "proxy-call-with-super",
          "proxy-mappings",
          "proxy-name",
          "proxy-super",
          "push-thread-bindings",
          "pvalues",
          "qualified-ident?",
          "qualified-keyword?",
          "qualified-symbol?",
          "quot",
          "rand",
          "rand-int",
          "rand-nth",
          "random-sample",
          "range",
          "ratio?",
          "rational?",
          "rationalize",
          "re-find",
          "re-groups",
          "re-matcher",
          "re-matches",
          "re-pattern",
          "re-seq",
          "read",
          "read-line",
          "read-string",
          "reader-conditional",
          "reader-conditional?",
          "realized?",
          "record?",
          "reduce",
          "reduce-kv",
          "reduced",
          "reduced?",
          "reductions",
          "ref",
          "ref-history-count",
          "ref-max-history",
          "ref-min-history",
          "ref-set",
          "refer",
          "refer-clojure",
          "reify",
          "release-pending-sends",
          "rem",
          "remove",
          "remove-all-methods",
          "remove-method",
          "remove-ns",
          "remove-watch",
          "repeat",
          "repeatedly",
          "replace",
          "replicate",
          "require",
          "reset!",
          "reset-meta!",
          "reset-vals!",
          "resolve",
          "rest",
          "restart-agent",
          "resultset-seq",
          "reverse",
          "reversible?",
          "rseq",
          "rsubseq",
          "run!",
          "satisfies?",
          "second",
          "select-keys",
          "send",
          "send-off",
          "send-via",
          "seq",
          "seq?",
          "seqable?",
          "seque",
          "sequence",
          "sequential?",
          "set",
          "set-agent-send-executor!",
          "set-agent-send-off-executor!",
          "set-error-handler!",
          "set-error-mode!",
          "set-validator!",
          "set?",
          "short",
          "short-array",
          "shorts",
          "shuffle",
          "shutdown-agents",
          "simple-ident?",
          "simple-keyword?",
          "simple-symbol?",
          "slurp",
          "some",
          "some->",
          "some->>",
          "some-fn",
          "some?",
          "sort",
          "sort-by",
          "sorted-map",
          "sorted-map-by",
          "sorted-set",
          "sorted-set-by",
          "sorted?",
          "special-symbol?",
          "spit",
          "split-at",
          "split-with",
          "str",
          "string?",
          "struct",
          "struct-map",
          "subs",
          "subseq",
          "subvec",
          "supers",
          "swap!",
          "swap-vals!",
          "symbol",
          "symbol?",
          "sync",
          "tagged-literal",
          "tagged-literal?",
          "take",
          "take-last",
          "take-nth",
          "take-while",
          "test",
          "the-ns",
          "thread-bound?",
          "time",
          "to-array",
          "to-array-2d",
          "trampoline",
          "transduce",
          "transient",
          "tree-seq",
          "true?",
          "type",
          "unchecked-add",
          "unchecked-add-int",
          "unchecked-byte",
          "unchecked-char",
          "unchecked-dec",
          "unchecked-dec-int",
          "unchecked-divide-int",
          "unchecked-double",
          "unchecked-float",
          "unchecked-inc",
          "unchecked-inc-int",
          "unchecked-int",
          "unchecked-long",
          "unchecked-multiply",
          "unchecked-multiply-int",
          "unchecked-negate",
          "unchecked-negate-int",
          "unchecked-remainder-int",
          "unchecked-short",
          "unchecked-subtract",
          "unchecked-subtract-int",
          "underive",
          "unquote",
          "unquote-splicing",
          "unreduced",
          "unsigned-bit-shift-right",
          "update",
          "update-in",
          "update-proxy",
          "uri?",
          "use",
          "uuid?",
          "val",
          "vals",
          "var-get",
          "var-set",
          "var?",
          "vary-meta",
          "vec",
          "vector",
          "vector-of",
          "vector?",
          "volatile!",
          "volatile?",
          "vreset!",
          "vswap!",
          "when",
          "when-first",
          "when-let",
          "when-not",
          "when-some",
          "while",
          "with-bindings",
          "with-bindings*",
          "with-in-str",
          "with-loading-context",
          "with-local-vars",
          "with-meta",
          "with-open",
          "with-out-str",
          "with-precision",
          "with-redefs",
          "with-redefs-fn",
          "xml-seq",
          "zero?",
          "zipmap"
        ];
        var haveBodyParameter = [
          "->",
          "->>",
          "as->",
          "binding",
          "bound-fn",
          "case",
          "catch",
          "comment",
          "cond",
          "cond->",
          "cond->>",
          "condp",
          "def",
          "definterface",
          "defmethod",
          "defn",
          "defmacro",
          "defprotocol",
          "defrecord",
          "defstruct",
          "deftype",
          "do",
          "doseq",
          "dotimes",
          "doto",
          "extend",
          "extend-protocol",
          "extend-type",
          "fn",
          "for",
          "future",
          "if",
          "if-let",
          "if-not",
          "if-some",
          "let",
          "letfn",
          "locking",
          "loop",
          "ns",
          "proxy",
          "reify",
          "struct-map",
          "some->",
          "some->>",
          "try",
          "when",
          "when-first",
          "when-let",
          "when-not",
          "when-some",
          "while",
          "with-bindings",
          "with-bindings*",
          "with-in-str",
          "with-loading-context",
          "with-local-vars",
          "with-meta",
          "with-open",
          "with-out-str",
          "with-precision",
          "with-redefs",
          "with-redefs-fn"
        ];
        CodeMirror2.registerHelper(
          "hintWords",
          "clojure",
          [].concat(atoms, specialForms, coreSymbols)
        );
        var atom = createLookupMap(atoms);
        var specialForm = createLookupMap(specialForms);
        var coreSymbol = createLookupMap(coreSymbols);
        var hasBodyParameter = createLookupMap(haveBodyParameter);
        var delimiter = /^(?:[\\\[\]\s"(),;@^`{}~]|$)/;
        var numberLiteral = /^(?:[+\-]?\d+(?:(?:N|(?:[eE][+\-]?\d+))|(?:\.?\d*(?:M|(?:[eE][+\-]?\d+))?)|\/\d+|[xX][0-9a-fA-F]+|r[0-9a-zA-Z]+)?(?=[\\\[\]\s"#'(),;@^`{}~]|$))/;
        var characterLiteral = /^(?:\\(?:backspace|formfeed|newline|return|space|tab|o[0-7]{3}|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{4}|.)?(?=[\\\[\]\s"(),;@^`{}~]|$))/;
        var qualifiedSymbol = /^(?:(?:[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*(?:\.[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*)*\/)?(?:\/|[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*)*(?=[\\\[\]\s"(),;@^`{}~]|$))/;
        function base(stream, state) {
          if (stream.eatSpace() || stream.eat(","))
            return ["space", null];
          if (stream.match(numberLiteral))
            return [null, "number"];
          if (stream.match(characterLiteral))
            return [null, "string-2"];
          if (stream.eat(/^"/))
            return (state.tokenize = inString)(stream, state);
          if (stream.eat(/^[(\[{]/))
            return ["open", "bracket"];
          if (stream.eat(/^[)\]}]/))
            return ["close", "bracket"];
          if (stream.eat(/^;/)) {
            stream.skipToEnd();
            return ["space", "comment"];
          }
          if (stream.eat(/^[#'@^`~]/))
            return [null, "meta"];
          var matches = stream.match(qualifiedSymbol);
          var symbol = matches && matches[0];
          if (!symbol) {
            stream.next();
            stream.eatWhile(function(c) {
              return !is(c, delimiter);
            });
            return [null, "error"];
          }
          if (symbol === "comment" && state.lastToken === "(")
            return (state.tokenize = inComment)(stream, state);
          if (is(symbol, atom) || symbol.charAt(0) === ":")
            return ["symbol", "atom"];
          if (is(symbol, specialForm) || is(symbol, coreSymbol))
            return ["symbol", "keyword"];
          if (state.lastToken === "(")
            return ["symbol", "builtin"];
          return ["symbol", "variable"];
        }
        function inString(stream, state) {
          var escaped = false, next;
          while (next = stream.next()) {
            if (next === '"' && !escaped) {
              state.tokenize = base;
              break;
            }
            escaped = !escaped && next === "\\";
          }
          return [null, "string"];
        }
        function inComment(stream, state) {
          var parenthesisCount = 1;
          var next;
          while (next = stream.next()) {
            if (next === ")")
              parenthesisCount--;
            if (next === "(")
              parenthesisCount++;
            if (parenthesisCount === 0) {
              stream.backUp(1);
              state.tokenize = base;
              break;
            }
          }
          return ["space", "comment"];
        }
        function createLookupMap(words) {
          var obj = {};
          for (var i = 0; i < words.length; ++i)
            obj[words[i]] = true;
          return obj;
        }
        function is(value, test) {
          if (test instanceof RegExp)
            return test.test(value);
          if (test instanceof Object)
            return test.propertyIsEnumerable(value);
        }
        return {
          startState: function() {
            return {
              ctx: { prev: null, start: 0, indentTo: 0 },
              lastToken: null,
              tokenize: base
            };
          },
          token: function(stream, state) {
            if (stream.sol() && typeof state.ctx.indentTo !== "number")
              state.ctx.indentTo = state.ctx.start + 1;
            var typeStylePair = state.tokenize(stream, state);
            var type = typeStylePair[0];
            var style = typeStylePair[1];
            var current = stream.current();
            if (type !== "space") {
              if (state.lastToken === "(" && state.ctx.indentTo === null) {
                if (type === "symbol" && is(current, hasBodyParameter))
                  state.ctx.indentTo = state.ctx.start + options.indentUnit;
                else
                  state.ctx.indentTo = "next";
              } else if (state.ctx.indentTo === "next") {
                state.ctx.indentTo = stream.column();
              }
              state.lastToken = current;
            }
            if (type === "open")
              state.ctx = { prev: state.ctx, start: stream.column(), indentTo: null };
            else if (type === "close")
              state.ctx = state.ctx.prev || state.ctx;
            return style;
          },
          indent: function(state) {
            var i = state.ctx.indentTo;
            return typeof i === "number" ? i : state.ctx.start + 1;
          },
          closeBrackets: { pairs: '()[]{}""' },
          lineComment: ";;"
        };
      });
      CodeMirror2.defineMIME("text/x-clojure", "clojure");
      CodeMirror2.defineMIME("text/x-clojurescript", "clojure");
      CodeMirror2.defineMIME("application/edn", "clojure");
    });
  }
});

// mode/cmake/cmake.js
var require_cmake = __commonJS({
  "mode/cmake/cmake.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("cmake", function() {
        var variable_regex = /({)?[a-zA-Z0-9_]+(})?/;
        function tokenString(stream, state) {
          var current, prev, found_var = false;
          while (!stream.eol() && (current = stream.next()) != state.pending) {
            if (current === "$" && prev != "\\" && state.pending == '"') {
              found_var = true;
              break;
            }
            prev = current;
          }
          if (found_var) {
            stream.backUp(1);
          }
          if (current == state.pending) {
            state.continueString = false;
          } else {
            state.continueString = true;
          }
          return "string";
        }
        function tokenize(stream, state) {
          var ch = stream.next();
          if (ch === "$") {
            if (stream.match(variable_regex)) {
              return "variable-2";
            }
            return "variable";
          }
          if (state.continueString) {
            stream.backUp(1);
            return tokenString(stream, state);
          }
          if (stream.match(/(\s+)?\w+\(/) || stream.match(/(\s+)?\w+\ \(/)) {
            stream.backUp(1);
            return "def";
          }
          if (ch == "#") {
            stream.skipToEnd();
            return "comment";
          }
          if (ch == "'" || ch == '"') {
            state.pending = ch;
            return tokenString(stream, state);
          }
          if (ch == "(" || ch == ")") {
            return "bracket";
          }
          if (ch.match(/[0-9]/)) {
            return "number";
          }
          stream.eatWhile(/[\w-]/);
          return null;
        }
        return {
          startState: function() {
            var state = {};
            state.inDefinition = false;
            state.inInclude = false;
            state.continueString = false;
            state.pending = false;
            return state;
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            return tokenize(stream, state);
          }
        };
      });
      CodeMirror2.defineMIME("text/x-cmake", "cmake");
    });
  }
});

// mode/cobol/cobol.js
var require_cobol = __commonJS({
  "mode/cobol/cobol.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("cobol", function() {
        var BUILTIN = "builtin", COMMENT = "comment", STRING = "string", ATOM = "atom", NUMBER = "number", KEYWORD = "keyword", MODTAG = "header", COBOLLINENUM = "def", PERIOD = "link";
        function makeKeywords(str) {
          var obj = {}, words = str.split(" ");
          for (var i = 0; i < words.length; ++i)
            obj[words[i]] = true;
          return obj;
        }
        var atoms = makeKeywords("TRUE FALSE ZEROES ZEROS ZERO SPACES SPACE LOW-VALUE LOW-VALUES ");
        var keywords = makeKeywords(
          "ACCEPT ACCESS ACQUIRE ADD ADDRESS ADVANCING AFTER ALIAS ALL ALPHABET ALPHABETIC ALPHABETIC-LOWER ALPHABETIC-UPPER ALPHANUMERIC ALPHANUMERIC-EDITED ALSO ALTER ALTERNATE AND ANY ARE AREA AREAS ARITHMETIC ASCENDING ASSIGN AT ATTRIBUTE AUTHOR AUTO AUTO-SKIP AUTOMATIC B-AND B-EXOR B-LESS B-NOT B-OR BACKGROUND-COLOR BACKGROUND-COLOUR BEEP BEFORE BELL BINARY BIT BITS BLANK BLINK BLOCK BOOLEAN BOTTOM BY CALL CANCEL CD CF CH CHARACTER CHARACTERS CLASS CLOCK-UNITS CLOSE COBOL CODE CODE-SET COL COLLATING COLUMN COMMA COMMIT COMMITMENT COMMON COMMUNICATION COMP COMP-0 COMP-1 COMP-2 COMP-3 COMP-4 COMP-5 COMP-6 COMP-7 COMP-8 COMP-9 COMPUTATIONAL COMPUTATIONAL-0 COMPUTATIONAL-1 COMPUTATIONAL-2 COMPUTATIONAL-3 COMPUTATIONAL-4 COMPUTATIONAL-5 COMPUTATIONAL-6 COMPUTATIONAL-7 COMPUTATIONAL-8 COMPUTATIONAL-9 COMPUTE CONFIGURATION CONNECT CONSOLE CONTAINED CONTAINS CONTENT CONTINUE CONTROL CONTROL-AREA CONTROLS CONVERTING COPY CORR CORRESPONDING COUNT CRT CRT-UNDER CURRENCY CURRENT CURSOR DATA DATE DATE-COMPILED DATE-WRITTEN DAY DAY-OF-WEEK DB DB-ACCESS-CONTROL-KEY DB-DATA-NAME DB-EXCEPTION DB-FORMAT-NAME DB-RECORD-NAME DB-SET-NAME DB-STATUS DBCS DBCS-EDITED DE DEBUG-CONTENTS DEBUG-ITEM DEBUG-LINE DEBUG-NAME DEBUG-SUB-1 DEBUG-SUB-2 DEBUG-SUB-3 DEBUGGING DECIMAL-POINT DECLARATIVES DEFAULT DELETE DELIMITED DELIMITER DEPENDING DESCENDING DESCRIBED DESTINATION DETAIL DISABLE DISCONNECT DISPLAY DISPLAY-1 DISPLAY-2 DISPLAY-3 DISPLAY-4 DISPLAY-5 DISPLAY-6 DISPLAY-7 DISPLAY-8 DISPLAY-9 DIVIDE DIVISION DOWN DROP DUPLICATE DUPLICATES DYNAMIC EBCDIC EGI EJECT ELSE EMI EMPTY EMPTY-CHECK ENABLE END END. END-ACCEPT END-ACCEPT. END-ADD END-CALL END-COMPUTE END-DELETE END-DISPLAY END-DIVIDE END-EVALUATE END-IF END-INVOKE END-MULTIPLY END-OF-PAGE END-PERFORM END-READ END-RECEIVE END-RETURN END-REWRITE END-SEARCH END-START END-STRING END-SUBTRACT END-UNSTRING END-WRITE END-XML ENTER ENTRY ENVIRONMENT EOP EQUAL EQUALS ERASE ERROR ESI EVALUATE EVERY EXCEEDS EXCEPTION EXCLUSIVE EXIT EXTEND EXTERNAL EXTERNALLY-DESCRIBED-KEY FD FETCH FILE FILE-CONTROL FILE-STREAM FILES FILLER FINAL FIND FINISH FIRST FOOTING FOR FOREGROUND-COLOR FOREGROUND-COLOUR FORMAT FREE FROM FULL FUNCTION GENERATE GET GIVING GLOBAL GO GOBACK GREATER GROUP HEADING HIGH-VALUE HIGH-VALUES HIGHLIGHT I-O I-O-CONTROL ID IDENTIFICATION IF IN INDEX INDEX-1 INDEX-2 INDEX-3 INDEX-4 INDEX-5 INDEX-6 INDEX-7 INDEX-8 INDEX-9 INDEXED INDIC INDICATE INDICATOR INDICATORS INITIAL INITIALIZE INITIATE INPUT INPUT-OUTPUT INSPECT INSTALLATION INTO INVALID INVOKE IS JUST JUSTIFIED KANJI KEEP KEY LABEL LAST LD LEADING LEFT LEFT-JUSTIFY LENGTH LENGTH-CHECK LESS LIBRARY LIKE LIMIT LIMITS LINAGE LINAGE-COUNTER LINE LINE-COUNTER LINES LINKAGE LOCAL-STORAGE LOCALE LOCALLY LOCK MEMBER MEMORY MERGE MESSAGE METACLASS MODE MODIFIED MODIFY MODULES MOVE MULTIPLE MULTIPLY NATIONAL NATIVE NEGATIVE NEXT NO NO-ECHO NONE NOT NULL NULL-KEY-MAP NULL-MAP NULLS NUMBER NUMERIC NUMERIC-EDITED OBJECT OBJECT-COMPUTER OCCURS OF OFF OMITTED ON ONLY OPEN OPTIONAL OR ORDER ORGANIZATION OTHER OUTPUT OVERFLOW OWNER PACKED-DECIMAL PADDING PAGE PAGE-COUNTER PARSE PERFORM PF PH PIC PICTURE PLUS POINTER POSITION POSITIVE PREFIX PRESENT PRINTING PRIOR PROCEDURE PROCEDURE-POINTER PROCEDURES PROCEED PROCESS PROCESSING PROGRAM PROGRAM-ID PROMPT PROTECTED PURGE QUEUE QUOTE QUOTES RANDOM RD READ READY REALM RECEIVE RECONNECT RECORD RECORD-NAME RECORDS RECURSIVE REDEFINES REEL REFERENCE REFERENCE-MONITOR REFERENCES RELATION RELATIVE RELEASE REMAINDER REMOVAL RENAMES REPEATED REPLACE REPLACING REPORT REPORTING REPORTS REPOSITORY REQUIRED RERUN RESERVE RESET RETAINING RETRIEVAL RETURN RETURN-CODE RETURNING REVERSE-VIDEO REVERSED REWIND REWRITE RF RH RIGHT RIGHT-JUSTIFY ROLLBACK ROLLING ROUNDED RUN SAME SCREEN SD SEARCH SECTION SECURE SECURITY SEGMENT SEGMENT-LIMIT SELECT SEND SENTENCE SEPARATE SEQUENCE SEQUENTIAL SET SHARED SIGN SIZE SKIP1 SKIP2 SKIP3 SORT SORT-MERGE SORT-RETURN SOURCE SOURCE-COMPUTER SPACE-FILL SPECIAL-NAMES STANDARD STANDARD-1 STANDARD-2 START STARTING STATUS STOP STORE STRING SUB-QUEUE-1 SUB-QUEUE-2 SUB-QUEUE-3 SUB-SCHEMA SUBFILE SUBSTITUTE SUBTRACT SUM SUPPRESS SYMBOLIC SYNC SYNCHRONIZED SYSIN SYSOUT TABLE TALLYING TAPE TENANT TERMINAL TERMINATE TEST TEXT THAN THEN THROUGH THRU TIME TIMES TITLE TO TOP TRAILING TRAILING-SIGN TRANSACTION TYPE TYPEDEF UNDERLINE UNEQUAL UNIT UNSTRING UNTIL UP UPDATE UPON USAGE USAGE-MODE USE USING VALID VALIDATE VALUE VALUES VARYING VLR WAIT WHEN WHEN-COMPILED WITH WITHIN WORDS WORKING-STORAGE WRITE XML XML-CODE XML-EVENT XML-NTEXT XML-TEXT ZERO ZERO-FILL "
        );
        var builtins = makeKeywords("- * ** / + < <= = > >= ");
        var tests = {
          digit: /\d/,
          digit_or_colon: /[\d:]/,
          hex: /[0-9a-f]/i,
          sign: /[+-]/,
          exponent: /e/i,
          keyword_char: /[^\s\(\[\;\)\]]/,
          symbol: /[\w*+\-]/
        };
        function isNumber(ch, stream) {
          if (ch === "0" && stream.eat(/x/i)) {
            stream.eatWhile(tests.hex);
            return true;
          }
          if ((ch == "+" || ch == "-") && tests.digit.test(stream.peek())) {
            stream.eat(tests.sign);
            ch = stream.next();
          }
          if (tests.digit.test(ch)) {
            stream.eat(ch);
            stream.eatWhile(tests.digit);
            if ("." == stream.peek()) {
              stream.eat(".");
              stream.eatWhile(tests.digit);
            }
            if (stream.eat(tests.exponent)) {
              stream.eat(tests.sign);
              stream.eatWhile(tests.digit);
            }
            return true;
          }
          return false;
        }
        return {
          startState: function() {
            return {
              indentStack: null,
              indentation: 0,
              mode: false
            };
          },
          token: function(stream, state) {
            if (state.indentStack == null && stream.sol()) {
              state.indentation = 6;
            }
            if (stream.eatSpace()) {
              return null;
            }
            var returnType = null;
            switch (state.mode) {
              case "string":
                var next = false;
                while ((next = stream.next()) != null) {
                  if (next == '"' || next == "'") {
                    state.mode = false;
                    break;
                  }
                }
                returnType = STRING;
                break;
              default:
                var ch = stream.next();
                var col = stream.column();
                if (col >= 0 && col <= 5) {
                  returnType = COBOLLINENUM;
                } else if (col >= 72 && col <= 79) {
                  stream.skipToEnd();
                  returnType = MODTAG;
                } else if (ch == "*" && col == 6) {
                  stream.skipToEnd();
                  returnType = COMMENT;
                } else if (ch == '"' || ch == "'") {
                  state.mode = "string";
                  returnType = STRING;
                } else if (ch == "'" && !tests.digit_or_colon.test(stream.peek())) {
                  returnType = ATOM;
                } else if (ch == ".") {
                  returnType = PERIOD;
                } else if (isNumber(ch, stream)) {
                  returnType = NUMBER;
                } else {
                  if (stream.current().match(tests.symbol)) {
                    while (col < 71) {
                      if (stream.eat(tests.symbol) === void 0) {
                        break;
                      } else {
                        col++;
                      }
                    }
                  }
                  if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {
                    returnType = KEYWORD;
                  } else if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase())) {
                    returnType = BUILTIN;
                  } else if (atoms && atoms.propertyIsEnumerable(stream.current().toUpperCase())) {
                    returnType = ATOM;
                  } else
                    returnType = null;
                }
            }
            return returnType;
          },
          indent: function(state) {
            if (state.indentStack == null)
              return state.indentation;
            return state.indentStack.indent;
          }
        };
      });
      CodeMirror2.defineMIME("text/x-cobol", "cobol");
    });
  }
});

// mode/coffeescript/coffeescript.js
var require_coffeescript = __commonJS({
  "mode/coffeescript/coffeescript.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("coffeescript", function(conf, parserConf) {
        var ERRORCLASS = "error";
        function wordRegexp(words) {
          return new RegExp("^((" + words.join(")|(") + "))\\b");
        }
        var operators = /^(?:->|=>|\+[+=]?|-[\-=]?|\*[\*=]?|\/[\/=]?|[=!]=|<[><]?=?|>>?=?|%=?|&=?|\|=?|\^=?|\~|!|\?|(or|and|\|\||&&|\?)=)/;
        var delimiters = /^(?:[()\[\]{},:`=;]|\.\.?\.?)/;
        var identifiers = /^[_A-Za-z$][_A-Za-z$0-9]*/;
        var atProp = /^@[_A-Za-z$][_A-Za-z$0-9]*/;
        var wordOperators = wordRegexp([
          "and",
          "or",
          "not",
          "is",
          "isnt",
          "in",
          "instanceof",
          "typeof"
        ]);
        var indentKeywords = [
          "for",
          "while",
          "loop",
          "if",
          "unless",
          "else",
          "switch",
          "try",
          "catch",
          "finally",
          "class"
        ];
        var commonKeywords = [
          "break",
          "by",
          "continue",
          "debugger",
          "delete",
          "do",
          "in",
          "of",
          "new",
          "return",
          "then",
          "this",
          "@",
          "throw",
          "when",
          "until",
          "extends"
        ];
        var keywords = wordRegexp(indentKeywords.concat(commonKeywords));
        indentKeywords = wordRegexp(indentKeywords);
        var stringPrefixes = /^('{3}|\"{3}|['\"])/;
        var regexPrefixes = /^(\/{3}|\/)/;
        var commonConstants = ["Infinity", "NaN", "undefined", "null", "true", "false", "on", "off", "yes", "no"];
        var constants = wordRegexp(commonConstants);
        function tokenBase(stream, state) {
          if (stream.sol()) {
            if (state.scope.align === null)
              state.scope.align = false;
            var scopeOffset = state.scope.offset;
            if (stream.eatSpace()) {
              var lineOffset = stream.indentation();
              if (lineOffset > scopeOffset && state.scope.type == "coffee") {
                return "indent";
              } else if (lineOffset < scopeOffset) {
                return "dedent";
              }
              return null;
            } else {
              if (scopeOffset > 0) {
                dedent(stream, state);
              }
            }
          }
          if (stream.eatSpace()) {
            return null;
          }
          var ch = stream.peek();
          if (stream.match("####")) {
            stream.skipToEnd();
            return "comment";
          }
          if (stream.match("###")) {
            state.tokenize = longComment;
            return state.tokenize(stream, state);
          }
          if (ch === "#") {
            stream.skipToEnd();
            return "comment";
          }
          if (stream.match(/^-?[0-9\.]/, false)) {
            var floatLiteral = false;
            if (stream.match(/^-?\d*\.\d+(e[\+\-]?\d+)?/i)) {
              floatLiteral = true;
            }
            if (stream.match(/^-?\d+\.\d*/)) {
              floatLiteral = true;
            }
            if (stream.match(/^-?\.\d+/)) {
              floatLiteral = true;
            }
            if (floatLiteral) {
              if (stream.peek() == ".") {
                stream.backUp(1);
              }
              return "number";
            }
            var intLiteral = false;
            if (stream.match(/^-?0x[0-9a-f]+/i)) {
              intLiteral = true;
            }
            if (stream.match(/^-?[1-9]\d*(e[\+\-]?\d+)?/)) {
              intLiteral = true;
            }
            if (stream.match(/^-?0(?![\dx])/i)) {
              intLiteral = true;
            }
            if (intLiteral) {
              return "number";
            }
          }
          if (stream.match(stringPrefixes)) {
            state.tokenize = tokenFactory(stream.current(), false, "string");
            return state.tokenize(stream, state);
          }
          if (stream.match(regexPrefixes)) {
            if (stream.current() != "/" || stream.match(/^.*\//, false)) {
              state.tokenize = tokenFactory(stream.current(), true, "string-2");
              return state.tokenize(stream, state);
            } else {
              stream.backUp(1);
            }
          }
          if (stream.match(operators) || stream.match(wordOperators)) {
            return "operator";
          }
          if (stream.match(delimiters)) {
            return "punctuation";
          }
          if (stream.match(constants)) {
            return "atom";
          }
          if (stream.match(atProp) || state.prop && stream.match(identifiers)) {
            return "property";
          }
          if (stream.match(keywords)) {
            return "keyword";
          }
          if (stream.match(identifiers)) {
            return "variable";
          }
          stream.next();
          return ERRORCLASS;
        }
        function tokenFactory(delimiter, singleline, outclass) {
          return function(stream, state) {
            while (!stream.eol()) {
              stream.eatWhile(/[^'"\/\\]/);
              if (stream.eat("\\")) {
                stream.next();
                if (singleline && stream.eol()) {
                  return outclass;
                }
              } else if (stream.match(delimiter)) {
                state.tokenize = tokenBase;
                return outclass;
              } else {
                stream.eat(/['"\/]/);
              }
            }
            if (singleline) {
              if (parserConf.singleLineStringErrors) {
                outclass = ERRORCLASS;
              } else {
                state.tokenize = tokenBase;
              }
            }
            return outclass;
          };
        }
        function longComment(stream, state) {
          while (!stream.eol()) {
            stream.eatWhile(/[^#]/);
            if (stream.match("###")) {
              state.tokenize = tokenBase;
              break;
            }
            stream.eatWhile("#");
          }
          return "comment";
        }
        function indent(stream, state, type) {
          type = type || "coffee";
          var offset = 0, align = false, alignOffset = null;
          for (var scope = state.scope; scope; scope = scope.prev) {
            if (scope.type === "coffee" || scope.type == "}") {
              offset = scope.offset + conf.indentUnit;
              break;
            }
          }
          if (type !== "coffee") {
            align = null;
            alignOffset = stream.column() + stream.current().length;
          } else if (state.scope.align) {
            state.scope.align = false;
          }
          state.scope = {
            offset,
            type,
            prev: state.scope,
            align,
            alignOffset
          };
        }
        function dedent(stream, state) {
          if (!state.scope.prev)
            return;
          if (state.scope.type === "coffee") {
            var _indent = stream.indentation();
            var matched = false;
            for (var scope = state.scope; scope; scope = scope.prev) {
              if (_indent === scope.offset) {
                matched = true;
                break;
              }
            }
            if (!matched) {
              return true;
            }
            while (state.scope.prev && state.scope.offset !== _indent) {
              state.scope = state.scope.prev;
            }
            return false;
          } else {
            state.scope = state.scope.prev;
            return false;
          }
        }
        function tokenLexer(stream, state) {
          var style = state.tokenize(stream, state);
          var current = stream.current();
          if (current === "return") {
            state.dedent = true;
          }
          if ((current === "->" || current === "=>") && stream.eol() || style === "indent") {
            indent(stream, state);
          }
          var delimiter_index = "[({".indexOf(current);
          if (delimiter_index !== -1) {
            indent(stream, state, "])}".slice(delimiter_index, delimiter_index + 1));
          }
          if (indentKeywords.exec(current)) {
            indent(stream, state);
          }
          if (current == "then") {
            dedent(stream, state);
          }
          if (style === "dedent") {
            if (dedent(stream, state)) {
              return ERRORCLASS;
            }
          }
          delimiter_index = "])}".indexOf(current);
          if (delimiter_index !== -1) {
            while (state.scope.type == "coffee" && state.scope.prev)
              state.scope = state.scope.prev;
            if (state.scope.type == current)
              state.scope = state.scope.prev;
          }
          if (state.dedent && stream.eol()) {
            if (state.scope.type == "coffee" && state.scope.prev)
              state.scope = state.scope.prev;
            state.dedent = false;
          }
          return style;
        }
        var external = {
          startState: function(basecolumn) {
            return {
              tokenize: tokenBase,
              scope: { offset: basecolumn || 0, type: "coffee", prev: null, align: false },
              prop: false,
              dedent: 0
            };
          },
          token: function(stream, state) {
            var fillAlign = state.scope.align === null && state.scope;
            if (fillAlign && stream.sol())
              fillAlign.align = false;
            var style = tokenLexer(stream, state);
            if (style && style != "comment") {
              if (fillAlign)
                fillAlign.align = true;
              state.prop = style == "punctuation" && stream.current() == ".";
            }
            return style;
          },
          indent: function(state, text) {
            if (state.tokenize != tokenBase)
              return 0;
            var scope = state.scope;
            var closer = text && "])}".indexOf(text.charAt(0)) > -1;
            if (closer)
              while (scope.type == "coffee" && scope.prev)
                scope = scope.prev;
            var closes = closer && scope.type === text.charAt(0);
            if (scope.align)
              return scope.alignOffset - (closes ? 1 : 0);
            else
              return (closes ? scope.prev : scope).offset;
          },
          lineComment: "#",
          fold: "indent"
        };
        return external;
      });
      CodeMirror2.defineMIME("application/vnd.coffeescript", "coffeescript");
      CodeMirror2.defineMIME("text/x-coffeescript", "coffeescript");
      CodeMirror2.defineMIME("text/coffeescript", "coffeescript");
    });
  }
});

// mode/commonlisp/commonlisp.js
var require_commonlisp = __commonJS({
  "mode/commonlisp/commonlisp.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("commonlisp", function(config) {
        var specialForm = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;
        var assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;
        var numLiteral = /^(?:[+\-]?(?:\d+|\d*\.\d+)(?:[efd][+\-]?\d+)?|[+\-]?\d+(?:\/[+\-]?\d+)?|#b[+\-]?[01]+|#o[+\-]?[0-7]+|#x[+\-]?[\da-f]+)/;
        var symbol = /[^\s'`,@()\[\]";]/;
        var type;
        function readSym(stream) {
          var ch;
          while (ch = stream.next()) {
            if (ch == "\\")
              stream.next();
            else if (!symbol.test(ch)) {
              stream.backUp(1);
              break;
            }
          }
          return stream.current();
        }
        function base(stream, state) {
          if (stream.eatSpace()) {
            type = "ws";
            return null;
          }
          if (stream.match(numLiteral))
            return "number";
          var ch = stream.next();
          if (ch == "\\")
            ch = stream.next();
          if (ch == '"')
            return (state.tokenize = inString)(stream, state);
          else if (ch == "(") {
            type = "open";
            return "bracket";
          } else if (ch == ")" || ch == "]") {
            type = "close";
            return "bracket";
          } else if (ch == ";") {
            stream.skipToEnd();
            type = "ws";
            return "comment";
          } else if (/['`,@]/.test(ch))
            return null;
          else if (ch == "|") {
            if (stream.skipTo("|")) {
              stream.next();
              return "symbol";
            } else {
              stream.skipToEnd();
              return "error";
            }
          } else if (ch == "#") {
            var ch = stream.next();
            if (ch == "(") {
              type = "open";
              return "bracket";
            } else if (/[+\-=\.']/.test(ch))
              return null;
            else if (/\d/.test(ch) && stream.match(/^\d*#/))
              return null;
            else if (ch == "|")
              return (state.tokenize = inComment)(stream, state);
            else if (ch == ":") {
              readSym(stream);
              return "meta";
            } else if (ch == "\\") {
              stream.next();
              readSym(stream);
              return "string-2";
            } else
              return "error";
          } else {
            var name = readSym(stream);
            if (name == ".")
              return null;
            type = "symbol";
            if (name == "nil" || name == "t" || name.charAt(0) == ":")
              return "atom";
            if (state.lastType == "open" && (specialForm.test(name) || assumeBody.test(name)))
              return "keyword";
            if (name.charAt(0) == "&")
              return "variable-2";
            return "variable";
          }
        }
        function inString(stream, state) {
          var escaped = false, next;
          while (next = stream.next()) {
            if (next == '"' && !escaped) {
              state.tokenize = base;
              break;
            }
            escaped = !escaped && next == "\\";
          }
          return "string";
        }
        function inComment(stream, state) {
          var next, last;
          while (next = stream.next()) {
            if (next == "#" && last == "|") {
              state.tokenize = base;
              break;
            }
            last = next;
          }
          type = "ws";
          return "comment";
        }
        return {
          startState: function() {
            return { ctx: { prev: null, start: 0, indentTo: 0 }, lastType: null, tokenize: base };
          },
          token: function(stream, state) {
            if (stream.sol() && typeof state.ctx.indentTo != "number")
              state.ctx.indentTo = state.ctx.start + 1;
            type = null;
            var style = state.tokenize(stream, state);
            if (type != "ws") {
              if (state.ctx.indentTo == null) {
                if (type == "symbol" && assumeBody.test(stream.current()))
                  state.ctx.indentTo = state.ctx.start + config.indentUnit;
                else
                  state.ctx.indentTo = "next";
              } else if (state.ctx.indentTo == "next") {
                state.ctx.indentTo = stream.column();
              }
              state.lastType = type;
            }
            if (type == "open")
              state.ctx = { prev: state.ctx, start: stream.column(), indentTo: null };
            else if (type == "close")
              state.ctx = state.ctx.prev || state.ctx;
            return style;
          },
          indent: function(state, _textAfter) {
            var i = state.ctx.indentTo;
            return typeof i == "number" ? i : state.ctx.start + 1;
          },
          closeBrackets: { pairs: '()[]{}""' },
          lineComment: ";;",
          blockCommentStart: "#|",
          blockCommentEnd: "|#"
        };
      });
      CodeMirror2.defineMIME("text/x-common-lisp", "commonlisp");
    });
  }
});

// mode/crystal/crystal.js
var require_crystal = __commonJS({
  "mode/crystal/crystal.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("crystal", function(config) {
        function wordRegExp(words, end) {
          return new RegExp((end ? "" : "^") + "(?:" + words.join("|") + ")" + (end ? "$" : "\\b"));
        }
        function chain(tokenize, stream, state) {
          state.tokenize.push(tokenize);
          return tokenize(stream, state);
        }
        var operators = /^(?:[-+/%|&^]|\*\*?|[<>]{2})/;
        var conditionalOperators = /^(?:[=!]~|===|<=>|[<>=!]=?|[|&]{2}|~)/;
        var indexingOperators = /^(?:\[\][?=]?)/;
        var anotherOperators = /^(?:\.(?:\.{2})?|->|[?:])/;
        var idents = /^[a-z_\u009F-\uFFFF][a-zA-Z0-9_\u009F-\uFFFF]*/;
        var types = /^[A-Z_\u009F-\uFFFF][a-zA-Z0-9_\u009F-\uFFFF]*/;
        var keywords = wordRegExp([
          "abstract",
          "alias",
          "as",
          "asm",
          "begin",
          "break",
          "case",
          "class",
          "def",
          "do",
          "else",
          "elsif",
          "end",
          "ensure",
          "enum",
          "extend",
          "for",
          "fun",
          "if",
          "include",
          "instance_sizeof",
          "lib",
          "macro",
          "module",
          "next",
          "of",
          "out",
          "pointerof",
          "private",
          "protected",
          "rescue",
          "return",
          "require",
          "select",
          "sizeof",
          "struct",
          "super",
          "then",
          "type",
          "typeof",
          "uninitialized",
          "union",
          "unless",
          "until",
          "when",
          "while",
          "with",
          "yield",
          "__DIR__",
          "__END_LINE__",
          "__FILE__",
          "__LINE__"
        ]);
        var atomWords = wordRegExp(["true", "false", "nil", "self"]);
        var indentKeywordsArray = [
          "def",
          "fun",
          "macro",
          "class",
          "module",
          "struct",
          "lib",
          "enum",
          "union",
          "do",
          "for"
        ];
        var indentKeywords = wordRegExp(indentKeywordsArray);
        var indentExpressionKeywordsArray = ["if", "unless", "case", "while", "until", "begin", "then"];
        var indentExpressionKeywords = wordRegExp(indentExpressionKeywordsArray);
        var dedentKeywordsArray = ["end", "else", "elsif", "rescue", "ensure"];
        var dedentKeywords = wordRegExp(dedentKeywordsArray);
        var dedentPunctualsArray = ["\\)", "\\}", "\\]"];
        var dedentPunctuals = new RegExp("^(?:" + dedentPunctualsArray.join("|") + ")$");
        var nextTokenizer = {
          "def": tokenFollowIdent,
          "fun": tokenFollowIdent,
          "macro": tokenMacroDef,
          "class": tokenFollowType,
          "module": tokenFollowType,
          "struct": tokenFollowType,
          "lib": tokenFollowType,
          "enum": tokenFollowType,
          "union": tokenFollowType
        };
        var matching = { "[": "]", "{": "}", "(": ")", "<": ">" };
        function tokenBase(stream, state) {
          if (stream.eatSpace()) {
            return null;
          }
          if (state.lastToken != "\\" && stream.match("{%", false)) {
            return chain(tokenMacro("%", "%"), stream, state);
          }
          if (state.lastToken != "\\" && stream.match("{{", false)) {
            return chain(tokenMacro("{", "}"), stream, state);
          }
          if (stream.peek() == "#") {
            stream.skipToEnd();
            return "comment";
          }
          var matched;
          if (stream.match(idents)) {
            stream.eat(/[?!]/);
            matched = stream.current();
            if (stream.eat(":")) {
              return "atom";
            } else if (state.lastToken == ".") {
              return "property";
            } else if (keywords.test(matched)) {
              if (indentKeywords.test(matched)) {
                if (!(matched == "fun" && state.blocks.indexOf("lib") >= 0) && !(matched == "def" && state.lastToken == "abstract")) {
                  state.blocks.push(matched);
                  state.currentIndent += 1;
                }
              } else if ((state.lastStyle == "operator" || !state.lastStyle) && indentExpressionKeywords.test(matched)) {
                state.blocks.push(matched);
                state.currentIndent += 1;
              } else if (matched == "end") {
                state.blocks.pop();
                state.currentIndent -= 1;
              }
              if (nextTokenizer.hasOwnProperty(matched)) {
                state.tokenize.push(nextTokenizer[matched]);
              }
              return "keyword";
            } else if (atomWords.test(matched)) {
              return "atom";
            }
            return "variable";
          }
          if (stream.eat("@")) {
            if (stream.peek() == "[") {
              return chain(tokenNest("[", "]", "meta"), stream, state);
            }
            stream.eat("@");
            stream.match(idents) || stream.match(types);
            return "variable-2";
          }
          if (stream.match(types)) {
            return "tag";
          }
          if (stream.eat(":")) {
            if (stream.eat('"')) {
              return chain(tokenQuote('"', "atom", false), stream, state);
            } else if (stream.match(idents) || stream.match(types) || stream.match(operators) || stream.match(conditionalOperators) || stream.match(indexingOperators)) {
              return "atom";
            }
            stream.eat(":");
            return "operator";
          }
          if (stream.eat('"')) {
            return chain(tokenQuote('"', "string", true), stream, state);
          }
          if (stream.peek() == "%") {
            var style = "string";
            var embed = true;
            var delim;
            if (stream.match("%r")) {
              style = "string-2";
              delim = stream.next();
            } else if (stream.match("%w")) {
              embed = false;
              delim = stream.next();
            } else if (stream.match("%q")) {
              embed = false;
              delim = stream.next();
            } else {
              if (delim = stream.match(/^%([^\w\s=])/)) {
                delim = delim[1];
              } else if (stream.match(/^%[a-zA-Z0-9_\u009F-\uFFFF]*/)) {
                return "meta";
              } else {
                return "operator";
              }
            }
            if (matching.hasOwnProperty(delim)) {
              delim = matching[delim];
            }
            return chain(tokenQuote(delim, style, embed), stream, state);
          }
          if (matched = stream.match(/^<<-('?)([A-Z]\w*)\1/)) {
            return chain(tokenHereDoc(matched[2], !matched[1]), stream, state);
          }
          if (stream.eat("'")) {
            stream.match(/^(?:[^']|\\(?:[befnrtv0'"]|[0-7]{3}|u(?:[0-9a-fA-F]{4}|\{[0-9a-fA-F]{1,6}\})))/);
            stream.eat("'");
            return "atom";
          }
          if (stream.eat("0")) {
            if (stream.eat("x")) {
              stream.match(/^[0-9a-fA-F]+/);
            } else if (stream.eat("o")) {
              stream.match(/^[0-7]+/);
            } else if (stream.eat("b")) {
              stream.match(/^[01]+/);
            }
            return "number";
          }
          if (stream.eat(/^\d/)) {
            stream.match(/^\d*(?:\.\d+)?(?:[eE][+-]?\d+)?/);
            return "number";
          }
          if (stream.match(operators)) {
            stream.eat("=");
            return "operator";
          }
          if (stream.match(conditionalOperators) || stream.match(anotherOperators)) {
            return "operator";
          }
          if (matched = stream.match(/[({[]/, false)) {
            matched = matched[0];
            return chain(tokenNest(matched, matching[matched], null), stream, state);
          }
          if (stream.eat("\\")) {
            stream.next();
            return "meta";
          }
          stream.next();
          return null;
        }
        function tokenNest(begin, end, style, started) {
          return function(stream, state) {
            if (!started && stream.match(begin)) {
              state.tokenize[state.tokenize.length - 1] = tokenNest(begin, end, style, true);
              state.currentIndent += 1;
              return style;
            }
            var nextStyle = tokenBase(stream, state);
            if (stream.current() === end) {
              state.tokenize.pop();
              state.currentIndent -= 1;
              nextStyle = style;
            }
            return nextStyle;
          };
        }
        function tokenMacro(begin, end, started) {
          return function(stream, state) {
            if (!started && stream.match("{" + begin)) {
              state.currentIndent += 1;
              state.tokenize[state.tokenize.length - 1] = tokenMacro(begin, end, true);
              return "meta";
            }
            if (stream.match(end + "}")) {
              state.currentIndent -= 1;
              state.tokenize.pop();
              return "meta";
            }
            return tokenBase(stream, state);
          };
        }
        function tokenMacroDef(stream, state) {
          if (stream.eatSpace()) {
            return null;
          }
          var matched;
          if (matched = stream.match(idents)) {
            if (matched == "def") {
              return "keyword";
            }
            stream.eat(/[?!]/);
          }
          state.tokenize.pop();
          return "def";
        }
        function tokenFollowIdent(stream, state) {
          if (stream.eatSpace()) {
            return null;
          }
          if (stream.match(idents)) {
            stream.eat(/[!?]/);
          } else {
            stream.match(operators) || stream.match(conditionalOperators) || stream.match(indexingOperators);
          }
          state.tokenize.pop();
          return "def";
        }
        function tokenFollowType(stream, state) {
          if (stream.eatSpace()) {
            return null;
          }
          stream.match(types);
          state.tokenize.pop();
          return "def";
        }
        function tokenQuote(end, style, embed) {
          return function(stream, state) {
            var escaped = false;
            while (stream.peek()) {
              if (!escaped) {
                if (stream.match("{%", false)) {
                  state.tokenize.push(tokenMacro("%", "%"));
                  return style;
                }
                if (stream.match("{{", false)) {
                  state.tokenize.push(tokenMacro("{", "}"));
                  return style;
                }
                if (embed && stream.match("#{", false)) {
                  state.tokenize.push(tokenNest("#{", "}", "meta"));
                  return style;
                }
                var ch = stream.next();
                if (ch == end) {
                  state.tokenize.pop();
                  return style;
                }
                escaped = embed && ch == "\\";
              } else {
                stream.next();
                escaped = false;
              }
            }
            return style;
          };
        }
        function tokenHereDoc(phrase, embed) {
          return function(stream, state) {
            if (stream.sol()) {
              stream.eatSpace();
              if (stream.match(phrase)) {
                state.tokenize.pop();
                return "string";
              }
            }
            var escaped = false;
            while (stream.peek()) {
              if (!escaped) {
                if (stream.match("{%", false)) {
                  state.tokenize.push(tokenMacro("%", "%"));
                  return "string";
                }
                if (stream.match("{{", false)) {
                  state.tokenize.push(tokenMacro("{", "}"));
                  return "string";
                }
                if (embed && stream.match("#{", false)) {
                  state.tokenize.push(tokenNest("#{", "}", "meta"));
                  return "string";
                }
                escaped = embed && stream.next() == "\\";
              } else {
                stream.next();
                escaped = false;
              }
            }
            return "string";
          };
        }
        return {
          startState: function() {
            return {
              tokenize: [tokenBase],
              currentIndent: 0,
              lastToken: null,
              lastStyle: null,
              blocks: []
            };
          },
          token: function(stream, state) {
            var style = state.tokenize[state.tokenize.length - 1](stream, state);
            var token = stream.current();
            if (style && style != "comment") {
              state.lastToken = token;
              state.lastStyle = style;
            }
            return style;
          },
          indent: function(state, textAfter) {
            textAfter = textAfter.replace(/^\s*(?:\{%)?\s*|\s*(?:%\})?\s*$/g, "");
            if (dedentKeywords.test(textAfter) || dedentPunctuals.test(textAfter)) {
              return config.indentUnit * (state.currentIndent - 1);
            }
            return config.indentUnit * state.currentIndent;
          },
          fold: "indent",
          electricInput: wordRegExp(dedentPunctualsArray.concat(dedentKeywordsArray), true),
          lineComment: "#"
        };
      });
      CodeMirror2.defineMIME("text/x-crystal", "crystal");
    });
  }
});

// mode/css/css.js
var require_css = __commonJS({
  "mode/css/css.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("css", function(config, parserConfig) {
        var inline = parserConfig.inline;
        if (!parserConfig.propertyKeywords)
          parserConfig = CodeMirror2.resolveMode("text/css");
        var indentUnit = config.indentUnit, tokenHooks = parserConfig.tokenHooks, documentTypes2 = parserConfig.documentTypes || {}, mediaTypes2 = parserConfig.mediaTypes || {}, mediaFeatures2 = parserConfig.mediaFeatures || {}, mediaValueKeywords2 = parserConfig.mediaValueKeywords || {}, propertyKeywords2 = parserConfig.propertyKeywords || {}, nonStandardPropertyKeywords2 = parserConfig.nonStandardPropertyKeywords || {}, fontProperties2 = parserConfig.fontProperties || {}, counterDescriptors2 = parserConfig.counterDescriptors || {}, colorKeywords2 = parserConfig.colorKeywords || {}, valueKeywords2 = parserConfig.valueKeywords || {}, allowNested = parserConfig.allowNested, lineComment = parserConfig.lineComment, supportsAtComponent = parserConfig.supportsAtComponent === true, highlightNonStandardPropertyKeywords = config.highlightNonStandardPropertyKeywords !== false;
        var type, override;
        function ret(style, tp) {
          type = tp;
          return style;
        }
        function tokenBase(stream, state) {
          var ch = stream.next();
          if (tokenHooks[ch]) {
            var result = tokenHooks[ch](stream, state);
            if (result !== false)
              return result;
          }
          if (ch == "@") {
            stream.eatWhile(/[\w\\\-]/);
            return ret("def", stream.current());
          } else if (ch == "=" || (ch == "~" || ch == "|") && stream.eat("=")) {
            return ret(null, "compare");
          } else if (ch == '"' || ch == "'") {
            state.tokenize = tokenString(ch);
            return state.tokenize(stream, state);
          } else if (ch == "#") {
            stream.eatWhile(/[\w\\\-]/);
            return ret("atom", "hash");
          } else if (ch == "!") {
            stream.match(/^\s*\w*/);
            return ret("keyword", "important");
          } else if (/\d/.test(ch) || ch == "." && stream.eat(/\d/)) {
            stream.eatWhile(/[\w.%]/);
            return ret("number", "unit");
          } else if (ch === "-") {
            if (/[\d.]/.test(stream.peek())) {
              stream.eatWhile(/[\w.%]/);
              return ret("number", "unit");
            } else if (stream.match(/^-[\w\\\-]*/)) {
              stream.eatWhile(/[\w\\\-]/);
              if (stream.match(/^\s*:/, false))
                return ret("variable-2", "variable-definition");
              return ret("variable-2", "variable");
            } else if (stream.match(/^\w+-/)) {
              return ret("meta", "meta");
            }
          } else if (/[,+>*\/]/.test(ch)) {
            return ret(null, "select-op");
          } else if (ch == "." && stream.match(/^-?[_a-z][_a-z0-9-]*/i)) {
            return ret("qualifier", "qualifier");
          } else if (/[:;{}\[\]\(\)]/.test(ch)) {
            return ret(null, ch);
          } else if (stream.match(/[\w-.]+(?=\()/)) {
            if (/^(url(-prefix)?|domain|regexp)$/.test(stream.current().toLowerCase())) {
              state.tokenize = tokenParenthesized;
            }
            return ret("variable callee", "variable");
          } else if (/[\w\\\-]/.test(ch)) {
            stream.eatWhile(/[\w\\\-]/);
            return ret("property", "word");
          } else {
            return ret(null, null);
          }
        }
        function tokenString(quote) {
          return function(stream, state) {
            var escaped = false, ch;
            while ((ch = stream.next()) != null) {
              if (ch == quote && !escaped) {
                if (quote == ")")
                  stream.backUp(1);
                break;
              }
              escaped = !escaped && ch == "\\";
            }
            if (ch == quote || !escaped && quote != ")")
              state.tokenize = null;
            return ret("string", "string");
          };
        }
        function tokenParenthesized(stream, state) {
          stream.next();
          if (!stream.match(/\s*[\"\')]/, false))
            state.tokenize = tokenString(")");
          else
            state.tokenize = null;
          return ret(null, "(");
        }
        function Context(type2, indent, prev) {
          this.type = type2;
          this.indent = indent;
          this.prev = prev;
        }
        function pushContext(state, stream, type2, indent) {
          state.context = new Context(type2, stream.indentation() + (indent === false ? 0 : indentUnit), state.context);
          return type2;
        }
        function popContext(state) {
          if (state.context.prev)
            state.context = state.context.prev;
          return state.context.type;
        }
        function pass(type2, stream, state) {
          return states[state.context.type](type2, stream, state);
        }
        function popAndPass(type2, stream, state, n) {
          for (var i = n || 1; i > 0; i--)
            state.context = state.context.prev;
          return pass(type2, stream, state);
        }
        function wordAsValue(stream) {
          var word = stream.current().toLowerCase();
          if (valueKeywords2.hasOwnProperty(word))
            override = "atom";
          else if (colorKeywords2.hasOwnProperty(word))
            override = "keyword";
          else
            override = "variable";
        }
        var states = {};
        states.top = function(type2, stream, state) {
          if (type2 == "{") {
            return pushContext(state, stream, "block");
          } else if (type2 == "}" && state.context.prev) {
            return popContext(state);
          } else if (supportsAtComponent && /@component/i.test(type2)) {
            return pushContext(state, stream, "atComponentBlock");
          } else if (/^@(-moz-)?document$/i.test(type2)) {
            return pushContext(state, stream, "documentTypes");
          } else if (/^@(media|supports|(-moz-)?document|import)$/i.test(type2)) {
            return pushContext(state, stream, "atBlock");
          } else if (/^@(font-face|counter-style)/i.test(type2)) {
            state.stateArg = type2;
            return "restricted_atBlock_before";
          } else if (/^@(-(moz|ms|o|webkit)-)?keyframes$/i.test(type2)) {
            return "keyframes";
          } else if (type2 && type2.charAt(0) == "@") {
            return pushContext(state, stream, "at");
          } else if (type2 == "hash") {
            override = "builtin";
          } else if (type2 == "word") {
            override = "tag";
          } else if (type2 == "variable-definition") {
            return "maybeprop";
          } else if (type2 == "interpolation") {
            return pushContext(state, stream, "interpolation");
          } else if (type2 == ":") {
            return "pseudo";
          } else if (allowNested && type2 == "(") {
            return pushContext(state, stream, "parens");
          }
          return state.context.type;
        };
        states.block = function(type2, stream, state) {
          if (type2 == "word") {
            var word = stream.current().toLowerCase();
            if (propertyKeywords2.hasOwnProperty(word)) {
              override = "property";
              return "maybeprop";
            } else if (nonStandardPropertyKeywords2.hasOwnProperty(word)) {
              override = highlightNonStandardPropertyKeywords ? "string-2" : "property";
              return "maybeprop";
            } else if (allowNested) {
              override = stream.match(/^\s*:(?:\s|$)/, false) ? "property" : "tag";
              return "block";
            } else {
              override += " error";
              return "maybeprop";
            }
          } else if (type2 == "meta") {
            return "block";
          } else if (!allowNested && (type2 == "hash" || type2 == "qualifier")) {
            override = "error";
            return "block";
          } else {
            return states.top(type2, stream, state);
          }
        };
        states.maybeprop = function(type2, stream, state) {
          if (type2 == ":")
            return pushContext(state, stream, "prop");
          return pass(type2, stream, state);
        };
        states.prop = function(type2, stream, state) {
          if (type2 == ";")
            return popContext(state);
          if (type2 == "{" && allowNested)
            return pushContext(state, stream, "propBlock");
          if (type2 == "}" || type2 == "{")
            return popAndPass(type2, stream, state);
          if (type2 == "(")
            return pushContext(state, stream, "parens");
          if (type2 == "hash" && !/^#([0-9a-fA-f]{3,4}|[0-9a-fA-f]{6}|[0-9a-fA-f]{8})$/.test(stream.current())) {
            override += " error";
          } else if (type2 == "word") {
            wordAsValue(stream);
          } else if (type2 == "interpolation") {
            return pushContext(state, stream, "interpolation");
          }
          return "prop";
        };
        states.propBlock = function(type2, _stream, state) {
          if (type2 == "}")
            return popContext(state);
          if (type2 == "word") {
            override = "property";
            return "maybeprop";
          }
          return state.context.type;
        };
        states.parens = function(type2, stream, state) {
          if (type2 == "{" || type2 == "}")
            return popAndPass(type2, stream, state);
          if (type2 == ")")
            return popContext(state);
          if (type2 == "(")
            return pushContext(state, stream, "parens");
          if (type2 == "interpolation")
            return pushContext(state, stream, "interpolation");
          if (type2 == "word")
            wordAsValue(stream);
          return "parens";
        };
        states.pseudo = function(type2, stream, state) {
          if (type2 == "meta")
            return "pseudo";
          if (type2 == "word") {
            override = "variable-3";
            return state.context.type;
          }
          return pass(type2, stream, state);
        };
        states.documentTypes = function(type2, stream, state) {
          if (type2 == "word" && documentTypes2.hasOwnProperty(stream.current())) {
            override = "tag";
            return state.context.type;
          } else {
            return states.atBlock(type2, stream, state);
          }
        };
        states.atBlock = function(type2, stream, state) {
          if (type2 == "(")
            return pushContext(state, stream, "atBlock_parens");
          if (type2 == "}" || type2 == ";")
            return popAndPass(type2, stream, state);
          if (type2 == "{")
            return popContext(state) && pushContext(state, stream, allowNested ? "block" : "top");
          if (type2 == "interpolation")
            return pushContext(state, stream, "interpolation");
          if (type2 == "word") {
            var word = stream.current().toLowerCase();
            if (word == "only" || word == "not" || word == "and" || word == "or")
              override = "keyword";
            else if (mediaTypes2.hasOwnProperty(word))
              override = "attribute";
            else if (mediaFeatures2.hasOwnProperty(word))
              override = "property";
            else if (mediaValueKeywords2.hasOwnProperty(word))
              override = "keyword";
            else if (propertyKeywords2.hasOwnProperty(word))
              override = "property";
            else if (nonStandardPropertyKeywords2.hasOwnProperty(word))
              override = highlightNonStandardPropertyKeywords ? "string-2" : "property";
            else if (valueKeywords2.hasOwnProperty(word))
              override = "atom";
            else if (colorKeywords2.hasOwnProperty(word))
              override = "keyword";
            else
              override = "error";
          }
          return state.context.type;
        };
        states.atComponentBlock = function(type2, stream, state) {
          if (type2 == "}")
            return popAndPass(type2, stream, state);
          if (type2 == "{")
            return popContext(state) && pushContext(state, stream, allowNested ? "block" : "top", false);
          if (type2 == "word")
            override = "error";
          return state.context.type;
        };
        states.atBlock_parens = function(type2, stream, state) {
          if (type2 == ")")
            return popContext(state);
          if (type2 == "{" || type2 == "}")
            return popAndPass(type2, stream, state, 2);
          return states.atBlock(type2, stream, state);
        };
        states.restricted_atBlock_before = function(type2, stream, state) {
          if (type2 == "{")
            return pushContext(state, stream, "restricted_atBlock");
          if (type2 == "word" && state.stateArg == "@counter-style") {
            override = "variable";
            return "restricted_atBlock_before";
          }
          return pass(type2, stream, state);
        };
        states.restricted_atBlock = function(type2, stream, state) {
          if (type2 == "}") {
            state.stateArg = null;
            return popContext(state);
          }
          if (type2 == "word") {
            if (state.stateArg == "@font-face" && !fontProperties2.hasOwnProperty(stream.current().toLowerCase()) || state.stateArg == "@counter-style" && !counterDescriptors2.hasOwnProperty(stream.current().toLowerCase()))
              override = "error";
            else
              override = "property";
            return "maybeprop";
          }
          return "restricted_atBlock";
        };
        states.keyframes = function(type2, stream, state) {
          if (type2 == "word") {
            override = "variable";
            return "keyframes";
          }
          if (type2 == "{")
            return pushContext(state, stream, "top");
          return pass(type2, stream, state);
        };
        states.at = function(type2, stream, state) {
          if (type2 == ";")
            return popContext(state);
          if (type2 == "{" || type2 == "}")
            return popAndPass(type2, stream, state);
          if (type2 == "word")
            override = "tag";
          else if (type2 == "hash")
            override = "builtin";
          return "at";
        };
        states.interpolation = function(type2, stream, state) {
          if (type2 == "}")
            return popContext(state);
          if (type2 == "{" || type2 == ";")
            return popAndPass(type2, stream, state);
          if (type2 == "word")
            override = "variable";
          else if (type2 != "variable" && type2 != "(" && type2 != ")")
            override = "error";
          return "interpolation";
        };
        return {
          startState: function(base) {
            return {
              tokenize: null,
              state: inline ? "block" : "top",
              stateArg: null,
              context: new Context(inline ? "block" : "top", base || 0, null)
            };
          },
          token: function(stream, state) {
            if (!state.tokenize && stream.eatSpace())
              return null;
            var style = (state.tokenize || tokenBase)(stream, state);
            if (style && typeof style == "object") {
              type = style[1];
              style = style[0];
            }
            override = style;
            if (type != "comment")
              state.state = states[state.state](type, stream, state);
            return override;
          },
          indent: function(state, textAfter) {
            var cx = state.context, ch = textAfter && textAfter.charAt(0);
            var indent = cx.indent;
            if (cx.type == "prop" && (ch == "}" || ch == ")"))
              cx = cx.prev;
            if (cx.prev) {
              if (ch == "}" && (cx.type == "block" || cx.type == "top" || cx.type == "interpolation" || cx.type == "restricted_atBlock")) {
                cx = cx.prev;
                indent = cx.indent;
              } else if (ch == ")" && (cx.type == "parens" || cx.type == "atBlock_parens") || ch == "{" && (cx.type == "at" || cx.type == "atBlock")) {
                indent = Math.max(0, cx.indent - indentUnit);
              }
            }
            return indent;
          },
          electricChars: "}",
          blockCommentStart: "/*",
          blockCommentEnd: "*/",
          blockCommentContinue: " * ",
          lineComment,
          fold: "brace"
        };
      });
      function keySet(array) {
        var keys = {};
        for (var i = 0; i < array.length; ++i) {
          keys[array[i].toLowerCase()] = true;
        }
        return keys;
      }
      var documentTypes_ = [
        "domain",
        "regexp",
        "url",
        "url-prefix"
      ], documentTypes = keySet(documentTypes_);
      var mediaTypes_ = [
        "all",
        "aural",
        "braille",
        "handheld",
        "print",
        "projection",
        "screen",
        "tty",
        "tv",
        "embossed"
      ], mediaTypes = keySet(mediaTypes_);
      var mediaFeatures_ = [
        "width",
        "min-width",
        "max-width",
        "height",
        "min-height",
        "max-height",
        "device-width",
        "min-device-width",
        "max-device-width",
        "device-height",
        "min-device-height",
        "max-device-height",
        "aspect-ratio",
        "min-aspect-ratio",
        "max-aspect-ratio",
        "device-aspect-ratio",
        "min-device-aspect-ratio",
        "max-device-aspect-ratio",
        "color",
        "min-color",
        "max-color",
        "color-index",
        "min-color-index",
        "max-color-index",
        "monochrome",
        "min-monochrome",
        "max-monochrome",
        "resolution",
        "min-resolution",
        "max-resolution",
        "scan",
        "grid",
        "orientation",
        "device-pixel-ratio",
        "min-device-pixel-ratio",
        "max-device-pixel-ratio",
        "pointer",
        "any-pointer",
        "hover",
        "any-hover",
        "prefers-color-scheme"
      ], mediaFeatures = keySet(mediaFeatures_);
      var mediaValueKeywords_ = [
        "landscape",
        "portrait",
        "none",
        "coarse",
        "fine",
        "on-demand",
        "hover",
        "interlace",
        "progressive",
        "dark",
        "light"
      ], mediaValueKeywords = keySet(mediaValueKeywords_);
      var propertyKeywords_ = [
        "align-content",
        "align-items",
        "align-self",
        "alignment-adjust",
        "alignment-baseline",
        "all",
        "anchor-point",
        "animation",
        "animation-delay",
        "animation-direction",
        "animation-duration",
        "animation-fill-mode",
        "animation-iteration-count",
        "animation-name",
        "animation-play-state",
        "animation-timing-function",
        "appearance",
        "azimuth",
        "backdrop-filter",
        "backface-visibility",
        "background",
        "background-attachment",
        "background-blend-mode",
        "background-clip",
        "background-color",
        "background-image",
        "background-origin",
        "background-position",
        "background-position-x",
        "background-position-y",
        "background-repeat",
        "background-size",
        "baseline-shift",
        "binding",
        "bleed",
        "block-size",
        "bookmark-label",
        "bookmark-level",
        "bookmark-state",
        "bookmark-target",
        "border",
        "border-bottom",
        "border-bottom-color",
        "border-bottom-left-radius",
        "border-bottom-right-radius",
        "border-bottom-style",
        "border-bottom-width",
        "border-collapse",
        "border-color",
        "border-image",
        "border-image-outset",
        "border-image-repeat",
        "border-image-slice",
        "border-image-source",
        "border-image-width",
        "border-left",
        "border-left-color",
        "border-left-style",
        "border-left-width",
        "border-radius",
        "border-right",
        "border-right-color",
        "border-right-style",
        "border-right-width",
        "border-spacing",
        "border-style",
        "border-top",
        "border-top-color",
        "border-top-left-radius",
        "border-top-right-radius",
        "border-top-style",
        "border-top-width",
        "border-width",
        "bottom",
        "box-decoration-break",
        "box-shadow",
        "box-sizing",
        "break-after",
        "break-before",
        "break-inside",
        "caption-side",
        "caret-color",
        "clear",
        "clip",
        "color",
        "color-profile",
        "column-count",
        "column-fill",
        "column-gap",
        "column-rule",
        "column-rule-color",
        "column-rule-style",
        "column-rule-width",
        "column-span",
        "column-width",
        "columns",
        "contain",
        "content",
        "counter-increment",
        "counter-reset",
        "crop",
        "cue",
        "cue-after",
        "cue-before",
        "cursor",
        "direction",
        "display",
        "dominant-baseline",
        "drop-initial-after-adjust",
        "drop-initial-after-align",
        "drop-initial-before-adjust",
        "drop-initial-before-align",
        "drop-initial-size",
        "drop-initial-value",
        "elevation",
        "empty-cells",
        "fit",
        "fit-position",
        "flex",
        "flex-basis",
        "flex-direction",
        "flex-flow",
        "flex-grow",
        "flex-shrink",
        "flex-wrap",
        "float",
        "float-offset",
        "flow-from",
        "flow-into",
        "font",
        "font-family",
        "font-feature-settings",
        "font-kerning",
        "font-language-override",
        "font-optical-sizing",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-synthesis",
        "font-variant",
        "font-variant-alternates",
        "font-variant-caps",
        "font-variant-east-asian",
        "font-variant-ligatures",
        "font-variant-numeric",
        "font-variant-position",
        "font-variation-settings",
        "font-weight",
        "gap",
        "grid",
        "grid-area",
        "grid-auto-columns",
        "grid-auto-flow",
        "grid-auto-rows",
        "grid-column",
        "grid-column-end",
        "grid-column-gap",
        "grid-column-start",
        "grid-gap",
        "grid-row",
        "grid-row-end",
        "grid-row-gap",
        "grid-row-start",
        "grid-template",
        "grid-template-areas",
        "grid-template-columns",
        "grid-template-rows",
        "hanging-punctuation",
        "height",
        "hyphens",
        "icon",
        "image-orientation",
        "image-rendering",
        "image-resolution",
        "inline-box-align",
        "inset",
        "inset-block",
        "inset-block-end",
        "inset-block-start",
        "inset-inline",
        "inset-inline-end",
        "inset-inline-start",
        "isolation",
        "justify-content",
        "justify-items",
        "justify-self",
        "left",
        "letter-spacing",
        "line-break",
        "line-height",
        "line-height-step",
        "line-stacking",
        "line-stacking-ruby",
        "line-stacking-shift",
        "line-stacking-strategy",
        "list-style",
        "list-style-image",
        "list-style-position",
        "list-style-type",
        "margin",
        "margin-bottom",
        "margin-left",
        "margin-right",
        "margin-top",
        "marks",
        "marquee-direction",
        "marquee-loop",
        "marquee-play-count",
        "marquee-speed",
        "marquee-style",
        "mask-clip",
        "mask-composite",
        "mask-image",
        "mask-mode",
        "mask-origin",
        "mask-position",
        "mask-repeat",
        "mask-size",
        "mask-type",
        "max-block-size",
        "max-height",
        "max-inline-size",
        "max-width",
        "min-block-size",
        "min-height",
        "min-inline-size",
        "min-width",
        "mix-blend-mode",
        "move-to",
        "nav-down",
        "nav-index",
        "nav-left",
        "nav-right",
        "nav-up",
        "object-fit",
        "object-position",
        "offset",
        "offset-anchor",
        "offset-distance",
        "offset-path",
        "offset-position",
        "offset-rotate",
        "opacity",
        "order",
        "orphans",
        "outline",
        "outline-color",
        "outline-offset",
        "outline-style",
        "outline-width",
        "overflow",
        "overflow-style",
        "overflow-wrap",
        "overflow-x",
        "overflow-y",
        "padding",
        "padding-bottom",
        "padding-left",
        "padding-right",
        "padding-top",
        "page",
        "page-break-after",
        "page-break-before",
        "page-break-inside",
        "page-policy",
        "pause",
        "pause-after",
        "pause-before",
        "perspective",
        "perspective-origin",
        "pitch",
        "pitch-range",
        "place-content",
        "place-items",
        "place-self",
        "play-during",
        "position",
        "presentation-level",
        "punctuation-trim",
        "quotes",
        "region-break-after",
        "region-break-before",
        "region-break-inside",
        "region-fragment",
        "rendering-intent",
        "resize",
        "rest",
        "rest-after",
        "rest-before",
        "richness",
        "right",
        "rotate",
        "rotation",
        "rotation-point",
        "row-gap",
        "ruby-align",
        "ruby-overhang",
        "ruby-position",
        "ruby-span",
        "scale",
        "scroll-behavior",
        "scroll-margin",
        "scroll-margin-block",
        "scroll-margin-block-end",
        "scroll-margin-block-start",
        "scroll-margin-bottom",
        "scroll-margin-inline",
        "scroll-margin-inline-end",
        "scroll-margin-inline-start",
        "scroll-margin-left",
        "scroll-margin-right",
        "scroll-margin-top",
        "scroll-padding",
        "scroll-padding-block",
        "scroll-padding-block-end",
        "scroll-padding-block-start",
        "scroll-padding-bottom",
        "scroll-padding-inline",
        "scroll-padding-inline-end",
        "scroll-padding-inline-start",
        "scroll-padding-left",
        "scroll-padding-right",
        "scroll-padding-top",
        "scroll-snap-align",
        "scroll-snap-type",
        "shape-image-threshold",
        "shape-inside",
        "shape-margin",
        "shape-outside",
        "size",
        "speak",
        "speak-as",
        "speak-header",
        "speak-numeral",
        "speak-punctuation",
        "speech-rate",
        "stress",
        "string-set",
        "tab-size",
        "table-layout",
        "target",
        "target-name",
        "target-new",
        "target-position",
        "text-align",
        "text-align-last",
        "text-combine-upright",
        "text-decoration",
        "text-decoration-color",
        "text-decoration-line",
        "text-decoration-skip",
        "text-decoration-skip-ink",
        "text-decoration-style",
        "text-emphasis",
        "text-emphasis-color",
        "text-emphasis-position",
        "text-emphasis-style",
        "text-height",
        "text-indent",
        "text-justify",
        "text-orientation",
        "text-outline",
        "text-overflow",
        "text-rendering",
        "text-shadow",
        "text-size-adjust",
        "text-space-collapse",
        "text-transform",
        "text-underline-position",
        "text-wrap",
        "top",
        "touch-action",
        "transform",
        "transform-origin",
        "transform-style",
        "transition",
        "transition-delay",
        "transition-duration",
        "transition-property",
        "transition-timing-function",
        "translate",
        "unicode-bidi",
        "user-select",
        "vertical-align",
        "visibility",
        "voice-balance",
        "voice-duration",
        "voice-family",
        "voice-pitch",
        "voice-range",
        "voice-rate",
        "voice-stress",
        "voice-volume",
        "volume",
        "white-space",
        "widows",
        "width",
        "will-change",
        "word-break",
        "word-spacing",
        "word-wrap",
        "writing-mode",
        "z-index",
        // SVG-specific
        "clip-path",
        "clip-rule",
        "mask",
        "enable-background",
        "filter",
        "flood-color",
        "flood-opacity",
        "lighting-color",
        "stop-color",
        "stop-opacity",
        "pointer-events",
        "color-interpolation",
        "color-interpolation-filters",
        "color-rendering",
        "fill",
        "fill-opacity",
        "fill-rule",
        "image-rendering",
        "marker",
        "marker-end",
        "marker-mid",
        "marker-start",
        "paint-order",
        "shape-rendering",
        "stroke",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-rendering",
        "baseline-shift",
        "dominant-baseline",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "text-anchor",
        "writing-mode"
      ], propertyKeywords = keySet(propertyKeywords_);
      var nonStandardPropertyKeywords_ = [
        "border-block",
        "border-block-color",
        "border-block-end",
        "border-block-end-color",
        "border-block-end-style",
        "border-block-end-width",
        "border-block-start",
        "border-block-start-color",
        "border-block-start-style",
        "border-block-start-width",
        "border-block-style",
        "border-block-width",
        "border-inline",
        "border-inline-color",
        "border-inline-end",
        "border-inline-end-color",
        "border-inline-end-style",
        "border-inline-end-width",
        "border-inline-start",
        "border-inline-start-color",
        "border-inline-start-style",
        "border-inline-start-width",
        "border-inline-style",
        "border-inline-width",
        "margin-block",
        "margin-block-end",
        "margin-block-start",
        "margin-inline",
        "margin-inline-end",
        "margin-inline-start",
        "padding-block",
        "padding-block-end",
        "padding-block-start",
        "padding-inline",
        "padding-inline-end",
        "padding-inline-start",
        "scroll-snap-stop",
        "scrollbar-3d-light-color",
        "scrollbar-arrow-color",
        "scrollbar-base-color",
        "scrollbar-dark-shadow-color",
        "scrollbar-face-color",
        "scrollbar-highlight-color",
        "scrollbar-shadow-color",
        "scrollbar-track-color",
        "searchfield-cancel-button",
        "searchfield-decoration",
        "searchfield-results-button",
        "searchfield-results-decoration",
        "shape-inside",
        "zoom"
      ], nonStandardPropertyKeywords = keySet(nonStandardPropertyKeywords_);
      var fontProperties_ = [
        "font-display",
        "font-family",
        "src",
        "unicode-range",
        "font-variant",
        "font-feature-settings",
        "font-stretch",
        "font-weight",
        "font-style"
      ], fontProperties = keySet(fontProperties_);
      var counterDescriptors_ = [
        "additive-symbols",
        "fallback",
        "negative",
        "pad",
        "prefix",
        "range",
        "speak-as",
        "suffix",
        "symbols",
        "system"
      ], counterDescriptors = keySet(counterDescriptors_);
      var colorKeywords_ = [
        "aliceblue",
        "antiquewhite",
        "aqua",
        "aquamarine",
        "azure",
        "beige",
        "bisque",
        "black",
        "blanchedalmond",
        "blue",
        "blueviolet",
        "brown",
        "burlywood",
        "cadetblue",
        "chartreuse",
        "chocolate",
        "coral",
        "cornflowerblue",
        "cornsilk",
        "crimson",
        "cyan",
        "darkblue",
        "darkcyan",
        "darkgoldenrod",
        "darkgray",
        "darkgreen",
        "darkkhaki",
        "darkmagenta",
        "darkolivegreen",
        "darkorange",
        "darkorchid",
        "darkred",
        "darksalmon",
        "darkseagreen",
        "darkslateblue",
        "darkslategray",
        "darkturquoise",
        "darkviolet",
        "deeppink",
        "deepskyblue",
        "dimgray",
        "dodgerblue",
        "firebrick",
        "floralwhite",
        "forestgreen",
        "fuchsia",
        "gainsboro",
        "ghostwhite",
        "gold",
        "goldenrod",
        "gray",
        "grey",
        "green",
        "greenyellow",
        "honeydew",
        "hotpink",
        "indianred",
        "indigo",
        "ivory",
        "khaki",
        "lavender",
        "lavenderblush",
        "lawngreen",
        "lemonchiffon",
        "lightblue",
        "lightcoral",
        "lightcyan",
        "lightgoldenrodyellow",
        "lightgray",
        "lightgreen",
        "lightpink",
        "lightsalmon",
        "lightseagreen",
        "lightskyblue",
        "lightslategray",
        "lightsteelblue",
        "lightyellow",
        "lime",
        "limegreen",
        "linen",
        "magenta",
        "maroon",
        "mediumaquamarine",
        "mediumblue",
        "mediumorchid",
        "mediumpurple",
        "mediumseagreen",
        "mediumslateblue",
        "mediumspringgreen",
        "mediumturquoise",
        "mediumvioletred",
        "midnightblue",
        "mintcream",
        "mistyrose",
        "moccasin",
        "navajowhite",
        "navy",
        "oldlace",
        "olive",
        "olivedrab",
        "orange",
        "orangered",
        "orchid",
        "palegoldenrod",
        "palegreen",
        "paleturquoise",
        "palevioletred",
        "papayawhip",
        "peachpuff",
        "peru",
        "pink",
        "plum",
        "powderblue",
        "purple",
        "rebeccapurple",
        "red",
        "rosybrown",
        "royalblue",
        "saddlebrown",
        "salmon",
        "sandybrown",
        "seagreen",
        "seashell",
        "sienna",
        "silver",
        "skyblue",
        "slateblue",
        "slategray",
        "snow",
        "springgreen",
        "steelblue",
        "tan",
        "teal",
        "thistle",
        "tomato",
        "turquoise",
        "violet",
        "wheat",
        "white",
        "whitesmoke",
        "yellow",
        "yellowgreen"
      ], colorKeywords = keySet(colorKeywords_);
      var valueKeywords_ = [
        "above",
        "absolute",
        "activeborder",
        "additive",
        "activecaption",
        "afar",
        "after-white-space",
        "ahead",
        "alias",
        "all",
        "all-scroll",
        "alphabetic",
        "alternate",
        "always",
        "amharic",
        "amharic-abegede",
        "antialiased",
        "appworkspace",
        "arabic-indic",
        "armenian",
        "asterisks",
        "attr",
        "auto",
        "auto-flow",
        "avoid",
        "avoid-column",
        "avoid-page",
        "avoid-region",
        "axis-pan",
        "background",
        "backwards",
        "baseline",
        "below",
        "bidi-override",
        "binary",
        "bengali",
        "blink",
        "block",
        "block-axis",
        "bold",
        "bolder",
        "border",
        "border-box",
        "both",
        "bottom",
        "break",
        "break-all",
        "break-word",
        "bullets",
        "button",
        "button-bevel",
        "buttonface",
        "buttonhighlight",
        "buttonshadow",
        "buttontext",
        "calc",
        "cambodian",
        "capitalize",
        "caps-lock-indicator",
        "caption",
        "captiontext",
        "caret",
        "cell",
        "center",
        "checkbox",
        "circle",
        "cjk-decimal",
        "cjk-earthly-branch",
        "cjk-heavenly-stem",
        "cjk-ideographic",
        "clear",
        "clip",
        "close-quote",
        "col-resize",
        "collapse",
        "color",
        "color-burn",
        "color-dodge",
        "column",
        "column-reverse",
        "compact",
        "condensed",
        "contain",
        "content",
        "contents",
        "content-box",
        "context-menu",
        "continuous",
        "copy",
        "counter",
        "counters",
        "cover",
        "crop",
        "cross",
        "crosshair",
        "currentcolor",
        "cursive",
        "cyclic",
        "darken",
        "dashed",
        "decimal",
        "decimal-leading-zero",
        "default",
        "default-button",
        "dense",
        "destination-atop",
        "destination-in",
        "destination-out",
        "destination-over",
        "devanagari",
        "difference",
        "disc",
        "discard",
        "disclosure-closed",
        "disclosure-open",
        "document",
        "dot-dash",
        "dot-dot-dash",
        "dotted",
        "double",
        "down",
        "e-resize",
        "ease",
        "ease-in",
        "ease-in-out",
        "ease-out",
        "element",
        "ellipse",
        "ellipsis",
        "embed",
        "end",
        "ethiopic",
        "ethiopic-abegede",
        "ethiopic-abegede-am-et",
        "ethiopic-abegede-gez",
        "ethiopic-abegede-ti-er",
        "ethiopic-abegede-ti-et",
        "ethiopic-halehame-aa-er",
        "ethiopic-halehame-aa-et",
        "ethiopic-halehame-am-et",
        "ethiopic-halehame-gez",
        "ethiopic-halehame-om-et",
        "ethiopic-halehame-sid-et",
        "ethiopic-halehame-so-et",
        "ethiopic-halehame-ti-er",
        "ethiopic-halehame-ti-et",
        "ethiopic-halehame-tig",
        "ethiopic-numeric",
        "ew-resize",
        "exclusion",
        "expanded",
        "extends",
        "extra-condensed",
        "extra-expanded",
        "fantasy",
        "fast",
        "fill",
        "fill-box",
        "fixed",
        "flat",
        "flex",
        "flex-end",
        "flex-start",
        "footnotes",
        "forwards",
        "from",
        "geometricPrecision",
        "georgian",
        "graytext",
        "grid",
        "groove",
        "gujarati",
        "gurmukhi",
        "hand",
        "hangul",
        "hangul-consonant",
        "hard-light",
        "hebrew",
        "help",
        "hidden",
        "hide",
        "higher",
        "highlight",
        "highlighttext",
        "hiragana",
        "hiragana-iroha",
        "horizontal",
        "hsl",
        "hsla",
        "hue",
        "icon",
        "ignore",
        "inactiveborder",
        "inactivecaption",
        "inactivecaptiontext",
        "infinite",
        "infobackground",
        "infotext",
        "inherit",
        "initial",
        "inline",
        "inline-axis",
        "inline-block",
        "inline-flex",
        "inline-grid",
        "inline-table",
        "inset",
        "inside",
        "intrinsic",
        "invert",
        "italic",
        "japanese-formal",
        "japanese-informal",
        "justify",
        "kannada",
        "katakana",
        "katakana-iroha",
        "keep-all",
        "khmer",
        "korean-hangul-formal",
        "korean-hanja-formal",
        "korean-hanja-informal",
        "landscape",
        "lao",
        "large",
        "larger",
        "left",
        "level",
        "lighter",
        "lighten",
        "line-through",
        "linear",
        "linear-gradient",
        "lines",
        "list-item",
        "listbox",
        "listitem",
        "local",
        "logical",
        "loud",
        "lower",
        "lower-alpha",
        "lower-armenian",
        "lower-greek",
        "lower-hexadecimal",
        "lower-latin",
        "lower-norwegian",
        "lower-roman",
        "lowercase",
        "ltr",
        "luminosity",
        "malayalam",
        "manipulation",
        "match",
        "matrix",
        "matrix3d",
        "media-controls-background",
        "media-current-time-display",
        "media-fullscreen-button",
        "media-mute-button",
        "media-play-button",
        "media-return-to-realtime-button",
        "media-rewind-button",
        "media-seek-back-button",
        "media-seek-forward-button",
        "media-slider",
        "media-sliderthumb",
        "media-time-remaining-display",
        "media-volume-slider",
        "media-volume-slider-container",
        "media-volume-sliderthumb",
        "medium",
        "menu",
        "menulist",
        "menulist-button",
        "menulist-text",
        "menulist-textfield",
        "menutext",
        "message-box",
        "middle",
        "min-intrinsic",
        "mix",
        "mongolian",
        "monospace",
        "move",
        "multiple",
        "multiple_mask_images",
        "multiply",
        "myanmar",
        "n-resize",
        "narrower",
        "ne-resize",
        "nesw-resize",
        "no-close-quote",
        "no-drop",
        "no-open-quote",
        "no-repeat",
        "none",
        "normal",
        "not-allowed",
        "nowrap",
        "ns-resize",
        "numbers",
        "numeric",
        "nw-resize",
        "nwse-resize",
        "oblique",
        "octal",
        "opacity",
        "open-quote",
        "optimizeLegibility",
        "optimizeSpeed",
        "oriya",
        "oromo",
        "outset",
        "outside",
        "outside-shape",
        "overlay",
        "overline",
        "padding",
        "padding-box",
        "painted",
        "page",
        "paused",
        "persian",
        "perspective",
        "pinch-zoom",
        "plus-darker",
        "plus-lighter",
        "pointer",
        "polygon",
        "portrait",
        "pre",
        "pre-line",
        "pre-wrap",
        "preserve-3d",
        "progress",
        "push-button",
        "radial-gradient",
        "radio",
        "read-only",
        "read-write",
        "read-write-plaintext-only",
        "rectangle",
        "region",
        "relative",
        "repeat",
        "repeating-linear-gradient",
        "repeating-radial-gradient",
        "repeat-x",
        "repeat-y",
        "reset",
        "reverse",
        "rgb",
        "rgba",
        "ridge",
        "right",
        "rotate",
        "rotate3d",
        "rotateX",
        "rotateY",
        "rotateZ",
        "round",
        "row",
        "row-resize",
        "row-reverse",
        "rtl",
        "run-in",
        "running",
        "s-resize",
        "sans-serif",
        "saturation",
        "scale",
        "scale3d",
        "scaleX",
        "scaleY",
        "scaleZ",
        "screen",
        "scroll",
        "scrollbar",
        "scroll-position",
        "se-resize",
        "searchfield",
        "searchfield-cancel-button",
        "searchfield-decoration",
        "searchfield-results-button",
        "searchfield-results-decoration",
        "self-start",
        "self-end",
        "semi-condensed",
        "semi-expanded",
        "separate",
        "serif",
        "show",
        "sidama",
        "simp-chinese-formal",
        "simp-chinese-informal",
        "single",
        "skew",
        "skewX",
        "skewY",
        "skip-white-space",
        "slide",
        "slider-horizontal",
        "slider-vertical",
        "sliderthumb-horizontal",
        "sliderthumb-vertical",
        "slow",
        "small",
        "small-caps",
        "small-caption",
        "smaller",
        "soft-light",
        "solid",
        "somali",
        "source-atop",
        "source-in",
        "source-out",
        "source-over",
        "space",
        "space-around",
        "space-between",
        "space-evenly",
        "spell-out",
        "square",
        "square-button",
        "start",
        "static",
        "status-bar",
        "stretch",
        "stroke",
        "stroke-box",
        "sub",
        "subpixel-antialiased",
        "svg_masks",
        "super",
        "sw-resize",
        "symbolic",
        "symbols",
        "system-ui",
        "table",
        "table-caption",
        "table-cell",
        "table-column",
        "table-column-group",
        "table-footer-group",
        "table-header-group",
        "table-row",
        "table-row-group",
        "tamil",
        "telugu",
        "text",
        "text-bottom",
        "text-top",
        "textarea",
        "textfield",
        "thai",
        "thick",
        "thin",
        "threeddarkshadow",
        "threedface",
        "threedhighlight",
        "threedlightshadow",
        "threedshadow",
        "tibetan",
        "tigre",
        "tigrinya-er",
        "tigrinya-er-abegede",
        "tigrinya-et",
        "tigrinya-et-abegede",
        "to",
        "top",
        "trad-chinese-formal",
        "trad-chinese-informal",
        "transform",
        "translate",
        "translate3d",
        "translateX",
        "translateY",
        "translateZ",
        "transparent",
        "ultra-condensed",
        "ultra-expanded",
        "underline",
        "unidirectional-pan",
        "unset",
        "up",
        "upper-alpha",
        "upper-armenian",
        "upper-greek",
        "upper-hexadecimal",
        "upper-latin",
        "upper-norwegian",
        "upper-roman",
        "uppercase",
        "urdu",
        "url",
        "var",
        "vertical",
        "vertical-text",
        "view-box",
        "visible",
        "visibleFill",
        "visiblePainted",
        "visibleStroke",
        "visual",
        "w-resize",
        "wait",
        "wave",
        "wider",
        "window",
        "windowframe",
        "windowtext",
        "words",
        "wrap",
        "wrap-reverse",
        "x-large",
        "x-small",
        "xor",
        "xx-large",
        "xx-small"
      ], valueKeywords = keySet(valueKeywords_);
      var allWords = documentTypes_.concat(mediaTypes_).concat(mediaFeatures_).concat(mediaValueKeywords_).concat(propertyKeywords_).concat(nonStandardPropertyKeywords_).concat(colorKeywords_).concat(valueKeywords_);
      CodeMirror2.registerHelper("hintWords", "css", allWords);
      function tokenCComment(stream, state) {
        var maybeEnd = false, ch;
        while ((ch = stream.next()) != null) {
          if (maybeEnd && ch == "/") {
            state.tokenize = null;
            break;
          }
          maybeEnd = ch == "*";
        }
        return ["comment", "comment"];
      }
      CodeMirror2.defineMIME("text/css", {
        documentTypes,
        mediaTypes,
        mediaFeatures,
        mediaValueKeywords,
        propertyKeywords,
        nonStandardPropertyKeywords,
        fontProperties,
        counterDescriptors,
        colorKeywords,
        valueKeywords,
        tokenHooks: {
          "/": function(stream, state) {
            if (!stream.eat("*"))
              return false;
            state.tokenize = tokenCComment;
            return tokenCComment(stream, state);
          }
        },
        name: "css"
      });
      CodeMirror2.defineMIME("text/x-scss", {
        mediaTypes,
        mediaFeatures,
        mediaValueKeywords,
        propertyKeywords,
        nonStandardPropertyKeywords,
        colorKeywords,
        valueKeywords,
        fontProperties,
        allowNested: true,
        lineComment: "//",
        tokenHooks: {
          "/": function(stream, state) {
            if (stream.eat("/")) {
              stream.skipToEnd();
              return ["comment", "comment"];
            } else if (stream.eat("*")) {
              state.tokenize = tokenCComment;
              return tokenCComment(stream, state);
            } else {
              return ["operator", "operator"];
            }
          },
          ":": function(stream) {
            if (stream.match(/\s*\{/, false))
              return [null, null];
            return false;
          },
          "$": function(stream) {
            stream.match(/^[\w-]+/);
            if (stream.match(/^\s*:/, false))
              return ["variable-2", "variable-definition"];
            return ["variable-2", "variable"];
          },
          "#": function(stream) {
            if (!stream.eat("{"))
              return false;
            return [null, "interpolation"];
          }
        },
        name: "css",
        helperType: "scss"
      });
      CodeMirror2.defineMIME("text/x-less", {
        mediaTypes,
        mediaFeatures,
        mediaValueKeywords,
        propertyKeywords,
        nonStandardPropertyKeywords,
        colorKeywords,
        valueKeywords,
        fontProperties,
        allowNested: true,
        lineComment: "//",
        tokenHooks: {
          "/": function(stream, state) {
            if (stream.eat("/")) {
              stream.skipToEnd();
              return ["comment", "comment"];
            } else if (stream.eat("*")) {
              state.tokenize = tokenCComment;
              return tokenCComment(stream, state);
            } else {
              return ["operator", "operator"];
            }
          },
          "@": function(stream) {
            if (stream.eat("{"))
              return [null, "interpolation"];
            if (stream.match(/^(charset|document|font-face|import|(-(moz|ms|o|webkit)-)?keyframes|media|namespace|page|supports)\b/i, false))
              return false;
            stream.eatWhile(/[\w\\\-]/);
            if (stream.match(/^\s*:/, false))
              return ["variable-2", "variable-definition"];
            return ["variable-2", "variable"];
          },
          "&": function() {
            return ["atom", "atom"];
          }
        },
        name: "css",
        helperType: "less"
      });
      CodeMirror2.defineMIME("text/x-gss", {
        documentTypes,
        mediaTypes,
        mediaFeatures,
        propertyKeywords,
        nonStandardPropertyKeywords,
        fontProperties,
        counterDescriptors,
        colorKeywords,
        valueKeywords,
        supportsAtComponent: true,
        tokenHooks: {
          "/": function(stream, state) {
            if (!stream.eat("*"))
              return false;
            state.tokenize = tokenCComment;
            return tokenCComment(stream, state);
          }
        },
        name: "css",
        helperType: "gss"
      });
    });
  }
});

// mode/cypher/cypher.js
var require_cypher = __commonJS({
  "mode/cypher/cypher.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      var wordRegexp = function(words) {
        return new RegExp("^(?:" + words.join("|") + ")$", "i");
      };
      CodeMirror2.defineMode("cypher", function(config) {
        var tokenBase = function(stream) {
          var ch = stream.next();
          if (ch === '"') {
            stream.match(/.*?"/);
            return "string";
          }
          if (ch === "'") {
            stream.match(/.*?'/);
            return "string";
          }
          if (/[{}\(\),\.;\[\]]/.test(ch)) {
            curPunc = ch;
            return "node";
          } else if (ch === "/" && stream.eat("/")) {
            stream.skipToEnd();
            return "comment";
          } else if (operatorChars.test(ch)) {
            stream.eatWhile(operatorChars);
            return null;
          } else {
            stream.eatWhile(/[_\w\d]/);
            if (stream.eat(":")) {
              stream.eatWhile(/[\w\d_\-]/);
              return "atom";
            }
            var word = stream.current();
            if (funcs.test(word))
              return "builtin";
            if (preds.test(word))
              return "def";
            if (keywords.test(word) || systemKeywords.test(word))
              return "keyword";
            return "variable";
          }
        };
        var pushContext = function(state, type, col) {
          return state.context = {
            prev: state.context,
            indent: state.indent,
            col,
            type
          };
        };
        var popContext = function(state) {
          state.indent = state.context.indent;
          return state.context = state.context.prev;
        };
        var indentUnit = config.indentUnit;
        var curPunc;
        var funcs = wordRegexp(["abs", "acos", "allShortestPaths", "asin", "atan", "atan2", "avg", "ceil", "coalesce", "collect", "cos", "cot", "count", "degrees", "e", "endnode", "exp", "extract", "filter", "floor", "haversin", "head", "id", "keys", "labels", "last", "left", "length", "log", "log10", "lower", "ltrim", "max", "min", "node", "nodes", "percentileCont", "percentileDisc", "pi", "radians", "rand", "range", "reduce", "rel", "relationship", "relationships", "replace", "reverse", "right", "round", "rtrim", "shortestPath", "sign", "sin", "size", "split", "sqrt", "startnode", "stdev", "stdevp", "str", "substring", "sum", "tail", "tan", "timestamp", "toFloat", "toInt", "toString", "trim", "type", "upper"]);
        var preds = wordRegexp(["all", "and", "any", "contains", "exists", "has", "in", "none", "not", "or", "single", "xor"]);
        var keywords = wordRegexp(["as", "asc", "ascending", "assert", "by", "case", "commit", "constraint", "create", "csv", "cypher", "delete", "desc", "descending", "detach", "distinct", "drop", "else", "end", "ends", "explain", "false", "fieldterminator", "foreach", "from", "headers", "in", "index", "is", "join", "limit", "load", "match", "merge", "null", "on", "optional", "order", "periodic", "profile", "remove", "return", "scan", "set", "skip", "start", "starts", "then", "true", "union", "unique", "unwind", "using", "when", "where", "with", "call", "yield"]);
        var systemKeywords = wordRegexp(["access", "active", "assign", "all", "alter", "as", "catalog", "change", "copy", "create", "constraint", "constraints", "current", "database", "databases", "dbms", "default", "deny", "drop", "element", "elements", "exists", "from", "grant", "graph", "graphs", "if", "index", "indexes", "label", "labels", "management", "match", "name", "names", "new", "node", "nodes", "not", "of", "on", "or", "password", "populated", "privileges", "property", "read", "relationship", "relationships", "remove", "replace", "required", "revoke", "role", "roles", "set", "show", "start", "status", "stop", "suspended", "to", "traverse", "type", "types", "user", "users", "with", "write"]);
        var operatorChars = /[*+\-<>=&|~%^]/;
        return {
          startState: function() {
            return {
              tokenize: tokenBase,
              context: null,
              indent: 0,
              col: 0
            };
          },
          token: function(stream, state) {
            if (stream.sol()) {
              if (state.context && state.context.align == null) {
                state.context.align = false;
              }
              state.indent = stream.indentation();
            }
            if (stream.eatSpace()) {
              return null;
            }
            var style = state.tokenize(stream, state);
            if (style !== "comment" && state.context && state.context.align == null && state.context.type !== "pattern") {
              state.context.align = true;
            }
            if (curPunc === "(") {
              pushContext(state, ")", stream.column());
            } else if (curPunc === "[") {
              pushContext(state, "]", stream.column());
            } else if (curPunc === "{") {
              pushContext(state, "}", stream.column());
            } else if (/[\]\}\)]/.test(curPunc)) {
              while (state.context && state.context.type === "pattern") {
                popContext(state);
              }
              if (state.context && curPunc === state.context.type) {
                popContext(state);
              }
            } else if (curPunc === "." && state.context && state.context.type === "pattern") {
              popContext(state);
            } else if (/atom|string|variable/.test(style) && state.context) {
              if (/[\}\]]/.test(state.context.type)) {
                pushContext(state, "pattern", stream.column());
              } else if (state.context.type === "pattern" && !state.context.align) {
                state.context.align = true;
                state.context.col = stream.column();
              }
            }
            return style;
          },
          indent: function(state, textAfter) {
            var firstChar = textAfter && textAfter.charAt(0);
            var context = state.context;
            if (/[\]\}]/.test(firstChar)) {
              while (context && context.type === "pattern") {
                context = context.prev;
              }
            }
            var closing = context && firstChar === context.type;
            if (!context)
              return 0;
            if (context.type === "keywords")
              return CodeMirror2.commands.newlineAndIndent;
            if (context.align)
              return context.col + (closing ? 0 : 1);
            return context.indent + (closing ? 0 : indentUnit);
          }
        };
      });
      CodeMirror2.modeExtensions["cypher"] = {
        autoFormatLineBreaks: function(text) {
          var i, lines, reProcessedPortion;
          var lines = text.split("\n");
          var reProcessedPortion = /\s+\b(return|where|order by|match|with|skip|limit|create|delete|set)\b\s/g;
          for (var i = 0; i < lines.length; i++)
            lines[i] = lines[i].replace(reProcessedPortion, " \n$1 ").trim();
          return lines.join("\n");
        }
      };
      CodeMirror2.defineMIME("application/x-cypher-query", "cypher");
    });
  }
});

// mode/d/d.js
var require_d = __commonJS({
  "mode/d/d.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("d", function(config, parserConfig) {
        var indentUnit = config.indentUnit, statementIndentUnit = parserConfig.statementIndentUnit || indentUnit, keywords = parserConfig.keywords || {}, builtin = parserConfig.builtin || {}, blockKeywords2 = parserConfig.blockKeywords || {}, atoms = parserConfig.atoms || {}, hooks = parserConfig.hooks || {}, multiLineStrings = parserConfig.multiLineStrings;
        var isOperatorChar = /[+\-*&%=<>!?|\/]/;
        var curPunc;
        function tokenBase(stream, state) {
          var ch = stream.next();
          if (hooks[ch]) {
            var result = hooks[ch](stream, state);
            if (result !== false)
              return result;
          }
          if (ch == '"' || ch == "'" || ch == "`") {
            state.tokenize = tokenString(ch);
            return state.tokenize(stream, state);
          }
          if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
            curPunc = ch;
            return null;
          }
          if (/\d/.test(ch)) {
            stream.eatWhile(/[\w\.]/);
            return "number";
          }
          if (ch == "/") {
            if (stream.eat("+")) {
              state.tokenize = tokenNestedComment;
              return tokenNestedComment(stream, state);
            }
            if (stream.eat("*")) {
              state.tokenize = tokenComment;
              return tokenComment(stream, state);
            }
            if (stream.eat("/")) {
              stream.skipToEnd();
              return "comment";
            }
          }
          if (isOperatorChar.test(ch)) {
            stream.eatWhile(isOperatorChar);
            return "operator";
          }
          stream.eatWhile(/[\w\$_\xa1-\uffff]/);
          var cur = stream.current();
          if (keywords.propertyIsEnumerable(cur)) {
            if (blockKeywords2.propertyIsEnumerable(cur))
              curPunc = "newstatement";
            return "keyword";
          }
          if (builtin.propertyIsEnumerable(cur)) {
            if (blockKeywords2.propertyIsEnumerable(cur))
              curPunc = "newstatement";
            return "builtin";
          }
          if (atoms.propertyIsEnumerable(cur))
            return "atom";
          return "variable";
        }
        function tokenString(quote) {
          return function(stream, state) {
            var escaped = false, next, end = false;
            while ((next = stream.next()) != null) {
              if (next == quote && !escaped) {
                end = true;
                break;
              }
              escaped = !escaped && next == "\\";
            }
            if (end || !(escaped || multiLineStrings))
              state.tokenize = null;
            return "string";
          };
        }
        function tokenComment(stream, state) {
          var maybeEnd = false, ch;
          while (ch = stream.next()) {
            if (ch == "/" && maybeEnd) {
              state.tokenize = null;
              break;
            }
            maybeEnd = ch == "*";
          }
          return "comment";
        }
        function tokenNestedComment(stream, state) {
          var maybeEnd = false, ch;
          while (ch = stream.next()) {
            if (ch == "/" && maybeEnd) {
              state.tokenize = null;
              break;
            }
            maybeEnd = ch == "+";
          }
          return "comment";
        }
        function Context(indented, column, type, align, prev) {
          this.indented = indented;
          this.column = column;
          this.type = type;
          this.align = align;
          this.prev = prev;
        }
        function pushContext(state, col, type) {
          var indent = state.indented;
          if (state.context && state.context.type == "statement")
            indent = state.context.indented;
          return state.context = new Context(indent, col, type, null, state.context);
        }
        function popContext(state) {
          var t = state.context.type;
          if (t == ")" || t == "]" || t == "}")
            state.indented = state.context.indented;
          return state.context = state.context.prev;
        }
        return {
          startState: function(basecolumn) {
            return {
              tokenize: null,
              context: new Context((basecolumn || 0) - indentUnit, 0, "top", false),
              indented: 0,
              startOfLine: true
            };
          },
          token: function(stream, state) {
            var ctx = state.context;
            if (stream.sol()) {
              if (ctx.align == null)
                ctx.align = false;
              state.indented = stream.indentation();
              state.startOfLine = true;
            }
            if (stream.eatSpace())
              return null;
            curPunc = null;
            var style = (state.tokenize || tokenBase)(stream, state);
            if (style == "comment" || style == "meta")
              return style;
            if (ctx.align == null)
              ctx.align = true;
            if ((curPunc == ";" || curPunc == ":" || curPunc == ",") && ctx.type == "statement")
              popContext(state);
            else if (curPunc == "{")
              pushContext(state, stream.column(), "}");
            else if (curPunc == "[")
              pushContext(state, stream.column(), "]");
            else if (curPunc == "(")
              pushContext(state, stream.column(), ")");
            else if (curPunc == "}") {
              while (ctx.type == "statement")
                ctx = popContext(state);
              if (ctx.type == "}")
                ctx = popContext(state);
              while (ctx.type == "statement")
                ctx = popContext(state);
            } else if (curPunc == ctx.type)
              popContext(state);
            else if ((ctx.type == "}" || ctx.type == "top") && curPunc != ";" || ctx.type == "statement" && curPunc == "newstatement")
              pushContext(state, stream.column(), "statement");
            state.startOfLine = false;
            return style;
          },
          indent: function(state, textAfter) {
            if (state.tokenize != tokenBase && state.tokenize != null)
              return CodeMirror2.Pass;
            var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
            if (ctx.type == "statement" && firstChar == "}")
              ctx = ctx.prev;
            var closing = firstChar == ctx.type;
            if (ctx.type == "statement")
              return ctx.indented + (firstChar == "{" ? 0 : statementIndentUnit);
            else if (ctx.align)
              return ctx.column + (closing ? 0 : 1);
            else
              return ctx.indented + (closing ? 0 : indentUnit);
          },
          electricChars: "{}",
          blockCommentStart: "/*",
          blockCommentEnd: "*/",
          blockCommentContinue: " * ",
          lineComment: "//",
          fold: "brace"
        };
      });
      function words(str) {
        var obj = {}, words2 = str.split(" ");
        for (var i = 0; i < words2.length; ++i)
          obj[words2[i]] = true;
        return obj;
      }
      var blockKeywords = "body catch class do else enum for foreach foreach_reverse if in interface mixin out scope struct switch try union unittest version while with";
      CodeMirror2.defineMIME("text/x-d", {
        name: "d",
        keywords: words("abstract alias align asm assert auto break case cast cdouble cent cfloat const continue debug default delegate delete deprecated export extern final finally function goto immutable import inout invariant is lazy macro module new nothrow override package pragma private protected public pure ref return shared short static super synchronized template this throw typedef typeid typeof volatile __FILE__ __LINE__ __gshared __traits __vector __parameters " + blockKeywords),
        blockKeywords: words(blockKeywords),
        builtin: words("bool byte char creal dchar double float idouble ifloat int ireal long real short ubyte ucent uint ulong ushort wchar wstring void size_t sizediff_t"),
        atoms: words("exit failure success true false null"),
        hooks: {
          "@": function(stream, _state) {
            stream.eatWhile(/[\w\$_]/);
            return "meta";
          }
        }
      });
    });
  }
});

// mode/dart/dart.js
var require_dart = __commonJS({
  "mode/dart/dart.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror(), require_clike());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror", "../clike/clike"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      var keywords = "this super static final const abstract class extends external factory implements mixin get native set typedef with enum throw rethrow assert break case continue default in return new deferred async await covariant try catch finally do else for if switch while import library export part of show hide is as extension on yield late required".split(" ");
      var blockKeywords = "try catch finally do else for if switch while".split(" ");
      var atoms = "true false null".split(" ");
      var builtins = "void bool num int double dynamic var String Null Never".split(" ");
      function set(words) {
        var obj = {};
        for (var i = 0; i < words.length; ++i)
          obj[words[i]] = true;
        return obj;
      }
      function pushInterpolationStack(state) {
        (state.interpolationStack || (state.interpolationStack = [])).push(state.tokenize);
      }
      function popInterpolationStack(state) {
        return (state.interpolationStack || (state.interpolationStack = [])).pop();
      }
      function sizeInterpolationStack(state) {
        return state.interpolationStack ? state.interpolationStack.length : 0;
      }
      CodeMirror2.defineMIME("application/dart", {
        name: "clike",
        keywords: set(keywords),
        blockKeywords: set(blockKeywords),
        builtin: set(builtins),
        atoms: set(atoms),
        hooks: {
          "@": function(stream) {
            stream.eatWhile(/[\w\$_\.]/);
            return "meta";
          },
          // custom string handling to deal with triple-quoted strings and string interpolation
          "'": function(stream, state) {
            return tokenString("'", stream, state, false);
          },
          '"': function(stream, state) {
            return tokenString('"', stream, state, false);
          },
          "r": function(stream, state) {
            var peek = stream.peek();
            if (peek == "'" || peek == '"') {
              return tokenString(stream.next(), stream, state, true);
            }
            return false;
          },
          "}": function(_stream, state) {
            if (sizeInterpolationStack(state) > 0) {
              state.tokenize = popInterpolationStack(state);
              return null;
            }
            return false;
          },
          "/": function(stream, state) {
            if (!stream.eat("*"))
              return false;
            state.tokenize = tokenNestedComment(1);
            return state.tokenize(stream, state);
          },
          token: function(stream, _, style) {
            if (style == "variable") {
              var isUpper = RegExp("^[_$]*[A-Z][a-zA-Z0-9_$]*$", "g");
              if (isUpper.test(stream.current())) {
                return "variable-2";
              }
            }
          }
        }
      });
      function tokenString(quote, stream, state, raw) {
        var tripleQuoted = false;
        if (stream.eat(quote)) {
          if (stream.eat(quote))
            tripleQuoted = true;
          else
            return "string";
        }
        function tokenStringHelper(stream2, state2) {
          var escaped = false;
          while (!stream2.eol()) {
            if (!raw && !escaped && stream2.peek() == "$") {
              pushInterpolationStack(state2);
              state2.tokenize = tokenInterpolation;
              return "string";
            }
            var next = stream2.next();
            if (next == quote && !escaped && (!tripleQuoted || stream2.match(quote + quote))) {
              state2.tokenize = null;
              break;
            }
            escaped = !raw && !escaped && next == "\\";
          }
          return "string";
        }
        state.tokenize = tokenStringHelper;
        return tokenStringHelper(stream, state);
      }
      function tokenInterpolation(stream, state) {
        stream.eat("$");
        if (stream.eat("{")) {
          state.tokenize = null;
        } else {
          state.tokenize = tokenInterpolationIdentifier;
        }
        return null;
      }
      function tokenInterpolationIdentifier(stream, state) {
        stream.eatWhile(/[\w_]/);
        state.tokenize = popInterpolationStack(state);
        return "variable";
      }
      function tokenNestedComment(depth) {
        return function(stream, state) {
          var ch;
          while (ch = stream.next()) {
            if (ch == "*" && stream.eat("/")) {
              if (depth == 1) {
                state.tokenize = null;
                break;
              } else {
                state.tokenize = tokenNestedComment(depth - 1);
                return state.tokenize(stream, state);
              }
            } else if (ch == "/" && stream.eat("*")) {
              state.tokenize = tokenNestedComment(depth + 1);
              return state.tokenize(stream, state);
            }
          }
          return "comment";
        };
      }
      CodeMirror2.registerHelper("hintWords", "application/dart", keywords.concat(atoms).concat(builtins));
      CodeMirror2.defineMode("dart", function(conf) {
        return CodeMirror2.getMode(conf, "application/dart");
      }, "clike");
    });
  }
});

// mode/diff/diff.js
var require_diff = __commonJS({
  "mode/diff/diff.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("diff", function() {
        var TOKEN_NAMES = {
          "+": "positive",
          "-": "negative",
          "@": "meta"
        };
        return {
          token: function(stream) {
            var tw_pos = stream.string.search(/[\t ]+?$/);
            if (!stream.sol() || tw_pos === 0) {
              stream.skipToEnd();
              return ("error " + (TOKEN_NAMES[stream.string.charAt(0)] || "")).replace(/ $/, "");
            }
            var token_name = TOKEN_NAMES[stream.peek()] || stream.skipToEnd();
            if (tw_pos === -1) {
              stream.skipToEnd();
            } else {
              stream.pos = tw_pos;
            }
            return token_name;
          }
        };
      });
      CodeMirror2.defineMIME("text/x-diff", "diff");
    });
  }
});

// mode/xml/xml.js
var require_xml = __commonJS({
  "mode/xml/xml.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      var htmlConfig = {
        autoSelfClosers: {
          "area": true,
          "base": true,
          "br": true,
          "col": true,
          "command": true,
          "embed": true,
          "frame": true,
          "hr": true,
          "img": true,
          "input": true,
          "keygen": true,
          "link": true,
          "meta": true,
          "param": true,
          "source": true,
          "track": true,
          "wbr": true,
          "menuitem": true
        },
        implicitlyClosed: {
          "dd": true,
          "li": true,
          "optgroup": true,
          "option": true,
          "p": true,
          "rp": true,
          "rt": true,
          "tbody": true,
          "td": true,
          "tfoot": true,
          "th": true,
          "tr": true
        },
        contextGrabbers: {
          "dd": { "dd": true, "dt": true },
          "dt": { "dd": true, "dt": true },
          "li": { "li": true },
          "option": { "option": true, "optgroup": true },
          "optgroup": { "optgroup": true },
          "p": {
            "address": true,
            "article": true,
            "aside": true,
            "blockquote": true,
            "dir": true,
            "div": true,
            "dl": true,
            "fieldset": true,
            "footer": true,
            "form": true,
            "h1": true,
            "h2": true,
            "h3": true,
            "h4": true,
            "h5": true,
            "h6": true,
            "header": true,
            "hgroup": true,
            "hr": true,
            "menu": true,
            "nav": true,
            "ol": true,
            "p": true,
            "pre": true,
            "section": true,
            "table": true,
            "ul": true
          },
          "rp": { "rp": true, "rt": true },
          "rt": { "rp": true, "rt": true },
          "tbody": { "tbody": true, "tfoot": true },
          "td": { "td": true, "th": true },
          "tfoot": { "tbody": true },
          "th": { "td": true, "th": true },
          "thead": { "tbody": true, "tfoot": true },
          "tr": { "tr": true }
        },
        doNotIndent: { "pre": true },
        allowUnquoted: true,
        allowMissing: true,
        caseFold: true
      };
      var xmlConfig = {
        autoSelfClosers: {},
        implicitlyClosed: {},
        contextGrabbers: {},
        doNotIndent: {},
        allowUnquoted: false,
        allowMissing: false,
        allowMissingTagName: false,
        caseFold: false
      };
      CodeMirror2.defineMode("xml", function(editorConf, config_) {
        var indentUnit = editorConf.indentUnit;
        var config = {};
        var defaults = config_.htmlMode ? htmlConfig : xmlConfig;
        for (var prop in defaults)
          config[prop] = defaults[prop];
        for (var prop in config_)
          config[prop] = config_[prop];
        var type, setStyle;
        function inText(stream, state) {
          function chain(parser) {
            state.tokenize = parser;
            return parser(stream, state);
          }
          var ch = stream.next();
          if (ch == "<") {
            if (stream.eat("!")) {
              if (stream.eat("[")) {
                if (stream.match("CDATA["))
                  return chain(inBlock("atom", "]]>"));
                else
                  return null;
              } else if (stream.match("--")) {
                return chain(inBlock("comment", "-->"));
              } else if (stream.match("DOCTYPE", true, true)) {
                stream.eatWhile(/[\w\._\-]/);
                return chain(doctype(1));
              } else {
                return null;
              }
            } else if (stream.eat("?")) {
              stream.eatWhile(/[\w\._\-]/);
              state.tokenize = inBlock("meta", "?>");
              return "meta";
            } else {
              type = stream.eat("/") ? "closeTag" : "openTag";
              state.tokenize = inTag;
              return "tag bracket";
            }
          } else if (ch == "&") {
            var ok;
            if (stream.eat("#")) {
              if (stream.eat("x")) {
                ok = stream.eatWhile(/[a-fA-F\d]/) && stream.eat(";");
              } else {
                ok = stream.eatWhile(/[\d]/) && stream.eat(";");
              }
            } else {
              ok = stream.eatWhile(/[\w\.\-:]/) && stream.eat(";");
            }
            return ok ? "atom" : "error";
          } else {
            stream.eatWhile(/[^&<]/);
            return null;
          }
        }
        inText.isInText = true;
        function inTag(stream, state) {
          var ch = stream.next();
          if (ch == ">" || ch == "/" && stream.eat(">")) {
            state.tokenize = inText;
            type = ch == ">" ? "endTag" : "selfcloseTag";
            return "tag bracket";
          } else if (ch == "=") {
            type = "equals";
            return null;
          } else if (ch == "<") {
            state.tokenize = inText;
            state.state = baseState;
            state.tagName = state.tagStart = null;
            var next = state.tokenize(stream, state);
            return next ? next + " tag error" : "tag error";
          } else if (/[\'\"]/.test(ch)) {
            state.tokenize = inAttribute(ch);
            state.stringStartCol = stream.column();
            return state.tokenize(stream, state);
          } else {
            stream.match(/^[^\s\u00a0=<>\"\']*[^\s\u00a0=<>\"\'\/]/);
            return "word";
          }
        }
        function inAttribute(quote) {
          var closure = function(stream, state) {
            while (!stream.eol()) {
              if (stream.next() == quote) {
                state.tokenize = inTag;
                break;
              }
            }
            return "string";
          };
          closure.isInAttribute = true;
          return closure;
        }
        function inBlock(style, terminator) {
          return function(stream, state) {
            while (!stream.eol()) {
              if (stream.match(terminator)) {
                state.tokenize = inText;
                break;
              }
              stream.next();
            }
            return style;
          };
        }
        function doctype(depth) {
          return function(stream, state) {
            var ch;
            while ((ch = stream.next()) != null) {
              if (ch == "<") {
                state.tokenize = doctype(depth + 1);
                return state.tokenize(stream, state);
              } else if (ch == ">") {
                if (depth == 1) {
                  state.tokenize = inText;
                  break;
                } else {
                  state.tokenize = doctype(depth - 1);
                  return state.tokenize(stream, state);
                }
              }
            }
            return "meta";
          };
        }
        function Context(state, tagName, startOfLine) {
          this.prev = state.context;
          this.tagName = tagName;
          this.indent = state.indented;
          this.startOfLine = startOfLine;
          if (config.doNotIndent.hasOwnProperty(tagName) || state.context && state.context.noIndent)
            this.noIndent = true;
        }
        function popContext(state) {
          if (state.context)
            state.context = state.context.prev;
        }
        function maybePopContext(state, nextTagName) {
          var parentTagName;
          while (true) {
            if (!state.context) {
              return;
            }
            parentTagName = state.context.tagName;
            if (!config.contextGrabbers.hasOwnProperty(parentTagName) || !config.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {
              return;
            }
            popContext(state);
          }
        }
        function baseState(type2, stream, state) {
          if (type2 == "openTag") {
            state.tagStart = stream.column();
            return tagNameState;
          } else if (type2 == "closeTag") {
            return closeTagNameState;
          } else {
            return baseState;
          }
        }
        function tagNameState(type2, stream, state) {
          if (type2 == "word") {
            state.tagName = stream.current();
            setStyle = "tag";
            return attrState;
          } else if (config.allowMissingTagName && type2 == "endTag") {
            setStyle = "tag bracket";
            return attrState(type2, stream, state);
          } else {
            setStyle = "error";
            return tagNameState;
          }
        }
        function closeTagNameState(type2, stream, state) {
          if (type2 == "word") {
            var tagName = stream.current();
            if (state.context && state.context.tagName != tagName && config.implicitlyClosed.hasOwnProperty(state.context.tagName))
              popContext(state);
            if (state.context && state.context.tagName == tagName || config.matchClosing === false) {
              setStyle = "tag";
              return closeState;
            } else {
              setStyle = "tag error";
              return closeStateErr;
            }
          } else if (config.allowMissingTagName && type2 == "endTag") {
            setStyle = "tag bracket";
            return closeState(type2, stream, state);
          } else {
            setStyle = "error";
            return closeStateErr;
          }
        }
        function closeState(type2, _stream, state) {
          if (type2 != "endTag") {
            setStyle = "error";
            return closeState;
          }
          popContext(state);
          return baseState;
        }
        function closeStateErr(type2, stream, state) {
          setStyle = "error";
          return closeState(type2, stream, state);
        }
        function attrState(type2, _stream, state) {
          if (type2 == "word") {
            setStyle = "attribute";
            return attrEqState;
          } else if (type2 == "endTag" || type2 == "selfcloseTag") {
            var tagName = state.tagName, tagStart = state.tagStart;
            state.tagName = state.tagStart = null;
            if (type2 == "selfcloseTag" || config.autoSelfClosers.hasOwnProperty(tagName)) {
              maybePopContext(state, tagName);
            } else {
              maybePopContext(state, tagName);
              state.context = new Context(state, tagName, tagStart == state.indented);
            }
            return baseState;
          }
          setStyle = "error";
          return attrState;
        }
        function attrEqState(type2, stream, state) {
          if (type2 == "equals")
            return attrValueState;
          if (!config.allowMissing)
            setStyle = "error";
          return attrState(type2, stream, state);
        }
        function attrValueState(type2, stream, state) {
          if (type2 == "string")
            return attrContinuedState;
          if (type2 == "word" && config.allowUnquoted) {
            setStyle = "string";
            return attrState;
          }
          setStyle = "error";
          return attrState(type2, stream, state);
        }
        function attrContinuedState(type2, stream, state) {
          if (type2 == "string")
            return attrContinuedState;
          return attrState(type2, stream, state);
        }
        return {
          startState: function(baseIndent) {
            var state = {
              tokenize: inText,
              state: baseState,
              indented: baseIndent || 0,
              tagName: null,
              tagStart: null,
              context: null
            };
            if (baseIndent != null)
              state.baseIndent = baseIndent;
            return state;
          },
          token: function(stream, state) {
            if (!state.tagName && stream.sol())
              state.indented = stream.indentation();
            if (stream.eatSpace())
              return null;
            type = null;
            var style = state.tokenize(stream, state);
            if ((style || type) && style != "comment") {
              setStyle = null;
              state.state = state.state(type || style, stream, state);
              if (setStyle)
                style = setStyle == "error" ? style + " error" : setStyle;
            }
            return style;
          },
          indent: function(state, textAfter, fullLine) {
            var context = state.context;
            if (state.tokenize.isInAttribute) {
              if (state.tagStart == state.indented)
                return state.stringStartCol + 1;
              else
                return state.indented + indentUnit;
            }
            if (context && context.noIndent)
              return CodeMirror2.Pass;
            if (state.tokenize != inTag && state.tokenize != inText)
              return fullLine ? fullLine.match(/^(\s*)/)[0].length : 0;
            if (state.tagName) {
              if (config.multilineTagIndentPastTag !== false)
                return state.tagStart + state.tagName.length + 2;
              else
                return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);
            }
            if (config.alignCDATA && /<!\[CDATA\[/.test(textAfter))
              return 0;
            var tagAfter = textAfter && /^<(\/)?([\w_:\.-]*)/.exec(textAfter);
            if (tagAfter && tagAfter[1]) {
              while (context) {
                if (context.tagName == tagAfter[2]) {
                  context = context.prev;
                  break;
                } else if (config.implicitlyClosed.hasOwnProperty(context.tagName)) {
                  context = context.prev;
                } else {
                  break;
                }
              }
            } else if (tagAfter) {
              while (context) {
                var grabbers = config.contextGrabbers[context.tagName];
                if (grabbers && grabbers.hasOwnProperty(tagAfter[2]))
                  context = context.prev;
                else
                  break;
              }
            }
            while (context && context.prev && !context.startOfLine)
              context = context.prev;
            if (context)
              return context.indent + indentUnit;
            else
              return state.baseIndent || 0;
          },
          electricInput: /<\/[\s\w:]+>$/,
          blockCommentStart: "<!--",
          blockCommentEnd: "-->",
          configuration: config.htmlMode ? "html" : "xml",
          helperType: config.htmlMode ? "html" : "xml",
          skipAttribute: function(state) {
            if (state.state == attrValueState)
              state.state = attrState;
          },
          xmlCurrentTag: function(state) {
            return state.tagName ? { name: state.tagName, close: state.type == "closeTag" } : null;
          },
          xmlCurrentContext: function(state) {
            var context = [];
            for (var cx = state.context; cx; cx = cx.prev)
              if (cx.tagName)
                context.push(cx.tagName);
            return context.reverse();
          }
        };
      });
      CodeMirror2.defineMIME("text/xml", "xml");
      CodeMirror2.defineMIME("application/xml", "xml");
      if (!CodeMirror2.mimeModes.hasOwnProperty("text/html"))
        CodeMirror2.defineMIME("text/html", { name: "xml", htmlMode: true });
    });
  }
});

// mode/javascript/javascript.js
var require_javascript = __commonJS({
  "mode/javascript/javascript.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("javascript", function(config, parserConfig) {
        var indentUnit = config.indentUnit;
        var statementIndent = parserConfig.statementIndent;
        var jsonldMode = parserConfig.jsonld;
        var jsonMode = parserConfig.json || jsonldMode;
        var isTS = parserConfig.typescript;
        var wordRE = parserConfig.wordCharacters || /[\w$\xa1-\uffff]/;
        var keywords = function() {
          function kw(type2) {
            return { type: type2, style: "keyword" };
          }
          var A = kw("keyword a"), B = kw("keyword b"), C = kw("keyword c"), D = kw("keyword d");
          var operator = kw("operator"), atom = { type: "atom", style: "atom" };
          return {
            "if": kw("if"),
            "while": A,
            "with": A,
            "else": B,
            "do": B,
            "try": B,
            "finally": B,
            "return": D,
            "break": D,
            "continue": D,
            "new": kw("new"),
            "delete": C,
            "void": C,
            "throw": C,
            "debugger": kw("debugger"),
            "var": kw("var"),
            "const": kw("var"),
            "let": kw("var"),
            "function": kw("function"),
            "catch": kw("catch"),
            "for": kw("for"),
            "switch": kw("switch"),
            "case": kw("case"),
            "default": kw("default"),
            "in": operator,
            "typeof": operator,
            "instanceof": operator,
            "true": atom,
            "false": atom,
            "null": atom,
            "undefined": atom,
            "NaN": atom,
            "Infinity": atom,
            "this": kw("this"),
            "class": kw("class"),
            "super": kw("atom"),
            "yield": C,
            "export": kw("export"),
            "import": kw("import"),
            "extends": C,
            "await": C
          };
        }();
        var isOperatorChar = /[+\-*&%=<>!?|~^@]/;
        var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)"/;
        function readRegexp(stream) {
          var escaped = false, next, inSet = false;
          while ((next = stream.next()) != null) {
            if (!escaped) {
              if (next == "/" && !inSet)
                return;
              if (next == "[")
                inSet = true;
              else if (inSet && next == "]")
                inSet = false;
            }
            escaped = !escaped && next == "\\";
          }
        }
        var type, content;
        function ret(tp, style, cont2) {
          type = tp;
          content = cont2;
          return style;
        }
        function tokenBase(stream, state) {
          var ch = stream.next();
          if (ch == '"' || ch == "'") {
            state.tokenize = tokenString(ch);
            return state.tokenize(stream, state);
          } else if (ch == "." && stream.match(/^\d[\d_]*(?:[eE][+\-]?[\d_]+)?/)) {
            return ret("number", "number");
          } else if (ch == "." && stream.match("..")) {
            return ret("spread", "meta");
          } else if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
            return ret(ch);
          } else if (ch == "=" && stream.eat(">")) {
            return ret("=>", "operator");
          } else if (ch == "0" && stream.match(/^(?:x[\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {
            return ret("number", "number");
          } else if (/\d/.test(ch)) {
            stream.match(/^[\d_]*(?:n|(?:\.[\d_]*)?(?:[eE][+\-]?[\d_]+)?)?/);
            return ret("number", "number");
          } else if (ch == "/") {
            if (stream.eat("*")) {
              state.tokenize = tokenComment;
              return tokenComment(stream, state);
            } else if (stream.eat("/")) {
              stream.skipToEnd();
              return ret("comment", "comment");
            } else if (expressionAllowed(stream, state, 1)) {
              readRegexp(stream);
              stream.match(/^\b(([gimyus])(?![gimyus]*\2))+\b/);
              return ret("regexp", "string-2");
            } else {
              stream.eat("=");
              return ret("operator", "operator", stream.current());
            }
          } else if (ch == "`") {
            state.tokenize = tokenQuasi;
            return tokenQuasi(stream, state);
          } else if (ch == "#" && stream.peek() == "!") {
            stream.skipToEnd();
            return ret("meta", "meta");
          } else if (ch == "#" && stream.eatWhile(wordRE)) {
            return ret("variable", "property");
          } else if (ch == "<" && stream.match("!--") || ch == "-" && stream.match("->") && !/\S/.test(stream.string.slice(0, stream.start))) {
            stream.skipToEnd();
            return ret("comment", "comment");
          } else if (isOperatorChar.test(ch)) {
            if (ch != ">" || !state.lexical || state.lexical.type != ">") {
              if (stream.eat("=")) {
                if (ch == "!" || ch == "=")
                  stream.eat("=");
              } else if (/[<>*+\-|&?]/.test(ch)) {
                stream.eat(ch);
                if (ch == ">")
                  stream.eat(ch);
              }
            }
            if (ch == "?" && stream.eat("."))
              return ret(".");
            return ret("operator", "operator", stream.current());
          } else if (wordRE.test(ch)) {
            stream.eatWhile(wordRE);
            var word = stream.current();
            if (state.lastType != ".") {
              if (keywords.propertyIsEnumerable(word)) {
                var kw = keywords[word];
                return ret(kw.type, kw.style, word);
              }
              if (word == "async" && stream.match(/^(\s|\/\*([^*]|\*(?!\/))*?\*\/)*[\[\(\w]/, false))
                return ret("async", "keyword", word);
            }
            return ret("variable", "variable", word);
          }
        }
        function tokenString(quote) {
          return function(stream, state) {
            var escaped = false, next;
            if (jsonldMode && stream.peek() == "@" && stream.match(isJsonldKeyword)) {
              state.tokenize = tokenBase;
              return ret("jsonld-keyword", "meta");
            }
            while ((next = stream.next()) != null) {
              if (next == quote && !escaped)
                break;
              escaped = !escaped && next == "\\";
            }
            if (!escaped)
              state.tokenize = tokenBase;
            return ret("string", "string");
          };
        }
        function tokenComment(stream, state) {
          var maybeEnd = false, ch;
          while (ch = stream.next()) {
            if (ch == "/" && maybeEnd) {
              state.tokenize = tokenBase;
              break;
            }
            maybeEnd = ch == "*";
          }
          return ret("comment", "comment");
        }
        function tokenQuasi(stream, state) {
          var escaped = false, next;
          while ((next = stream.next()) != null) {
            if (!escaped && (next == "`" || next == "$" && stream.eat("{"))) {
              state.tokenize = tokenBase;
              break;
            }
            escaped = !escaped && next == "\\";
          }
          return ret("quasi", "string-2", stream.current());
        }
        var brackets = "([{}])";
        function findFatArrow(stream, state) {
          if (state.fatArrowAt)
            state.fatArrowAt = null;
          var arrow = stream.string.indexOf("=>", stream.start);
          if (arrow < 0)
            return;
          if (isTS) {
            var m = /:\s*(?:\w+(?:<[^>]*>|\[\])?|\{[^}]*\})\s*$/.exec(stream.string.slice(stream.start, arrow));
            if (m)
              arrow = m.index;
          }
          var depth = 0, sawSomething = false;
          for (var pos = arrow - 1; pos >= 0; --pos) {
            var ch = stream.string.charAt(pos);
            var bracket = brackets.indexOf(ch);
            if (bracket >= 0 && bracket < 3) {
              if (!depth) {
                ++pos;
                break;
              }
              if (--depth == 0) {
                if (ch == "(")
                  sawSomething = true;
                break;
              }
            } else if (bracket >= 3 && bracket < 6) {
              ++depth;
            } else if (wordRE.test(ch)) {
              sawSomething = true;
            } else if (/["'\/`]/.test(ch)) {
              for (; ; --pos) {
                if (pos == 0)
                  return;
                var next = stream.string.charAt(pos - 1);
                if (next == ch && stream.string.charAt(pos - 2) != "\\") {
                  pos--;
                  break;
                }
              }
            } else if (sawSomething && !depth) {
              ++pos;
              break;
            }
          }
          if (sawSomething && !depth)
            state.fatArrowAt = pos;
        }
        var atomicTypes = { "atom": true, "number": true, "variable": true, "string": true, "regexp": true, "this": true, "jsonld-keyword": true };
        function JSLexical(indented, column, type2, align, prev, info) {
          this.indented = indented;
          this.column = column;
          this.type = type2;
          this.prev = prev;
          this.info = info;
          if (align != null)
            this.align = align;
        }
        function inScope(state, varname) {
          for (var v = state.localVars; v; v = v.next)
            if (v.name == varname)
              return true;
          for (var cx2 = state.context; cx2; cx2 = cx2.prev) {
            for (var v = cx2.vars; v; v = v.next)
              if (v.name == varname)
                return true;
          }
        }
        function parseJS(state, style, type2, content2, stream) {
          var cc = state.cc;
          cx.state = state;
          cx.stream = stream;
          cx.marked = null, cx.cc = cc;
          cx.style = style;
          if (!state.lexical.hasOwnProperty("align"))
            state.lexical.align = true;
          while (true) {
            var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;
            if (combinator(type2, content2)) {
              while (cc.length && cc[cc.length - 1].lex)
                cc.pop()();
              if (cx.marked)
                return cx.marked;
              if (type2 == "variable" && inScope(state, content2))
                return "variable-2";
              return style;
            }
          }
        }
        var cx = { state: null, column: null, marked: null, cc: null };
        function pass() {
          for (var i = arguments.length - 1; i >= 0; i--)
            cx.cc.push(arguments[i]);
        }
        function cont() {
          pass.apply(null, arguments);
          return true;
        }
        function inList(name, list) {
          for (var v = list; v; v = v.next)
            if (v.name == name)
              return true;
          return false;
        }
        function register(varname) {
          var state = cx.state;
          cx.marked = "def";
          if (state.context) {
            if (state.lexical.info == "var" && state.context && state.context.block) {
              var newContext = registerVarScoped(varname, state.context);
              if (newContext != null) {
                state.context = newContext;
                return;
              }
            } else if (!inList(varname, state.localVars)) {
              state.localVars = new Var(varname, state.localVars);
              return;
            }
          }
          if (parserConfig.globalVars && !inList(varname, state.globalVars))
            state.globalVars = new Var(varname, state.globalVars);
        }
        function registerVarScoped(varname, context) {
          if (!context) {
            return null;
          } else if (context.block) {
            var inner = registerVarScoped(varname, context.prev);
            if (!inner)
              return null;
            if (inner == context.prev)
              return context;
            return new Context(inner, context.vars, true);
          } else if (inList(varname, context.vars)) {
            return context;
          } else {
            return new Context(context.prev, new Var(varname, context.vars), false);
          }
        }
        function isModifier(name) {
          return name == "public" || name == "private" || name == "protected" || name == "abstract" || name == "readonly";
        }
        function Context(prev, vars, block2) {
          this.prev = prev;
          this.vars = vars;
          this.block = block2;
        }
        function Var(name, next) {
          this.name = name;
          this.next = next;
        }
        var defaultVars = new Var("this", new Var("arguments", null));
        function pushcontext() {
          cx.state.context = new Context(cx.state.context, cx.state.localVars, false);
          cx.state.localVars = defaultVars;
        }
        function pushblockcontext() {
          cx.state.context = new Context(cx.state.context, cx.state.localVars, true);
          cx.state.localVars = null;
        }
        function popcontext() {
          cx.state.localVars = cx.state.context.vars;
          cx.state.context = cx.state.context.prev;
        }
        popcontext.lex = true;
        function pushlex(type2, info) {
          var result = function() {
            var state = cx.state, indent = state.indented;
            if (state.lexical.type == "stat")
              indent = state.lexical.indented;
            else
              for (var outer = state.lexical; outer && outer.type == ")" && outer.align; outer = outer.prev)
                indent = outer.indented;
            state.lexical = new JSLexical(indent, cx.stream.column(), type2, null, state.lexical, info);
          };
          result.lex = true;
          return result;
        }
        function poplex() {
          var state = cx.state;
          if (state.lexical.prev) {
            if (state.lexical.type == ")")
              state.indented = state.lexical.indented;
            state.lexical = state.lexical.prev;
          }
        }
        poplex.lex = true;
        function expect(wanted) {
          function exp(type2) {
            if (type2 == wanted)
              return cont();
            else if (wanted == ";" || type2 == "}" || type2 == ")" || type2 == "]")
              return pass();
            else
              return cont(exp);
          }
          ;
          return exp;
        }
        function statement(type2, value) {
          if (type2 == "var")
            return cont(pushlex("vardef", value), vardef, expect(";"), poplex);
          if (type2 == "keyword a")
            return cont(pushlex("form"), parenExpr, statement, poplex);
          if (type2 == "keyword b")
            return cont(pushlex("form"), statement, poplex);
          if (type2 == "keyword d")
            return cx.stream.match(/^\s*$/, false) ? cont() : cont(pushlex("stat"), maybeexpression, expect(";"), poplex);
          if (type2 == "debugger")
            return cont(expect(";"));
          if (type2 == "{")
            return cont(pushlex("}"), pushblockcontext, block, poplex, popcontext);
          if (type2 == ";")
            return cont();
          if (type2 == "if") {
            if (cx.state.lexical.info == "else" && cx.state.cc[cx.state.cc.length - 1] == poplex)
              cx.state.cc.pop()();
            return cont(pushlex("form"), parenExpr, statement, poplex, maybeelse);
          }
          if (type2 == "function")
            return cont(functiondef);
          if (type2 == "for")
            return cont(pushlex("form"), forspec, statement, poplex);
          if (type2 == "class" || isTS && value == "interface") {
            cx.marked = "keyword";
            return cont(pushlex("form", type2 == "class" ? type2 : value), className, poplex);
          }
          if (type2 == "variable") {
            if (isTS && value == "declare") {
              cx.marked = "keyword";
              return cont(statement);
            } else if (isTS && (value == "module" || value == "enum" || value == "type") && cx.stream.match(/^\s*\w/, false)) {
              cx.marked = "keyword";
              if (value == "enum")
                return cont(enumdef);
              else if (value == "type")
                return cont(typename, expect("operator"), typeexpr, expect(";"));
              else
                return cont(pushlex("form"), pattern, expect("{"), pushlex("}"), block, poplex, poplex);
            } else if (isTS && value == "namespace") {
              cx.marked = "keyword";
              return cont(pushlex("form"), expression, statement, poplex);
            } else if (isTS && value == "abstract") {
              cx.marked = "keyword";
              return cont(statement);
            } else {
              return cont(pushlex("stat"), maybelabel);
            }
          }
          if (type2 == "switch")
            return cont(
              pushlex("form"),
              parenExpr,
              expect("{"),
              pushlex("}", "switch"),
              pushblockcontext,
              block,
              poplex,
              poplex,
              popcontext
            );
          if (type2 == "case")
            return cont(expression, expect(":"));
          if (type2 == "default")
            return cont(expect(":"));
          if (type2 == "catch")
            return cont(pushlex("form"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);
          if (type2 == "export")
            return cont(pushlex("stat"), afterExport, poplex);
          if (type2 == "import")
            return cont(pushlex("stat"), afterImport, poplex);
          if (type2 == "async")
            return cont(statement);
          if (value == "@")
            return cont(expression, statement);
          return pass(pushlex("stat"), expression, expect(";"), poplex);
        }
        function maybeCatchBinding(type2) {
          if (type2 == "(")
            return cont(funarg, expect(")"));
        }
        function expression(type2, value) {
          return expressionInner(type2, value, false);
        }
        function expressionNoComma(type2, value) {
          return expressionInner(type2, value, true);
        }
        function parenExpr(type2) {
          if (type2 != "(")
            return pass();
          return cont(pushlex(")"), maybeexpression, expect(")"), poplex);
        }
        function expressionInner(type2, value, noComma) {
          if (cx.state.fatArrowAt == cx.stream.start) {
            var body = noComma ? arrowBodyNoComma : arrowBody;
            if (type2 == "(")
              return cont(pushcontext, pushlex(")"), commasep(funarg, ")"), poplex, expect("=>"), body, popcontext);
            else if (type2 == "variable")
              return pass(pushcontext, pattern, expect("=>"), body, popcontext);
          }
          var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;
          if (atomicTypes.hasOwnProperty(type2))
            return cont(maybeop);
          if (type2 == "function")
            return cont(functiondef, maybeop);
          if (type2 == "class" || isTS && value == "interface") {
            cx.marked = "keyword";
            return cont(pushlex("form"), classExpression, poplex);
          }
          if (type2 == "keyword c" || type2 == "async")
            return cont(noComma ? expressionNoComma : expression);
          if (type2 == "(")
            return cont(pushlex(")"), maybeexpression, expect(")"), poplex, maybeop);
          if (type2 == "operator" || type2 == "spread")
            return cont(noComma ? expressionNoComma : expression);
          if (type2 == "[")
            return cont(pushlex("]"), arrayLiteral, poplex, maybeop);
          if (type2 == "{")
            return contCommasep(objprop, "}", null, maybeop);
          if (type2 == "quasi")
            return pass(quasi, maybeop);
          if (type2 == "new")
            return cont(maybeTarget(noComma));
          if (type2 == "import")
            return cont(expression);
          return cont();
        }
        function maybeexpression(type2) {
          if (type2.match(/[;\}\)\],]/))
            return pass();
          return pass(expression);
        }
        function maybeoperatorComma(type2, value) {
          if (type2 == ",")
            return cont(maybeexpression);
          return maybeoperatorNoComma(type2, value, false);
        }
        function maybeoperatorNoComma(type2, value, noComma) {
          var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;
          var expr = noComma == false ? expression : expressionNoComma;
          if (type2 == "=>")
            return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);
          if (type2 == "operator") {
            if (/\+\+|--/.test(value) || isTS && value == "!")
              return cont(me);
            if (isTS && value == "<" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\s*\(/, false))
              return cont(pushlex(">"), commasep(typeexpr, ">"), poplex, me);
            if (value == "?")
              return cont(expression, expect(":"), expr);
            return cont(expr);
          }
          if (type2 == "quasi") {
            return pass(quasi, me);
          }
          if (type2 == ";")
            return;
          if (type2 == "(")
            return contCommasep(expressionNoComma, ")", "call", me);
          if (type2 == ".")
            return cont(property, me);
          if (type2 == "[")
            return cont(pushlex("]"), maybeexpression, expect("]"), poplex, me);
          if (isTS && value == "as") {
            cx.marked = "keyword";
            return cont(typeexpr, me);
          }
          if (type2 == "regexp") {
            cx.state.lastType = cx.marked = "operator";
            cx.stream.backUp(cx.stream.pos - cx.stream.start - 1);
            return cont(expr);
          }
        }
        function quasi(type2, value) {
          if (type2 != "quasi")
            return pass();
          if (value.slice(value.length - 2) != "${")
            return cont(quasi);
          return cont(expression, continueQuasi);
        }
        function continueQuasi(type2) {
          if (type2 == "}") {
            cx.marked = "string-2";
            cx.state.tokenize = tokenQuasi;
            return cont(quasi);
          }
        }
        function arrowBody(type2) {
          findFatArrow(cx.stream, cx.state);
          return pass(type2 == "{" ? statement : expression);
        }
        function arrowBodyNoComma(type2) {
          findFatArrow(cx.stream, cx.state);
          return pass(type2 == "{" ? statement : expressionNoComma);
        }
        function maybeTarget(noComma) {
          return function(type2) {
            if (type2 == ".")
              return cont(noComma ? targetNoComma : target);
            else if (type2 == "variable" && isTS)
              return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma);
            else
              return pass(noComma ? expressionNoComma : expression);
          };
        }
        function target(_, value) {
          if (value == "target") {
            cx.marked = "keyword";
            return cont(maybeoperatorComma);
          }
        }
        function targetNoComma(_, value) {
          if (value == "target") {
            cx.marked = "keyword";
            return cont(maybeoperatorNoComma);
          }
        }
        function maybelabel(type2) {
          if (type2 == ":")
            return cont(poplex, statement);
          return pass(maybeoperatorComma, expect(";"), poplex);
        }
        function property(type2) {
          if (type2 == "variable") {
            cx.marked = "property";
            return cont();
          }
        }
        function objprop(type2, value) {
          if (type2 == "async") {
            cx.marked = "property";
            return cont(objprop);
          } else if (type2 == "variable" || cx.style == "keyword") {
            cx.marked = "property";
            if (value == "get" || value == "set")
              return cont(getterSetter);
            var m;
            if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\s*:\s*/, false)))
              cx.state.fatArrowAt = cx.stream.pos + m[0].length;
            return cont(afterprop);
          } else if (type2 == "number" || type2 == "string") {
            cx.marked = jsonldMode ? "property" : cx.style + " property";
            return cont(afterprop);
          } else if (type2 == "jsonld-keyword") {
            return cont(afterprop);
          } else if (isTS && isModifier(value)) {
            cx.marked = "keyword";
            return cont(objprop);
          } else if (type2 == "[") {
            return cont(expression, maybetype, expect("]"), afterprop);
          } else if (type2 == "spread") {
            return cont(expressionNoComma, afterprop);
          } else if (value == "*") {
            cx.marked = "keyword";
            return cont(objprop);
          } else if (type2 == ":") {
            return pass(afterprop);
          }
        }
        function getterSetter(type2) {
          if (type2 != "variable")
            return pass(afterprop);
          cx.marked = "property";
          return cont(functiondef);
        }
        function afterprop(type2) {
          if (type2 == ":")
            return cont(expressionNoComma);
          if (type2 == "(")
            return pass(functiondef);
        }
        function commasep(what, end, sep) {
          function proceed(type2, value) {
            if (sep ? sep.indexOf(type2) > -1 : type2 == ",") {
              var lex = cx.state.lexical;
              if (lex.info == "call")
                lex.pos = (lex.pos || 0) + 1;
              return cont(function(type3, value2) {
                if (type3 == end || value2 == end)
                  return pass();
                return pass(what);
              }, proceed);
            }
            if (type2 == end || value == end)
              return cont();
            if (sep && sep.indexOf(";") > -1)
              return pass(what);
            return cont(expect(end));
          }
          return function(type2, value) {
            if (type2 == end || value == end)
              return cont();
            return pass(what, proceed);
          };
        }
        function contCommasep(what, end, info) {
          for (var i = 3; i < arguments.length; i++)
            cx.cc.push(arguments[i]);
          return cont(pushlex(end, info), commasep(what, end), poplex);
        }
        function block(type2) {
          if (type2 == "}")
            return cont();
          return pass(statement, block);
        }
        function maybetype(type2, value) {
          if (isTS) {
            if (type2 == ":")
              return cont(typeexpr);
            if (value == "?")
              return cont(maybetype);
          }
        }
        function maybetypeOrIn(type2, value) {
          if (isTS && (type2 == ":" || value == "in"))
            return cont(typeexpr);
        }
        function mayberettype(type2) {
          if (isTS && type2 == ":") {
            if (cx.stream.match(/^\s*\w+\s+is\b/, false))
              return cont(expression, isKW, typeexpr);
            else
              return cont(typeexpr);
          }
        }
        function isKW(_, value) {
          if (value == "is") {
            cx.marked = "keyword";
            return cont();
          }
        }
        function typeexpr(type2, value) {
          if (value == "keyof" || value == "typeof" || value == "infer") {
            cx.marked = "keyword";
            return cont(value == "typeof" ? expressionNoComma : typeexpr);
          }
          if (type2 == "variable" || value == "void") {
            cx.marked = "type";
            return cont(afterType);
          }
          if (value == "|" || value == "&")
            return cont(typeexpr);
          if (type2 == "string" || type2 == "number" || type2 == "atom")
            return cont(afterType);
          if (type2 == "[")
            return cont(pushlex("]"), commasep(typeexpr, "]", ","), poplex, afterType);
          if (type2 == "{")
            return cont(pushlex("}"), commasep(typeprop, "}", ",;"), poplex, afterType);
          if (type2 == "(")
            return cont(commasep(typearg, ")"), maybeReturnType, afterType);
          if (type2 == "<")
            return cont(commasep(typeexpr, ">"), typeexpr);
        }
        function maybeReturnType(type2) {
          if (type2 == "=>")
            return cont(typeexpr);
        }
        function typeprop(type2, value) {
          if (type2 == "variable" || cx.style == "keyword") {
            cx.marked = "property";
            return cont(typeprop);
          } else if (value == "?" || type2 == "number" || type2 == "string") {
            return cont(typeprop);
          } else if (type2 == ":") {
            return cont(typeexpr);
          } else if (type2 == "[") {
            return cont(expect("variable"), maybetypeOrIn, expect("]"), typeprop);
          } else if (type2 == "(") {
            return pass(functiondecl, typeprop);
          }
        }
        function typearg(type2, value) {
          if (type2 == "variable" && cx.stream.match(/^\s*[?:]/, false) || value == "?")
            return cont(typearg);
          if (type2 == ":")
            return cont(typeexpr);
          if (type2 == "spread")
            return cont(typearg);
          return pass(typeexpr);
        }
        function afterType(type2, value) {
          if (value == "<")
            return cont(pushlex(">"), commasep(typeexpr, ">"), poplex, afterType);
          if (value == "|" || type2 == "." || value == "&")
            return cont(typeexpr);
          if (type2 == "[")
            return cont(typeexpr, expect("]"), afterType);
          if (value == "extends" || value == "implements") {
            cx.marked = "keyword";
            return cont(typeexpr);
          }
          if (value == "?")
            return cont(typeexpr, expect(":"), typeexpr);
        }
        function maybeTypeArgs(_, value) {
          if (value == "<")
            return cont(pushlex(">"), commasep(typeexpr, ">"), poplex, afterType);
        }
        function typeparam() {
          return pass(typeexpr, maybeTypeDefault);
        }
        function maybeTypeDefault(_, value) {
          if (value == "=")
            return cont(typeexpr);
        }
        function vardef(_, value) {
          if (value == "enum") {
            cx.marked = "keyword";
            return cont(enumdef);
          }
          return pass(pattern, maybetype, maybeAssign, vardefCont);
        }
        function pattern(type2, value) {
          if (isTS && isModifier(value)) {
            cx.marked = "keyword";
            return cont(pattern);
          }
          if (type2 == "variable") {
            register(value);
            return cont();
          }
          if (type2 == "spread")
            return cont(pattern);
          if (type2 == "[")
            return contCommasep(eltpattern, "]");
          if (type2 == "{")
            return contCommasep(proppattern, "}");
        }
        function proppattern(type2, value) {
          if (type2 == "variable" && !cx.stream.match(/^\s*:/, false)) {
            register(value);
            return cont(maybeAssign);
          }
          if (type2 == "variable")
            cx.marked = "property";
          if (type2 == "spread")
            return cont(pattern);
          if (type2 == "}")
            return pass();
          if (type2 == "[")
            return cont(expression, expect("]"), expect(":"), proppattern);
          return cont(expect(":"), pattern, maybeAssign);
        }
        function eltpattern() {
          return pass(pattern, maybeAssign);
        }
        function maybeAssign(_type, value) {
          if (value == "=")
            return cont(expressionNoComma);
        }
        function vardefCont(type2) {
          if (type2 == ",")
            return cont(vardef);
        }
        function maybeelse(type2, value) {
          if (type2 == "keyword b" && value == "else")
            return cont(pushlex("form", "else"), statement, poplex);
        }
        function forspec(type2, value) {
          if (value == "await")
            return cont(forspec);
          if (type2 == "(")
            return cont(pushlex(")"), forspec1, poplex);
        }
        function forspec1(type2) {
          if (type2 == "var")
            return cont(vardef, forspec2);
          if (type2 == "variable")
            return cont(forspec2);
          return pass(forspec2);
        }
        function forspec2(type2, value) {
          if (type2 == ")")
            return cont();
          if (type2 == ";")
            return cont(forspec2);
          if (value == "in" || value == "of") {
            cx.marked = "keyword";
            return cont(expression, forspec2);
          }
          return pass(expression, forspec2);
        }
        function functiondef(type2, value) {
          if (value == "*") {
            cx.marked = "keyword";
            return cont(functiondef);
          }
          if (type2 == "variable") {
            register(value);
            return cont(functiondef);
          }
          if (type2 == "(")
            return cont(pushcontext, pushlex(")"), commasep(funarg, ")"), poplex, mayberettype, statement, popcontext);
          if (isTS && value == "<")
            return cont(pushlex(">"), commasep(typeparam, ">"), poplex, functiondef);
        }
        function functiondecl(type2, value) {
          if (value == "*") {
            cx.marked = "keyword";
            return cont(functiondecl);
          }
          if (type2 == "variable") {
            register(value);
            return cont(functiondecl);
          }
          if (type2 == "(")
            return cont(pushcontext, pushlex(")"), commasep(funarg, ")"), poplex, mayberettype, popcontext);
          if (isTS && value == "<")
            return cont(pushlex(">"), commasep(typeparam, ">"), poplex, functiondecl);
        }
        function typename(type2, value) {
          if (type2 == "keyword" || type2 == "variable") {
            cx.marked = "type";
            return cont(typename);
          } else if (value == "<") {
            return cont(pushlex(">"), commasep(typeparam, ">"), poplex);
          }
        }
        function funarg(type2, value) {
          if (value == "@")
            cont(expression, funarg);
          if (type2 == "spread")
            return cont(funarg);
          if (isTS && isModifier(value)) {
            cx.marked = "keyword";
            return cont(funarg);
          }
          if (isTS && type2 == "this")
            return cont(maybetype, maybeAssign);
          return pass(pattern, maybetype, maybeAssign);
        }
        function classExpression(type2, value) {
          if (type2 == "variable")
            return className(type2, value);
          return classNameAfter(type2, value);
        }
        function className(type2, value) {
          if (type2 == "variable") {
            register(value);
            return cont(classNameAfter);
          }
        }
        function classNameAfter(type2, value) {
          if (value == "<")
            return cont(pushlex(">"), commasep(typeparam, ">"), poplex, classNameAfter);
          if (value == "extends" || value == "implements" || isTS && type2 == ",") {
            if (value == "implements")
              cx.marked = "keyword";
            return cont(isTS ? typeexpr : expression, classNameAfter);
          }
          if (type2 == "{")
            return cont(pushlex("}"), classBody, poplex);
        }
        function classBody(type2, value) {
          if (type2 == "async" || type2 == "variable" && (value == "static" || value == "get" || value == "set" || isTS && isModifier(value)) && cx.stream.match(/^\s+[\w$\xa1-\uffff]/, false)) {
            cx.marked = "keyword";
            return cont(classBody);
          }
          if (type2 == "variable" || cx.style == "keyword") {
            cx.marked = "property";
            return cont(classfield, classBody);
          }
          if (type2 == "number" || type2 == "string")
            return cont(classfield, classBody);
          if (type2 == "[")
            return cont(expression, maybetype, expect("]"), classfield, classBody);
          if (value == "*") {
            cx.marked = "keyword";
            return cont(classBody);
          }
          if (isTS && type2 == "(")
            return pass(functiondecl, classBody);
          if (type2 == ";" || type2 == ",")
            return cont(classBody);
          if (type2 == "}")
            return cont();
          if (value == "@")
            return cont(expression, classBody);
        }
        function classfield(type2, value) {
          if (value == "?")
            return cont(classfield);
          if (type2 == ":")
            return cont(typeexpr, maybeAssign);
          if (value == "=")
            return cont(expressionNoComma);
          var context = cx.state.lexical.prev, isInterface = context && context.info == "interface";
          return pass(isInterface ? functiondecl : functiondef);
        }
        function afterExport(type2, value) {
          if (value == "*") {
            cx.marked = "keyword";
            return cont(maybeFrom, expect(";"));
          }
          if (value == "default") {
            cx.marked = "keyword";
            return cont(expression, expect(";"));
          }
          if (type2 == "{")
            return cont(commasep(exportField, "}"), maybeFrom, expect(";"));
          return pass(statement);
        }
        function exportField(type2, value) {
          if (value == "as") {
            cx.marked = "keyword";
            return cont(expect("variable"));
          }
          if (type2 == "variable")
            return pass(expressionNoComma, exportField);
        }
        function afterImport(type2) {
          if (type2 == "string")
            return cont();
          if (type2 == "(")
            return pass(expression);
          return pass(importSpec, maybeMoreImports, maybeFrom);
        }
        function importSpec(type2, value) {
          if (type2 == "{")
            return contCommasep(importSpec, "}");
          if (type2 == "variable")
            register(value);
          if (value == "*")
            cx.marked = "keyword";
          return cont(maybeAs);
        }
        function maybeMoreImports(type2) {
          if (type2 == ",")
            return cont(importSpec, maybeMoreImports);
        }
        function maybeAs(_type, value) {
          if (value == "as") {
            cx.marked = "keyword";
            return cont(importSpec);
          }
        }
        function maybeFrom(_type, value) {
          if (value == "from") {
            cx.marked = "keyword";
            return cont(expression);
          }
        }
        function arrayLiteral(type2) {
          if (type2 == "]")
            return cont();
          return pass(commasep(expressionNoComma, "]"));
        }
        function enumdef() {
          return pass(pushlex("form"), pattern, expect("{"), pushlex("}"), commasep(enummember, "}"), poplex, poplex);
        }
        function enummember() {
          return pass(pattern, maybeAssign);
        }
        function isContinuedStatement(state, textAfter) {
          return state.lastType == "operator" || state.lastType == "," || isOperatorChar.test(textAfter.charAt(0)) || /[,.]/.test(textAfter.charAt(0));
        }
        function expressionAllowed(stream, state, backUp) {
          return state.tokenize == tokenBase && /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\[{}\(,;:]|=>)$/.test(state.lastType) || state.lastType == "quasi" && /\{\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0)));
        }
        return {
          startState: function(basecolumn) {
            var state = {
              tokenize: tokenBase,
              lastType: "sof",
              cc: [],
              lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, "block", false),
              localVars: parserConfig.localVars,
              context: parserConfig.localVars && new Context(null, null, false),
              indented: basecolumn || 0
            };
            if (parserConfig.globalVars && typeof parserConfig.globalVars == "object")
              state.globalVars = parserConfig.globalVars;
            return state;
          },
          token: function(stream, state) {
            if (stream.sol()) {
              if (!state.lexical.hasOwnProperty("align"))
                state.lexical.align = false;
              state.indented = stream.indentation();
              findFatArrow(stream, state);
            }
            if (state.tokenize != tokenComment && stream.eatSpace())
              return null;
            var style = state.tokenize(stream, state);
            if (type == "comment")
              return style;
            state.lastType = type == "operator" && (content == "++" || content == "--") ? "incdec" : type;
            return parseJS(state, style, type, content, stream);
          },
          indent: function(state, textAfter) {
            if (state.tokenize == tokenComment || state.tokenize == tokenQuasi)
              return CodeMirror2.Pass;
            if (state.tokenize != tokenBase)
              return 0;
            var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top;
            if (!/^\s*else\b/.test(textAfter))
              for (var i = state.cc.length - 1; i >= 0; --i) {
                var c = state.cc[i];
                if (c == poplex)
                  lexical = lexical.prev;
                else if (c != maybeelse)
                  break;
              }
            while ((lexical.type == "stat" || lexical.type == "form") && (firstChar == "}" || (top = state.cc[state.cc.length - 1]) && (top == maybeoperatorComma || top == maybeoperatorNoComma) && !/^[,\.=+\-*:?[\(]/.test(textAfter)))
              lexical = lexical.prev;
            if (statementIndent && lexical.type == ")" && lexical.prev.type == "stat")
              lexical = lexical.prev;
            var type2 = lexical.type, closing = firstChar == type2;
            if (type2 == "vardef")
              return lexical.indented + (state.lastType == "operator" || state.lastType == "," ? lexical.info.length + 1 : 0);
            else if (type2 == "form" && firstChar == "{")
              return lexical.indented;
            else if (type2 == "form")
              return lexical.indented + indentUnit;
            else if (type2 == "stat")
              return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);
            else if (lexical.info == "switch" && !closing && parserConfig.doubleIndentSwitch != false)
              return lexical.indented + (/^(?:case|default)\b/.test(textAfter) ? indentUnit : 2 * indentUnit);
            else if (lexical.align)
              return lexical.column + (closing ? 0 : 1);
            else
              return lexical.indented + (closing ? 0 : indentUnit);
          },
          electricInput: /^\s*(?:case .*?:|default:|\{|\})$/,
          blockCommentStart: jsonMode ? null : "/*",
          blockCommentEnd: jsonMode ? null : "*/",
          blockCommentContinue: jsonMode ? null : " * ",
          lineComment: jsonMode ? null : "//",
          fold: "brace",
          closeBrackets: "()[]{}''\"\"``",
          helperType: jsonMode ? "json" : "javascript",
          jsonldMode,
          jsonMode,
          expressionAllowed,
          skipExpression: function(state) {
            var top = state.cc[state.cc.length - 1];
            if (top == expression || top == expressionNoComma)
              state.cc.pop();
          }
        };
      });
      CodeMirror2.registerHelper("wordChars", "javascript", /[\w$]/);
      CodeMirror2.defineMIME("text/javascript", "javascript");
      CodeMirror2.defineMIME("text/ecmascript", "javascript");
      CodeMirror2.defineMIME("application/javascript", "javascript");
      CodeMirror2.defineMIME("application/x-javascript", "javascript");
      CodeMirror2.defineMIME("application/ecmascript", "javascript");
      CodeMirror2.defineMIME("application/json", { name: "javascript", json: true });
      CodeMirror2.defineMIME("application/x-json", { name: "javascript", json: true });
      CodeMirror2.defineMIME("application/ld+json", { name: "javascript", jsonld: true });
      CodeMirror2.defineMIME("text/typescript", { name: "javascript", typescript: true });
      CodeMirror2.defineMIME("application/typescript", { name: "javascript", typescript: true });
    });
  }
});

// mode/htmlmixed/htmlmixed.js
var require_htmlmixed = __commonJS({
  "mode/htmlmixed/htmlmixed.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror(), require_xml(), require_javascript(), require_css());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror", "../xml/xml", "../javascript/javascript", "../css/css"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      var defaultTags = {
        script: [
          ["lang", /(javascript|babel)/i, "javascript"],
          ["type", /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i, "javascript"],
          ["type", /./, "text/plain"],
          [null, null, "javascript"]
        ],
        style: [
          ["lang", /^css$/i, "css"],
          ["type", /^(text\/)?(x-)?(stylesheet|css)$/i, "css"],
          ["type", /./, "text/plain"],
          [null, null, "css"]
        ]
      };
      function maybeBackup(stream, pat, style) {
        var cur = stream.current(), close = cur.search(pat);
        if (close > -1) {
          stream.backUp(cur.length - close);
        } else if (cur.match(/<\/?$/)) {
          stream.backUp(cur.length);
          if (!stream.match(pat, false))
            stream.match(cur);
        }
        return style;
      }
      var attrRegexpCache = {};
      function getAttrRegexp(attr) {
        var regexp = attrRegexpCache[attr];
        if (regexp)
          return regexp;
        return attrRegexpCache[attr] = new RegExp("\\s+" + attr + `\\s*=\\s*('|")?([^'"]+)('|")?\\s*`);
      }
      function getAttrValue(text, attr) {
        var match = text.match(getAttrRegexp(attr));
        return match ? /^\s*(.*?)\s*$/.exec(match[2])[1] : "";
      }
      function getTagRegexp(tagName, anchored) {
        return new RegExp((anchored ? "^" : "") + "</s*" + tagName + "s*>", "i");
      }
      function addTags(from, to) {
        for (var tag in from) {
          var dest = to[tag] || (to[tag] = []);
          var source = from[tag];
          for (var i = source.length - 1; i >= 0; i--)
            dest.unshift(source[i]);
        }
      }
      function findMatchingMode(tagInfo, tagText) {
        for (var i = 0; i < tagInfo.length; i++) {
          var spec = tagInfo[i];
          if (!spec[0] || spec[1].test(getAttrValue(tagText, spec[0])))
            return spec[2];
        }
      }
      CodeMirror2.defineMode("htmlmixed", function(config, parserConfig) {
        var htmlMode = CodeMirror2.getMode(config, {
          name: "xml",
          htmlMode: true,
          multilineTagIndentFactor: parserConfig.multilineTagIndentFactor,
          multilineTagIndentPastTag: parserConfig.multilineTagIndentPastTag
        });
        var tags = {};
        var configTags = parserConfig && parserConfig.tags, configScript = parserConfig && parserConfig.scriptTypes;
        addTags(defaultTags, tags);
        if (configTags)
          addTags(configTags, tags);
        if (configScript)
          for (var i = configScript.length - 1; i >= 0; i--)
            tags.script.unshift(["type", configScript[i].matches, configScript[i].mode]);
        function html(stream, state) {
          var style = htmlMode.token(stream, state.htmlState), tag = /\btag\b/.test(style), tagName;
          if (tag && !/[<>\s\/]/.test(stream.current()) && (tagName = state.htmlState.tagName && state.htmlState.tagName.toLowerCase()) && tags.hasOwnProperty(tagName)) {
            state.inTag = tagName + " ";
          } else if (state.inTag && tag && />$/.test(stream.current())) {
            var inTag = /^([\S]+) (.*)/.exec(state.inTag);
            state.inTag = null;
            var modeSpec = stream.current() == ">" && findMatchingMode(tags[inTag[1]], inTag[2]);
            var mode = CodeMirror2.getMode(config, modeSpec);
            var endTagA = getTagRegexp(inTag[1], true), endTag = getTagRegexp(inTag[1], false);
            state.token = function(stream2, state2) {
              if (stream2.match(endTagA, false)) {
                state2.token = html;
                state2.localState = state2.localMode = null;
                return null;
              }
              return maybeBackup(stream2, endTag, state2.localMode.token(stream2, state2.localState));
            };
            state.localMode = mode;
            state.localState = CodeMirror2.startState(mode, htmlMode.indent(state.htmlState, "", ""));
          } else if (state.inTag) {
            state.inTag += stream.current();
            if (stream.eol())
              state.inTag += " ";
          }
          return style;
        }
        ;
        return {
          startState: function() {
            var state = CodeMirror2.startState(htmlMode);
            return { token: html, inTag: null, localMode: null, localState: null, htmlState: state };
          },
          copyState: function(state) {
            var local;
            if (state.localState) {
              local = CodeMirror2.copyState(state.localMode, state.localState);
            }
            return {
              token: state.token,
              inTag: state.inTag,
              localMode: state.localMode,
              localState: local,
              htmlState: CodeMirror2.copyState(htmlMode, state.htmlState)
            };
          },
          token: function(stream, state) {
            return state.token(stream, state);
          },
          indent: function(state, textAfter, line) {
            if (!state.localMode || /^\s*<\//.test(textAfter))
              return htmlMode.indent(state.htmlState, textAfter, line);
            else if (state.localMode.indent)
              return state.localMode.indent(state.localState, textAfter, line);
            else
              return CodeMirror2.Pass;
          },
          innerMode: function(state) {
            return { state: state.localState || state.htmlState, mode: state.localMode || htmlMode };
          }
        };
      }, "xml", "javascript", "css");
      CodeMirror2.defineMIME("text/html", "htmlmixed");
    });
  }
});

// addon/mode/overlay.js
var require_overlay = __commonJS({
  "addon/mode/overlay.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
    });
  }
});

// mode/django/django.js
var require_django = __commonJS({
  "mode/django/django.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(
          require_codemirror(),
          require_htmlmixed(),
          require_overlay()
        );
      else if (typeof define == "function" && define.amd)
        define([
          "../../lib/codemirror",
          "../htmlmixed/htmlmixed",
          "../../addon/mode/overlay"
        ], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("django:inner", function() {
        var keywords = [
          "block",
          "endblock",
          "for",
          "endfor",
          "true",
          "false",
          "filter",
          "endfilter",
          "loop",
          "none",
          "self",
          "super",
          "if",
          "elif",
          "endif",
          "as",
          "else",
          "import",
          "with",
          "endwith",
          "without",
          "context",
          "ifequal",
          "endifequal",
          "ifnotequal",
          "endifnotequal",
          "extends",
          "include",
          "load",
          "comment",
          "endcomment",
          "empty",
          "url",
          "static",
          "trans",
          "blocktrans",
          "endblocktrans",
          "now",
          "regroup",
          "lorem",
          "ifchanged",
          "endifchanged",
          "firstof",
          "debug",
          "cycle",
          "csrf_token",
          "autoescape",
          "endautoescape",
          "spaceless",
          "endspaceless",
          "ssi",
          "templatetag",
          "verbatim",
          "endverbatim",
          "widthratio"
        ], filters = [
          "add",
          "addslashes",
          "capfirst",
          "center",
          "cut",
          "date",
          "default",
          "default_if_none",
          "dictsort",
          "dictsortreversed",
          "divisibleby",
          "escape",
          "escapejs",
          "filesizeformat",
          "first",
          "floatformat",
          "force_escape",
          "get_digit",
          "iriencode",
          "join",
          "last",
          "length",
          "length_is",
          "linebreaks",
          "linebreaksbr",
          "linenumbers",
          "ljust",
          "lower",
          "make_list",
          "phone2numeric",
          "pluralize",
          "pprint",
          "random",
          "removetags",
          "rjust",
          "safe",
          "safeseq",
          "slice",
          "slugify",
          "stringformat",
          "striptags",
          "time",
          "timesince",
          "timeuntil",
          "title",
          "truncatechars",
          "truncatechars_html",
          "truncatewords",
          "truncatewords_html",
          "unordered_list",
          "upper",
          "urlencode",
          "urlize",
          "urlizetrunc",
          "wordcount",
          "wordwrap",
          "yesno"
        ], operators = ["==", "!=", "<", ">", "<=", ">="], wordOperators = ["in", "not", "or", "and"];
        keywords = new RegExp("^\\b(" + keywords.join("|") + ")\\b");
        filters = new RegExp("^\\b(" + filters.join("|") + ")\\b");
        operators = new RegExp("^\\b(" + operators.join("|") + ")\\b");
        wordOperators = new RegExp("^\\b(" + wordOperators.join("|") + ")\\b");
        function tokenBase(stream, state) {
          if (stream.match("{{")) {
            state.tokenize = inVariable;
            return "tag";
          } else if (stream.match("{%")) {
            state.tokenize = inTag;
            return "tag";
          } else if (stream.match("{#")) {
            state.tokenize = inComment;
            return "comment";
          }
          while (stream.next() != null && !stream.match(/\{[{%#]/, false)) {
          }
          return null;
        }
        function inString(delimiter, previousTokenizer) {
          return function(stream, state) {
            if (!state.escapeNext && stream.eat(delimiter)) {
              state.tokenize = previousTokenizer;
            } else {
              if (state.escapeNext) {
                state.escapeNext = false;
              }
              var ch = stream.next();
              if (ch == "\\") {
                state.escapeNext = true;
              }
            }
            return "string";
          };
        }
        function inVariable(stream, state) {
          if (state.waitDot) {
            state.waitDot = false;
            if (stream.peek() != ".") {
              return "null";
            }
            if (stream.match(/\.\W+/)) {
              return "error";
            } else if (stream.eat(".")) {
              state.waitProperty = true;
              return "null";
            } else {
              throw Error("Unexpected error while waiting for property.");
            }
          }
          if (state.waitPipe) {
            state.waitPipe = false;
            if (stream.peek() != "|") {
              return "null";
            }
            if (stream.match(/\.\W+/)) {
              return "error";
            } else if (stream.eat("|")) {
              state.waitFilter = true;
              return "null";
            } else {
              throw Error("Unexpected error while waiting for filter.");
            }
          }
          if (state.waitProperty) {
            state.waitProperty = false;
            if (stream.match(/\b(\w+)\b/)) {
              state.waitDot = true;
              state.waitPipe = true;
              return "property";
            }
          }
          if (state.waitFilter) {
            state.waitFilter = false;
            if (stream.match(filters)) {
              return "variable-2";
            }
          }
          if (stream.eatSpace()) {
            state.waitProperty = false;
            return "null";
          }
          if (stream.match(/\b\d+(\.\d+)?\b/)) {
            return "number";
          }
          if (stream.match("'")) {
            state.tokenize = inString("'", state.tokenize);
            return "string";
          } else if (stream.match('"')) {
            state.tokenize = inString('"', state.tokenize);
            return "string";
          }
          if (stream.match(/\b(\w+)\b/) && !state.foundVariable) {
            state.waitDot = true;
            state.waitPipe = true;
            return "variable";
          }
          if (stream.match("}}")) {
            state.waitProperty = null;
            state.waitFilter = null;
            state.waitDot = null;
            state.waitPipe = null;
            state.tokenize = tokenBase;
            return "tag";
          }
          stream.next();
          return "null";
        }
        function inTag(stream, state) {
          if (state.waitDot) {
            state.waitDot = false;
            if (stream.peek() != ".") {
              return "null";
            }
            if (stream.match(/\.\W+/)) {
              return "error";
            } else if (stream.eat(".")) {
              state.waitProperty = true;
              return "null";
            } else {
              throw Error("Unexpected error while waiting for property.");
            }
          }
          if (state.waitPipe) {
            state.waitPipe = false;
            if (stream.peek() != "|") {
              return "null";
            }
            if (stream.match(/\.\W+/)) {
              return "error";
            } else if (stream.eat("|")) {
              state.waitFilter = true;
              return "null";
            } else {
              throw Error("Unexpected error while waiting for filter.");
            }
          }
          if (state.waitProperty) {
            state.waitProperty = false;
            if (stream.match(/\b(\w+)\b/)) {
              state.waitDot = true;
              state.waitPipe = true;
              return "property";
            }
          }
          if (state.waitFilter) {
            state.waitFilter = false;
            if (stream.match(filters)) {
              return "variable-2";
            }
          }
          if (stream.eatSpace()) {
            state.waitProperty = false;
            return "null";
          }
          if (stream.match(/\b\d+(\.\d+)?\b/)) {
            return "number";
          }
          if (stream.match("'")) {
            state.tokenize = inString("'", state.tokenize);
            return "string";
          } else if (stream.match('"')) {
            state.tokenize = inString('"', state.tokenize);
            return "string";
          }
          if (stream.match(operators)) {
            return "operator";
          }
          if (stream.match(wordOperators)) {
            return "keyword";
          }
          var keywordMatch = stream.match(keywords);
          if (keywordMatch) {
            if (keywordMatch[0] == "comment") {
              state.blockCommentTag = true;
            }
            return "keyword";
          }
          if (stream.match(/\b(\w+)\b/)) {
            state.waitDot = true;
            state.waitPipe = true;
            return "variable";
          }
          if (stream.match("%}")) {
            state.waitProperty = null;
            state.waitFilter = null;
            state.waitDot = null;
            state.waitPipe = null;
            if (state.blockCommentTag) {
              state.blockCommentTag = false;
              state.tokenize = inBlockComment;
            } else {
              state.tokenize = tokenBase;
            }
            return "tag";
          }
          stream.next();
          return "null";
        }
        function inComment(stream, state) {
          if (stream.match(/^.*?#\}/))
            state.tokenize = tokenBase;
          else
            stream.skipToEnd();
          return "comment";
        }
        function inBlockComment(stream, state) {
          if (stream.match(/\{%\s*endcomment\s*%\}/, false)) {
            state.tokenize = inTag;
            stream.match("{%");
            return "tag";
          } else {
            stream.next();
            return "comment";
          }
        }
        return {
          startState: function() {
            return { tokenize: tokenBase };
          },
          token: function(stream, state) {
            return state.tokenize(stream, state);
          },
          blockCommentStart: "{% comment %}",
          blockCommentEnd: "{% endcomment %}"
        };
      });
      CodeMirror2.defineMode("django", function(config) {
        var htmlBase = CodeMirror2.getMode(config, "text/html");
        var djangoInner = CodeMirror2.getMode(config, "django:inner");
        return CodeMirror2.overlayMode(htmlBase, djangoInner);
      });
      CodeMirror2.defineMIME("text/x-django", "django");
    });
  }
});

// addon/mode/simple.js
var require_simple = __commonJS({
  "addon/mode/simple.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineSimpleMode = function(name, states) {
        CodeMirror2.defineMode(name, function(config) {
          return CodeMirror2.simpleMode(config, states);
        });
      };
      CodeMirror2.simpleMode = function(config, states) {
        ensureState(states, "start");
        var states_ = {}, meta = states.meta || {}, hasIndentation = false;
        for (var state in states)
          if (state != meta && states.hasOwnProperty(state)) {
            var list = states_[state] = [], orig = states[state];
            for (var i = 0; i < orig.length; i++) {
              var data = orig[i];
              list.push(new Rule(data, states));
              if (data.indent || data.dedent)
                hasIndentation = true;
            }
          }
        var mode = {
          startState: function() {
            return {
              state: "start",
              pending: null,
              local: null,
              localState: null,
              indent: hasIndentation ? [] : null
            };
          },
          copyState: function(state2) {
            var s = {
              state: state2.state,
              pending: state2.pending,
              local: state2.local,
              localState: null,
              indent: state2.indent && state2.indent.slice(0)
            };
            if (state2.localState)
              s.localState = CodeMirror2.copyState(state2.local.mode, state2.localState);
            if (state2.stack)
              s.stack = state2.stack.slice(0);
            for (var pers = state2.persistentStates; pers; pers = pers.next)
              s.persistentStates = {
                mode: pers.mode,
                spec: pers.spec,
                state: pers.state == state2.localState ? s.localState : CodeMirror2.copyState(pers.mode, pers.state),
                next: s.persistentStates
              };
            return s;
          },
          token: tokenFunction(states_, config),
          innerMode: function(state2) {
            return state2.local && { mode: state2.local.mode, state: state2.localState };
          },
          indent: indentFunction(states_, meta)
        };
        if (meta) {
          for (var prop in meta)
            if (meta.hasOwnProperty(prop))
              mode[prop] = meta[prop];
        }
        return mode;
      };
      function ensureState(states, name) {
        if (!states.hasOwnProperty(name))
          throw new Error("Undefined state " + name + " in simple mode");
      }
      function toRegex(val, caret) {
        if (!val)
          return /(?:)/;
        var flags = "";
        if (val instanceof RegExp) {
          if (val.ignoreCase)
            flags = "i";
          val = val.source;
        } else {
          val = String(val);
        }
        return new RegExp((caret === false ? "" : "^") + "(?:" + val + ")", flags);
      }
      function asToken(val) {
        if (!val)
          return null;
        if (val.apply)
          return val;
        if (typeof val == "string")
          return val.replace(/\./g, " ");
        var result = [];
        for (var i = 0; i < val.length; i++)
          result.push(val[i] && val[i].replace(/\./g, " "));
        return result;
      }
      function Rule(data, states) {
        if (data.next || data.push)
          ensureState(states, data.next || data.push);
        this.regex = toRegex(data.regex);
        this.token = asToken(data.token);
        this.data = data;
      }
      function tokenFunction(states, config) {
        return function(stream, state) {
          if (state.pending) {
            var pend = state.pending.shift();
            if (state.pending.length == 0)
              state.pending = null;
            stream.pos += pend.text.length;
            return pend.token;
          }
          if (state.local) {
            if (state.local.end && stream.match(state.local.end)) {
              var tok = state.local.endToken || null;
              state.local = state.localState = null;
              return tok;
            } else {
              var tok = state.local.mode.token(stream, state.localState), m;
              if (state.local.endScan && (m = state.local.endScan.exec(stream.current())))
                stream.pos = stream.start + m.index;
              return tok;
            }
          }
          var curState = states[state.state];
          for (var i = 0; i < curState.length; i++) {
            var rule = curState[i];
            var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);
            if (matches) {
              if (rule.data.next) {
                state.state = rule.data.next;
              } else if (rule.data.push) {
                (state.stack || (state.stack = [])).push(state.state);
                state.state = rule.data.push;
              } else if (rule.data.pop && state.stack && state.stack.length) {
                state.state = state.stack.pop();
              }
              if (rule.data.mode)
                enterLocalMode(config, state, rule.data.mode, rule.token);
              if (rule.data.indent)
                state.indent.push(stream.indentation() + config.indentUnit);
              if (rule.data.dedent)
                state.indent.pop();
              var token = rule.token;
              if (token && token.apply)
                token = token(matches);
              if (matches.length > 2 && rule.token && typeof rule.token != "string") {
                state.pending = [];
                for (var j = 2; j < matches.length; j++)
                  if (matches[j])
                    state.pending.push({ text: matches[j], token: rule.token[j - 1] });
                stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));
                return token[0];
              } else if (token && token.join) {
                return token[0];
              } else {
                return token;
              }
            }
          }
          stream.next();
          return null;
        };
      }
      function cmp(a, b) {
        if (a === b)
          return true;
        if (!a || typeof a != "object" || !b || typeof b != "object")
          return false;
        var props = 0;
        for (var prop in a)
          if (a.hasOwnProperty(prop)) {
            if (!b.hasOwnProperty(prop) || !cmp(a[prop], b[prop]))
              return false;
            props++;
          }
        for (var prop in b)
          if (b.hasOwnProperty(prop))
            props--;
        return props == 0;
      }
      function enterLocalMode(config, state, spec, token) {
        var pers;
        if (spec.persistent) {
          for (var p = state.persistentStates; p && !pers; p = p.next)
            if (spec.spec ? cmp(spec.spec, p.spec) : spec.mode == p.mode)
              pers = p;
        }
        var mode = pers ? pers.mode : spec.mode || CodeMirror2.getMode(config, spec.spec);
        var lState = pers ? pers.state : CodeMirror2.startState(mode);
        if (spec.persistent && !pers)
          state.persistentStates = { mode, spec: spec.spec, state: lState, next: state.persistentStates };
        state.localState = lState;
        state.local = {
          mode,
          end: spec.end && toRegex(spec.end),
          endScan: spec.end && spec.forceEnd !== false && toRegex(spec.end, false),
          endToken: token && token.join ? token[token.length - 1] : token
        };
      }
      function indexOf(val, arr) {
        for (var i = 0; i < arr.length; i++)
          if (arr[i] === val)
            return true;
      }
      function indentFunction(states, meta) {
        return function(state, textAfter, line) {
          if (state.local && state.local.mode.indent)
            return state.local.mode.indent(state.localState, textAfter, line);
          if (state.indent == null || state.local || meta.dontIndentStates && indexOf(state.state, meta.dontIndentStates) > -1)
            return CodeMirror2.Pass;
          var pos = state.indent.length - 1, rules = states[state.state];
          scan:
            for (; ; ) {
              for (var i = 0; i < rules.length; i++) {
                var rule = rules[i];
                if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {
                  var m = rule.regex.exec(textAfter);
                  if (m && m[0]) {
                    pos--;
                    if (rule.next || rule.push)
                      rules = states[rule.next || rule.push];
                    textAfter = textAfter.slice(m[0].length);
                    continue scan;
                  }
                }
              }
              break;
            }
          return pos < 0 ? 0 : state.indent[pos];
        };
      }
    });
  }
});

// mode/dockerfile/dockerfile.js
var require_dockerfile = __commonJS({
  "mode/dockerfile/dockerfile.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror(), require_simple());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror", "../../addon/mode/simple"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      var from = "from";
      var fromRegex = new RegExp("^(\\s*)\\b(" + from + ")\\b", "i");
      var shells = ["run", "cmd", "entrypoint", "shell"];
      var shellsAsArrayRegex = new RegExp("^(\\s*)(" + shells.join("|") + ")(\\s+\\[)", "i");
      var expose = "expose";
      var exposeRegex = new RegExp("^(\\s*)(" + expose + ")(\\s+)", "i");
      var others = [
        "arg",
        "from",
        "maintainer",
        "label",
        "env",
        "add",
        "copy",
        "volume",
        "user",
        "workdir",
        "onbuild",
        "stopsignal",
        "healthcheck",
        "shell"
      ];
      var instructions = [from, expose].concat(shells).concat(others), instructionRegex = "(" + instructions.join("|") + ")", instructionOnlyLine = new RegExp("^(\\s*)" + instructionRegex + "(\\s*)(#.*)?$", "i"), instructionWithArguments = new RegExp("^(\\s*)" + instructionRegex + "(\\s+)", "i");
      CodeMirror2.defineSimpleMode("dockerfile", {
        start: [
          // Block comment: This is a line starting with a comment
          {
            regex: /^\s*#.*$/,
            sol: true,
            token: "comment"
          },
          {
            regex: fromRegex,
            token: [null, "keyword"],
            sol: true,
            next: "from"
          },
          // Highlight an instruction without any arguments (for convenience)
          {
            regex: instructionOnlyLine,
            token: [null, "keyword", null, "error"],
            sol: true
          },
          {
            regex: shellsAsArrayRegex,
            token: [null, "keyword", null],
            sol: true,
            next: "array"
          },
          {
            regex: exposeRegex,
            token: [null, "keyword", null],
            sol: true,
            next: "expose"
          },
          // Highlight an instruction followed by arguments
          {
            regex: instructionWithArguments,
            token: [null, "keyword", null],
            sol: true,
            next: "arguments"
          },
          {
            regex: /./,
            token: null
          }
        ],
        from: [
          {
            regex: /\s*$/,
            token: null,
            next: "start"
          },
          {
            // Line comment without instruction arguments is an error
            regex: /(\s*)(#.*)$/,
            token: [null, "error"],
            next: "start"
          },
          {
            regex: /(\s*\S+\s+)(as)/i,
            token: [null, "keyword"],
            next: "start"
          },
          // Fail safe return to start
          {
            token: null,
            next: "start"
          }
        ],
        single: [
          {
            regex: /(?:[^\\']|\\.)/,
            token: "string"
          },
          {
            regex: /'/,
            token: "string",
            pop: true
          }
        ],
        double: [
          {
            regex: /(?:[^\\"]|\\.)/,
            token: "string"
          },
          {
            regex: /"/,
            token: "string",
            pop: true
          }
        ],
        array: [
          {
            regex: /\]/,
            token: null,
            next: "start"
          },
          {
            regex: /"(?:[^\\"]|\\.)*"?/,
            token: "string"
          }
        ],
        expose: [
          {
            regex: /\d+$/,
            token: "number",
            next: "start"
          },
          {
            regex: /[^\d]+$/,
            token: null,
            next: "start"
          },
          {
            regex: /\d+/,
            token: "number"
          },
          {
            regex: /[^\d]+/,
            token: null
          },
          // Fail safe return to start
          {
            token: null,
            next: "start"
          }
        ],
        arguments: [
          {
            regex: /^\s*#.*$/,
            sol: true,
            token: "comment"
          },
          {
            regex: /"(?:[^\\"]|\\.)*"?$/,
            token: "string",
            next: "start"
          },
          {
            regex: /"/,
            token: "string",
            push: "double"
          },
          {
            regex: /'(?:[^\\']|\\.)*'?$/,
            token: "string",
            next: "start"
          },
          {
            regex: /'/,
            token: "string",
            push: "single"
          },
          {
            regex: /[^#"']+[\\`]$/,
            token: null
          },
          {
            regex: /[^#"']+$/,
            token: null,
            next: "start"
          },
          {
            regex: /[^#"']+/,
            token: null
          },
          // Fail safe return to start
          {
            token: null,
            next: "start"
          }
        ],
        meta: {
          lineComment: "#"
        }
      });
      CodeMirror2.defineMIME("text/x-dockerfile", "dockerfile");
    });
  }
});

// mode/dtd/dtd.js
var require_dtd = __commonJS({
  "mode/dtd/dtd.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("dtd", function(config) {
        var indentUnit = config.indentUnit, type;
        function ret(style, tp) {
          type = tp;
          return style;
        }
        function tokenBase(stream, state) {
          var ch = stream.next();
          if (ch == "<" && stream.eat("!")) {
            if (stream.eatWhile(/[\-]/)) {
              state.tokenize = tokenSGMLComment;
              return tokenSGMLComment(stream, state);
            } else if (stream.eatWhile(/[\w]/))
              return ret("keyword", "doindent");
          } else if (ch == "<" && stream.eat("?")) {
            state.tokenize = inBlock("meta", "?>");
            return ret("meta", ch);
          } else if (ch == "#" && stream.eatWhile(/[\w]/))
            return ret("atom", "tag");
          else if (ch == "|")
            return ret("keyword", "seperator");
          else if (ch.match(/[\(\)\[\]\-\.,\+\?>]/))
            return ret(null, ch);
          else if (ch.match(/[\[\]]/))
            return ret("rule", ch);
          else if (ch == '"' || ch == "'") {
            state.tokenize = tokenString(ch);
            return state.tokenize(stream, state);
          } else if (stream.eatWhile(/[a-zA-Z\?\+\d]/)) {
            var sc = stream.current();
            if (sc.substr(sc.length - 1, sc.length).match(/\?|\+/) !== null)
              stream.backUp(1);
            return ret("tag", "tag");
          } else if (ch == "%" || ch == "*")
            return ret("number", "number");
          else {
            stream.eatWhile(/[\w\\\-_%.{,]/);
            return ret(null, null);
          }
        }
        function tokenSGMLComment(stream, state) {
          var dashes = 0, ch;
          while ((ch = stream.next()) != null) {
            if (dashes >= 2 && ch == ">") {
              state.tokenize = tokenBase;
              break;
            }
            dashes = ch == "-" ? dashes + 1 : 0;
          }
          return ret("comment", "comment");
        }
        function tokenString(quote) {
          return function(stream, state) {
            var escaped = false, ch;
            while ((ch = stream.next()) != null) {
              if (ch == quote && !escaped) {
                state.tokenize = tokenBase;
                break;
              }
              escaped = !escaped && ch == "\\";
            }
            return ret("string", "tag");
          };
        }
        function inBlock(style, terminator) {
          return function(stream, state) {
            while (!stream.eol()) {
              if (stream.match(terminator)) {
                state.tokenize = tokenBase;
                break;
              }
              stream.next();
            }
            return style;
          };
        }
        return {
          startState: function(base) {
            return {
              tokenize: tokenBase,
              baseIndent: base || 0,
              stack: []
            };
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            var style = state.tokenize(stream, state);
            var context = state.stack[state.stack.length - 1];
            if (stream.current() == "[" || type === "doindent" || type == "[")
              state.stack.push("rule");
            else if (type === "endtag")
              state.stack[state.stack.length - 1] = "endtag";
            else if (stream.current() == "]" || type == "]" || type == ">" && context == "rule")
              state.stack.pop();
            else if (type == "[")
              state.stack.push("[");
            return style;
          },
          indent: function(state, textAfter) {
            var n = state.stack.length;
            if (textAfter.match(/\]\s+|\]/))
              n = n - 1;
            else if (textAfter.substr(textAfter.length - 1, textAfter.length) === ">") {
              if (textAfter.substr(0, 1) === "<") {
              } else if (type == "doindent" && textAfter.length > 1) {
              } else if (type == "doindent")
                n--;
              else if (type == ">" && textAfter.length > 1) {
              } else if (type == "tag" && textAfter !== ">") {
              } else if (type == "tag" && state.stack[state.stack.length - 1] == "rule")
                n--;
              else if (type == "tag")
                n++;
              else if (textAfter === ">" && state.stack[state.stack.length - 1] == "rule" && type === ">")
                n--;
              else if (textAfter === ">" && state.stack[state.stack.length - 1] == "rule") {
              } else if (textAfter.substr(0, 1) !== "<" && textAfter.substr(0, 1) === ">")
                n = n - 1;
              else if (textAfter === ">") {
              } else
                n = n - 1;
              if (type == null || type == "]")
                n--;
            }
            return state.baseIndent + n * indentUnit;
          },
          electricChars: "]>"
        };
      });
      CodeMirror2.defineMIME("application/xml-dtd", "dtd");
    });
  }
});

// mode/dylan/dylan.js
var require_dylan = __commonJS({
  "mode/dylan/dylan.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      function forEach(arr, f) {
        for (var i = 0; i < arr.length; i++)
          f(arr[i], i);
      }
      function some(arr, f) {
        for (var i = 0; i < arr.length; i++)
          if (f(arr[i], i))
            return true;
        return false;
      }
      CodeMirror2.defineMode("dylan", function(_config) {
        var words = {
          // Words that introduce unnamed definitions like "define interface"
          unnamedDefinition: ["interface"],
          // Words that introduce simple named definitions like "define library"
          namedDefinition: [
            "module",
            "library",
            "macro",
            "C-struct",
            "C-union",
            "C-function",
            "C-callable-wrapper"
          ],
          // Words that introduce type definitions like "define class".
          // These are also parameterized like "define method" and are
          // appended to otherParameterizedDefinitionWords
          typeParameterizedDefinition: ["class", "C-subtype", "C-mapped-subtype"],
          // Words that introduce trickier definitions like "define method".
          // These require special definitions to be added to startExpressions
          otherParameterizedDefinition: [
            "method",
            "function",
            "C-variable",
            "C-address"
          ],
          // Words that introduce module constant definitions.
          // These must also be simple definitions and are
          // appended to otherSimpleDefinitionWords
          constantSimpleDefinition: ["constant"],
          // Words that introduce module variable definitions.
          // These must also be simple definitions and are
          // appended to otherSimpleDefinitionWords
          variableSimpleDefinition: ["variable"],
          // Other words that introduce simple definitions
          // (without implicit bodies).
          otherSimpleDefinition: [
            "generic",
            "domain",
            "C-pointer-type",
            "table"
          ],
          // Words that begin statements with implicit bodies.
          statement: [
            "if",
            "block",
            "begin",
            "method",
            "case",
            "for",
            "select",
            "when",
            "unless",
            "until",
            "while",
            "iterate",
            "profiling",
            "dynamic-bind"
          ],
          // Patterns that act as separators in compound statements.
          // This may include any general pattern that must be indented
          // specially.
          separator: [
            "finally",
            "exception",
            "cleanup",
            "else",
            "elseif",
            "afterwards"
          ],
          // Keywords that do not require special indentation handling,
          // but which should be highlighted
          other: [
            "above",
            "below",
            "by",
            "from",
            "handler",
            "in",
            "instance",
            "let",
            "local",
            "otherwise",
            "slot",
            "subclass",
            "then",
            "to",
            "keyed-by",
            "virtual"
          ],
          // Condition signaling function calls
          signalingCalls: [
            "signal",
            "error",
            "cerror",
            "break",
            "check-type",
            "abort"
          ]
        };
        words["otherDefinition"] = words["unnamedDefinition"].concat(words["namedDefinition"]).concat(words["otherParameterizedDefinition"]);
        words["definition"] = words["typeParameterizedDefinition"].concat(words["otherDefinition"]);
        words["parameterizedDefinition"] = words["typeParameterizedDefinition"].concat(words["otherParameterizedDefinition"]);
        words["simpleDefinition"] = words["constantSimpleDefinition"].concat(words["variableSimpleDefinition"]).concat(words["otherSimpleDefinition"]);
        words["keyword"] = words["statement"].concat(words["separator"]).concat(words["other"]);
        var symbolPattern = "[-_a-zA-Z?!*@<>$%]+";
        var symbol = new RegExp("^" + symbolPattern);
        var patterns = {
          // Symbols with special syntax
          symbolKeyword: symbolPattern + ":",
          symbolClass: "<" + symbolPattern + ">",
          symbolGlobal: "\\*" + symbolPattern + "\\*",
          symbolConstant: "\\$" + symbolPattern
        };
        var patternStyles = {
          symbolKeyword: "atom",
          symbolClass: "tag",
          symbolGlobal: "variable-2",
          symbolConstant: "variable-3"
        };
        for (var patternName in patterns)
          if (patterns.hasOwnProperty(patternName))
            patterns[patternName] = new RegExp("^" + patterns[patternName]);
        patterns["keyword"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];
        var styles = {};
        styles["keyword"] = "keyword";
        styles["definition"] = "def";
        styles["simpleDefinition"] = "def";
        styles["signalingCalls"] = "builtin";
        var wordLookup = {};
        var styleLookup = {};
        forEach([
          "keyword",
          "definition",
          "simpleDefinition",
          "signalingCalls"
        ], function(type) {
          forEach(words[type], function(word) {
            wordLookup[word] = type;
            styleLookup[word] = styles[type];
          });
        });
        function chain(stream, state, f) {
          state.tokenize = f;
          return f(stream, state);
        }
        function tokenBase(stream, state) {
          var ch = stream.peek();
          if (ch == "'" || ch == '"') {
            stream.next();
            return chain(stream, state, tokenString(ch, "string"));
          } else if (ch == "/") {
            stream.next();
            if (stream.eat("*")) {
              return chain(stream, state, tokenComment);
            } else if (stream.eat("/")) {
              stream.skipToEnd();
              return "comment";
            }
            stream.backUp(1);
          } else if (/[+\-\d\.]/.test(ch)) {
            if (stream.match(/^[+-]?[0-9]*\.[0-9]*([esdx][+-]?[0-9]+)?/i) || stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) || stream.match(/^[+-]?\d+/)) {
              return "number";
            }
          } else if (ch == "#") {
            stream.next();
            ch = stream.peek();
            if (ch == '"') {
              stream.next();
              return chain(stream, state, tokenString('"', "string"));
            } else if (ch == "b") {
              stream.next();
              stream.eatWhile(/[01]/);
              return "number";
            } else if (ch == "x") {
              stream.next();
              stream.eatWhile(/[\da-f]/i);
              return "number";
            } else if (ch == "o") {
              stream.next();
              stream.eatWhile(/[0-7]/);
              return "number";
            } else if (ch == "#") {
              stream.next();
              return "punctuation";
            } else if (ch == "[" || ch == "(") {
              stream.next();
              return "bracket";
            } else if (stream.match(/f|t|all-keys|include|key|next|rest/i)) {
              return "atom";
            } else {
              stream.eatWhile(/[-a-zA-Z]/);
              return "error";
            }
          } else if (ch == "~") {
            stream.next();
            ch = stream.peek();
            if (ch == "=") {
              stream.next();
              ch = stream.peek();
              if (ch == "=") {
                stream.next();
                return "operator";
              }
              return "operator";
            }
            return "operator";
          } else if (ch == ":") {
            stream.next();
            ch = stream.peek();
            if (ch == "=") {
              stream.next();
              return "operator";
            } else if (ch == ":") {
              stream.next();
              return "punctuation";
            }
          } else if ("[](){}".indexOf(ch) != -1) {
            stream.next();
            return "bracket";
          } else if (".,".indexOf(ch) != -1) {
            stream.next();
            return "punctuation";
          } else if (stream.match("end")) {
            return "keyword";
          }
          for (var name in patterns) {
            if (patterns.hasOwnProperty(name)) {
              var pattern = patterns[name];
              if (pattern instanceof Array && some(pattern, function(p) {
                return stream.match(p);
              }) || stream.match(pattern))
                return patternStyles[name];
            }
          }
          if (/[+\-*\/^=<>&|]/.test(ch)) {
            stream.next();
            return "operator";
          }
          if (stream.match("define")) {
            return "def";
          } else {
            stream.eatWhile(/[\w\-]/);
            if (wordLookup.hasOwnProperty(stream.current())) {
              return styleLookup[stream.current()];
            } else if (stream.current().match(symbol)) {
              return "variable";
            } else {
              stream.next();
              return "variable-2";
            }
          }
        }
        function tokenComment(stream, state) {
          var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;
          while (ch = stream.next()) {
            if (ch == "/" && maybeEnd) {
              if (nestedCount > 0) {
                nestedCount--;
              } else {
                state.tokenize = tokenBase;
                break;
              }
            } else if (ch == "*" && maybeNested) {
              nestedCount++;
            }
            maybeEnd = ch == "*";
            maybeNested = ch == "/";
          }
          return "comment";
        }
        function tokenString(quote, style) {
          return function(stream, state) {
            var escaped = false, next, end = false;
            while ((next = stream.next()) != null) {
              if (next == quote && !escaped) {
                end = true;
                break;
              }
              escaped = !escaped && next == "\\";
            }
            if (end || !escaped) {
              state.tokenize = tokenBase;
            }
            return style;
          };
        }
        return {
          startState: function() {
            return {
              tokenize: tokenBase,
              currentIndent: 0
            };
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            var style = state.tokenize(stream, state);
            return style;
          },
          blockCommentStart: "/*",
          blockCommentEnd: "*/"
        };
      });
      CodeMirror2.defineMIME("text/x-dylan", "dylan");
    });
  }
});

// mode/ebnf/ebnf.js
var require_ebnf = __commonJS({
  "mode/ebnf/ebnf.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("ebnf", function(config) {
        var commentType = { slash: 0, parenthesis: 1 };
        var stateType = { comment: 0, _string: 1, characterClass: 2 };
        var bracesMode = null;
        if (config.bracesMode)
          bracesMode = CodeMirror2.getMode(config, config.bracesMode);
        return {
          startState: function() {
            return {
              stringType: null,
              commentType: null,
              braced: 0,
              lhs: true,
              localState: null,
              stack: [],
              inDefinition: false
            };
          },
          token: function(stream, state) {
            if (!stream)
              return;
            if (state.stack.length === 0) {
              if (stream.peek() == '"' || stream.peek() == "'") {
                state.stringType = stream.peek();
                stream.next();
                state.stack.unshift(stateType._string);
              } else if (stream.match(/^\/\*/)) {
                state.stack.unshift(stateType.comment);
                state.commentType = commentType.slash;
              } else if (stream.match(/^\(\*/)) {
                state.stack.unshift(stateType.comment);
                state.commentType = commentType.parenthesis;
              }
            }
            switch (state.stack[0]) {
              case stateType._string:
                while (state.stack[0] === stateType._string && !stream.eol()) {
                  if (stream.peek() === state.stringType) {
                    stream.next();
                    state.stack.shift();
                  } else if (stream.peek() === "\\") {
                    stream.next();
                    stream.next();
                  } else {
                    stream.match(/^.[^\\\"\']*/);
                  }
                }
                return state.lhs ? "property string" : "string";
              case stateType.comment:
                while (state.stack[0] === stateType.comment && !stream.eol()) {
                  if (state.commentType === commentType.slash && stream.match(/\*\//)) {
                    state.stack.shift();
                    state.commentType = null;
                  } else if (state.commentType === commentType.parenthesis && stream.match(/\*\)/)) {
                    state.stack.shift();
                    state.commentType = null;
                  } else {
                    stream.match(/^.[^\*]*/);
                  }
                }
                return "comment";
              case stateType.characterClass:
                while (state.stack[0] === stateType.characterClass && !stream.eol()) {
                  if (!(stream.match(/^[^\]\\]+/) || stream.match(/^\\./))) {
                    state.stack.shift();
                  }
                }
                return "operator";
            }
            var peek = stream.peek();
            if (bracesMode !== null && (state.braced || peek === "{")) {
              if (state.localState === null)
                state.localState = CodeMirror2.startState(bracesMode);
              var token = bracesMode.token(stream, state.localState), text = stream.current();
              if (!token) {
                for (var i = 0; i < text.length; i++) {
                  if (text[i] === "{") {
                    if (state.braced === 0) {
                      token = "matchingbracket";
                    }
                    state.braced++;
                  } else if (text[i] === "}") {
                    state.braced--;
                    if (state.braced === 0) {
                      token = "matchingbracket";
                    }
                  }
                }
              }
              return token;
            }
            switch (peek) {
              case "[":
                stream.next();
                state.stack.unshift(stateType.characterClass);
                return "bracket";
              case ":":
              case "|":
              case ";":
                stream.next();
                return "operator";
              case "%":
                if (stream.match("%%")) {
                  return "header";
                } else if (stream.match(/[%][A-Za-z]+/)) {
                  return "keyword";
                } else if (stream.match(/[%][}]/)) {
                  return "matchingbracket";
                }
                break;
              case "/":
                if (stream.match(/[\/][A-Za-z]+/)) {
                  return "keyword";
                }
              case "\\":
                if (stream.match(/[\][a-z]+/)) {
                  return "string-2";
                }
              case ".":
                if (stream.match(".")) {
                  return "atom";
                }
              case "*":
              case "-":
              case "+":
              case "^":
                if (stream.match(peek)) {
                  return "atom";
                }
              case "$":
                if (stream.match("$$")) {
                  return "builtin";
                } else if (stream.match(/[$][0-9]+/)) {
                  return "variable-3";
                }
              case "<":
                if (stream.match(/<<[a-zA-Z_]+>>/)) {
                  return "builtin";
                }
            }
            if (stream.match(/^\/\//)) {
              stream.skipToEnd();
              return "comment";
            } else if (stream.match(/return/)) {
              return "operator";
            } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {
              if (stream.match(/(?=[\(.])/)) {
                return "variable";
              } else if (stream.match(/(?=[\s\n]*[:=])/)) {
                return "def";
              }
              return "variable-2";
            } else if (["[", "]", "(", ")"].indexOf(stream.peek()) != -1) {
              stream.next();
              return "bracket";
            } else if (!stream.eatSpace()) {
              stream.next();
            }
            return null;
          }
        };
      });
      CodeMirror2.defineMIME("text/x-ebnf", "ebnf");
    });
  }
});

// mode/ecl/ecl.js
var require_ecl = __commonJS({
  "mode/ecl/ecl.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("ecl", function(config) {
        function words(str) {
          var obj = {}, words2 = str.split(" ");
          for (var i = 0; i < words2.length; ++i)
            obj[words2[i]] = true;
          return obj;
        }
        function metaHook(stream, state) {
          if (!state.startOfLine)
            return false;
          stream.skipToEnd();
          return "meta";
        }
        var indentUnit = config.indentUnit;
        var keyword = words("abs acos allnodes ascii asin asstring atan atan2 ave case choose choosen choosesets clustersize combine correlation cos cosh count covariance cron dataset dedup define denormalize distribute distributed distribution ebcdic enth error evaluate event eventextra eventname exists exp failcode failmessage fetch fromunicode getisvalid global graph group hash hash32 hash64 hashcrc hashmd5 having if index intformat isvalid iterate join keyunicode length library limit ln local log loop map matched matchlength matchposition matchtext matchunicode max merge mergejoin min nolocal nonempty normalize parse pipe power preload process project pull random range rank ranked realformat recordof regexfind regexreplace regroup rejected rollup round roundup row rowdiff sample set sin sinh sizeof soapcall sort sorted sqrt stepped stored sum table tan tanh thisnode topn tounicode transfer trim truncate typeof ungroup unicodeorder variance which workunit xmldecode xmlencode xmltext xmlunicode");
        var variable = words("apply assert build buildindex evaluate fail keydiff keypatch loadxml nothor notify output parallel sequential soapcall wait");
        var variable_2 = words("__compressed__ all and any as atmost before beginc++ best between case const counter csv descend encrypt end endc++ endmacro except exclusive expire export extend false few first flat from full function group header heading hole ifblock import in interface joined keep keyed last left limit load local locale lookup macro many maxcount maxlength min skew module named nocase noroot noscan nosort not of only opt or outer overwrite packed partition penalty physicallength pipe quote record relationship repeat return right scan self separator service shared skew skip sql store terminator thor threshold token transform trim true type unicodeorder unsorted validate virtual whole wild within xml xpath");
        var variable_3 = words("ascii big_endian boolean data decimal ebcdic integer pattern qstring real record rule set of string token udecimal unicode unsigned varstring varunicode");
        var builtin = words("checkpoint deprecated failcode failmessage failure global independent onwarning persist priority recovery stored success wait when");
        var blockKeywords = words("catch class do else finally for if switch try while");
        var atoms = words("true false null");
        var hooks = { "#": metaHook };
        var isOperatorChar = /[+\-*&%=<>!?|\/]/;
        var curPunc;
        function tokenBase(stream, state) {
          var ch = stream.next();
          if (hooks[ch]) {
            var result = hooks[ch](stream, state);
            if (result !== false)
              return result;
          }
          if (ch == '"' || ch == "'") {
            state.tokenize = tokenString(ch);
            return state.tokenize(stream, state);
          }
          if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
            curPunc = ch;
            return null;
          }
          if (/\d/.test(ch)) {
            stream.eatWhile(/[\w\.]/);
            return "number";
          }
          if (ch == "/") {
            if (stream.eat("*")) {
              state.tokenize = tokenComment;
              return tokenComment(stream, state);
            }
            if (stream.eat("/")) {
              stream.skipToEnd();
              return "comment";
            }
          }
          if (isOperatorChar.test(ch)) {
            stream.eatWhile(isOperatorChar);
            return "operator";
          }
          stream.eatWhile(/[\w\$_]/);
          var cur = stream.current().toLowerCase();
          if (keyword.propertyIsEnumerable(cur)) {
            if (blockKeywords.propertyIsEnumerable(cur))
              curPunc = "newstatement";
            return "keyword";
          } else if (variable.propertyIsEnumerable(cur)) {
            if (blockKeywords.propertyIsEnumerable(cur))
              curPunc = "newstatement";
            return "variable";
          } else if (variable_2.propertyIsEnumerable(cur)) {
            if (blockKeywords.propertyIsEnumerable(cur))
              curPunc = "newstatement";
            return "variable-2";
          } else if (variable_3.propertyIsEnumerable(cur)) {
            if (blockKeywords.propertyIsEnumerable(cur))
              curPunc = "newstatement";
            return "variable-3";
          } else if (builtin.propertyIsEnumerable(cur)) {
            if (blockKeywords.propertyIsEnumerable(cur))
              curPunc = "newstatement";
            return "builtin";
          } else {
            var i = cur.length - 1;
            while (i >= 0 && (!isNaN(cur[i]) || cur[i] == "_"))
              --i;
            if (i > 0) {
              var cur2 = cur.substr(0, i + 1);
              if (variable_3.propertyIsEnumerable(cur2)) {
                if (blockKeywords.propertyIsEnumerable(cur2))
                  curPunc = "newstatement";
                return "variable-3";
              }
            }
          }
          if (atoms.propertyIsEnumerable(cur))
            return "atom";
          return null;
        }
        function tokenString(quote) {
          return function(stream, state) {
            var escaped = false, next, end = false;
            while ((next = stream.next()) != null) {
              if (next == quote && !escaped) {
                end = true;
                break;
              }
              escaped = !escaped && next == "\\";
            }
            if (end || !escaped)
              state.tokenize = tokenBase;
            return "string";
          };
        }
        function tokenComment(stream, state) {
          var maybeEnd = false, ch;
          while (ch = stream.next()) {
            if (ch == "/" && maybeEnd) {
              state.tokenize = tokenBase;
              break;
            }
            maybeEnd = ch == "*";
          }
          return "comment";
        }
        function Context(indented, column, type, align, prev) {
          this.indented = indented;
          this.column = column;
          this.type = type;
          this.align = align;
          this.prev = prev;
        }
        function pushContext(state, col, type) {
          return state.context = new Context(state.indented, col, type, null, state.context);
        }
        function popContext(state) {
          var t = state.context.type;
          if (t == ")" || t == "]" || t == "}")
            state.indented = state.context.indented;
          return state.context = state.context.prev;
        }
        return {
          startState: function(basecolumn) {
            return {
              tokenize: null,
              context: new Context((basecolumn || 0) - indentUnit, 0, "top", false),
              indented: 0,
              startOfLine: true
            };
          },
          token: function(stream, state) {
            var ctx = state.context;
            if (stream.sol()) {
              if (ctx.align == null)
                ctx.align = false;
              state.indented = stream.indentation();
              state.startOfLine = true;
            }
            if (stream.eatSpace())
              return null;
            curPunc = null;
            var style = (state.tokenize || tokenBase)(stream, state);
            if (style == "comment" || style == "meta")
              return style;
            if (ctx.align == null)
              ctx.align = true;
            if ((curPunc == ";" || curPunc == ":") && ctx.type == "statement")
              popContext(state);
            else if (curPunc == "{")
              pushContext(state, stream.column(), "}");
            else if (curPunc == "[")
              pushContext(state, stream.column(), "]");
            else if (curPunc == "(")
              pushContext(state, stream.column(), ")");
            else if (curPunc == "}") {
              while (ctx.type == "statement")
                ctx = popContext(state);
              if (ctx.type == "}")
                ctx = popContext(state);
              while (ctx.type == "statement")
                ctx = popContext(state);
            } else if (curPunc == ctx.type)
              popContext(state);
            else if (ctx.type == "}" || ctx.type == "top" || ctx.type == "statement" && curPunc == "newstatement")
              pushContext(state, stream.column(), "statement");
            state.startOfLine = false;
            return style;
          },
          indent: function(state, textAfter) {
            if (state.tokenize != tokenBase && state.tokenize != null)
              return 0;
            var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
            if (ctx.type == "statement" && firstChar == "}")
              ctx = ctx.prev;
            var closing = firstChar == ctx.type;
            if (ctx.type == "statement")
              return ctx.indented + (firstChar == "{" ? 0 : indentUnit);
            else if (ctx.align)
              return ctx.column + (closing ? 0 : 1);
            else
              return ctx.indented + (closing ? 0 : indentUnit);
          },
          electricChars: "{}"
        };
      });
      CodeMirror2.defineMIME("text/x-ecl", "ecl");
    });
  }
});

// mode/eiffel/eiffel.js
var require_eiffel = __commonJS({
  "mode/eiffel/eiffel.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("eiffel", function() {
        function wordObj(words) {
          var o = {};
          for (var i = 0, e = words.length; i < e; ++i)
            o[words[i]] = true;
          return o;
        }
        var keywords = wordObj([
          "note",
          "across",
          "when",
          "variant",
          "until",
          "unique",
          "undefine",
          "then",
          "strip",
          "select",
          "retry",
          "rescue",
          "require",
          "rename",
          "reference",
          "redefine",
          "prefix",
          "once",
          "old",
          "obsolete",
          "loop",
          "local",
          "like",
          "is",
          "inspect",
          "infix",
          "include",
          "if",
          "frozen",
          "from",
          "external",
          "export",
          "ensure",
          "end",
          "elseif",
          "else",
          "do",
          "creation",
          "create",
          "check",
          "alias",
          "agent",
          "separate",
          "invariant",
          "inherit",
          "indexing",
          "feature",
          "expanded",
          "deferred",
          "class",
          "Void",
          "True",
          "Result",
          "Precursor",
          "False",
          "Current",
          "create",
          "attached",
          "detachable",
          "as",
          "and",
          "implies",
          "not",
          "or"
        ]);
        var operators = wordObj([":=", "and then", "and", "or", "<<", ">>"]);
        function chain(newtok, stream, state) {
          state.tokenize.push(newtok);
          return newtok(stream, state);
        }
        function tokenBase(stream, state) {
          if (stream.eatSpace())
            return null;
          var ch = stream.next();
          if (ch == '"' || ch == "'") {
            return chain(readQuoted(ch, "string"), stream, state);
          } else if (ch == "-" && stream.eat("-")) {
            stream.skipToEnd();
            return "comment";
          } else if (ch == ":" && stream.eat("=")) {
            return "operator";
          } else if (/[0-9]/.test(ch)) {
            stream.eatWhile(/[xXbBCc0-9\.]/);
            stream.eat(/[\?\!]/);
            return "ident";
          } else if (/[a-zA-Z_0-9]/.test(ch)) {
            stream.eatWhile(/[a-zA-Z_0-9]/);
            stream.eat(/[\?\!]/);
            return "ident";
          } else if (/[=+\-\/*^%<>~]/.test(ch)) {
            stream.eatWhile(/[=+\-\/*^%<>~]/);
            return "operator";
          } else {
            return null;
          }
        }
        function readQuoted(quote, style, unescaped) {
          return function(stream, state) {
            var escaped = false, ch;
            while ((ch = stream.next()) != null) {
              if (ch == quote && (unescaped || !escaped)) {
                state.tokenize.pop();
                break;
              }
              escaped = !escaped && ch == "%";
            }
            return style;
          };
        }
        return {
          startState: function() {
            return { tokenize: [tokenBase] };
          },
          token: function(stream, state) {
            var style = state.tokenize[state.tokenize.length - 1](stream, state);
            if (style == "ident") {
              var word = stream.current();
              style = keywords.propertyIsEnumerable(stream.current()) ? "keyword" : operators.propertyIsEnumerable(stream.current()) ? "operator" : /^[A-Z][A-Z_0-9]*$/g.test(word) ? "tag" : /^0[bB][0-1]+$/g.test(word) ? "number" : /^0[cC][0-7]+$/g.test(word) ? "number" : /^0[xX][a-fA-F0-9]+$/g.test(word) ? "number" : /^([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+)$/g.test(word) ? "number" : /^[0-9]+$/g.test(word) ? "number" : "variable";
            }
            return style;
          },
          lineComment: "--"
        };
      });
      CodeMirror2.defineMIME("text/x-eiffel", "eiffel");
    });
  }
});

// mode/elixir/elixir.js
var require_elixir = __commonJS({
  "mode/elixir/elixir.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports === "object" && typeof module2 === "object")
        mod(require_codemirror());
      else if (typeof define === "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("elixir", (config) => {
        const wordObj = (words) => {
          let o = {};
          for (var i = 0, e = words.length; i < e; ++i)
            o[words[i]] = true;
          return o;
        };
        const keywords = wordObj([
          "alias",
          "case",
          "cond",
          "def",
          "defmodule",
          "defp",
          "defstruct",
          "defprotocol",
          "defimpl",
          "defmacro",
          "quote",
          "unquote",
          "receive",
          "fn",
          "do",
          "else",
          "else if",
          "end",
          "false",
          "if",
          "in",
          "next",
          "rescue",
          "for",
          "true",
          "unless",
          "when",
          "nil",
          "raise",
          "throw",
          "try",
          "catch",
          "after",
          "with",
          "require",
          "use",
          "__MODULE__",
          "__FILE__",
          "__DIR__",
          "__ENV__",
          "__CALLER__"
        ]);
        const indentWords = wordObj([
          "def",
          "defmodule",
          "defp",
          "case",
          "cond",
          "rescue",
          "try",
          "catch",
          "->"
        ]);
        const dedentWords = wordObj(["end"]);
        const matching = { "[": "]", "{": "}", "(": ")" };
        let curPunc;
        const chain = (newtok, stream, state) => {
          state.tokenize.push(newtok);
          return newtok(stream, state);
        };
        const tokenBase = (stream, state) => {
          if (stream.sol() && stream.match('"""') && stream.eol()) {
            state.tokenize.push(readBlockComment);
            return "comment";
          }
          if (stream.eatSpace()) {
            return null;
          }
          let ch = stream.next();
          let m;
          if (ch === "'" || ch === '"') {
            return chain(readQuoted(ch, "string", ch === '"'), stream, state);
          } else if (ch === "/") {
            let currentIndex = stream.current().length;
            if (stream.skipTo("/")) {
              let searchTill = stream.current().length;
              let balance = 0;
              stream.backUp(stream.current().length - currentIndex);
              while (stream.current().length < searchTill) {
                const chchr = stream.next();
                if (chchr === "(") {
                  balance += 1;
                } else if (chchr === ")") {
                  balance -= 1;
                }
                if (balance < 0) {
                  break;
                }
              }
              stream.backUp(stream.current().length - currentIndex);
              if (balance === 0) {
                return chain(readQuoted(ch, "string-2", true), stream, state);
              }
            }
            return "operator";
          } else if (ch === "%") {
            let style = "string";
            let embed = true;
            if (stream.eat("s")) {
              style = "atom";
            } else if (stream.eat(/[WQ]/)) {
              style = "string";
            } else if (stream.eat(/[r]/)) {
              style = "string-2";
            } else if (stream.eat(/[wxq]/)) {
              style = "string";
              embed = false;
            }
            let delim = stream.eat(/[^\w\s=]/);
            if (!delim) {
              return "operator";
            }
            if (matching.propertyIsEnumerable(delim)) {
              delim = matching[delim];
            }
            return chain(readQuoted(delim, style, embed, true), stream, state);
          } else if (ch === "#") {
            stream.skipToEnd();
            return "comment";
          } else if (ch === "<" && (m = stream.match(/^<-?[\`\"\']?([a-zA-Z_?]\w*)[\`\"\']?(?:;|$)/))) {
            return chain(readHereDoc(m[1]), stream, state);
          } else if (ch === "0") {
            if (stream.eat("x")) {
              stream.eatWhile(/[\da-fA-F]/);
            } else if (stream.eat("b")) {
              stream.eatWhile(/[01]/);
            } else {
              stream.eatWhile(/[0-7]/);
            }
            return "number";
          } else if (/\d/.test(ch)) {
            stream.match(/^[\d_]*(?:\.[\d_]+)?(?:[eE][+\-]?[\d_]+)?/);
            return "number";
          } else if (ch === "?") {
            while (stream.match(/^\\[CM]-/)) {
            }
            if (stream.eat("\\")) {
              stream.eatWhile(/\w/);
            } else {
              stream.next();
            }
            return "string";
          } else if (ch === ":") {
            if (stream.eat("'")) {
              return chain(readQuoted("'", "atom", false), stream, state);
            }
            if (stream.eat('"')) {
              return chain(readQuoted('"', "atom", true), stream, state);
            }
            if (stream.eat(/[\<\>]/)) {
              stream.eat(/[\<\>]/);
              return "atom";
            }
            if (stream.eat(/[\+\-\*\/\&\|\:\!]/)) {
              return "atom";
            }
            if (stream.eat(/[a-zA-Z$@_\xa1-\uffff]/)) {
              stream.eatWhile(/[\w$\xa1-\uffff]/);
              stream.eat(/[\?\!\=]/);
              return "atom";
            }
            return "operator";
          } else if (ch === "@" && stream.match(/^@?[a-zA-Z_\xa1-\uffff]/)) {
            stream.eat("@");
            stream.eatWhile(/[\w\xa1-\uffff]/);
            return "variable-2";
          } else if (ch === "$") {
            if (stream.eat(/[a-zA-Z_]/)) {
              stream.eatWhile(/[\w]/);
            } else if (stream.eat(/\d/)) {
              stream.eat(/\d/);
            } else {
              stream.next();
            }
            return "variable-3";
          } else if (/[a-zA-Z_\xa1-\uffff]/.test(ch)) {
            stream.eatWhile(/[\w\xa1-\uffff]/);
            stream.eat(/[\?\!]/);
            if (stream.eat(":")) {
              return "atom";
            }
            return "ident";
          } else if (ch === "|" && (state.varList || state.lastTok === "{" || state.lastTok === "do")) {
            curPunc = "|";
            return null;
          } else if (/[\(\)\[\]{}\\;]/.test(ch)) {
            curPunc = ch;
            return null;
          } else if (ch === "-" && stream.eat(">")) {
            return "arrow";
          } else if (ch === "|" && stream.eat(">")) {
            return "pipe";
          } else if (/[=+\-\/*:\.^%<>~|]/.test(ch)) {
            if (ch === "." && !stream.eatWhile(/[=+\-\/*:\.^%<>~|]/)) {
              curPunc = ".";
            }
            return "operator";
          } else {
            return null;
          }
        };
        const tokenBaseUntilBrace = (depth) => {
          if (!depth) {
            depth = 1;
          }
          return (stream, state) => {
            if (stream.peek() === "}") {
              if (depth === 1) {
                state.tokenize.pop();
                return state.tokenize[state.tokenize.length - 1](stream, state);
              } else {
                state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth - 1);
              }
            } else if (stream.peek() === "{") {
              state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth + 1);
            }
            return tokenBase(stream, state);
          };
        };
        const tokenBaseOnce = () => {
          let alreadyCalled = false;
          return (stream, state) => {
            if (alreadyCalled) {
              state.tokenize.pop();
              return state.tokenize[state.tokenize.length - 1](stream, state);
            }
            alreadyCalled = true;
            return tokenBase(stream, state);
          };
        };
        const readQuoted = (quote, style, embed, unescaped) => {
          return (stream, state) => {
            let escaped = false;
            let ch;
            if (state.context.type === "read-quoted-paused") {
              state.context = state.context.prev;
              stream.eat("}");
            }
            while ((ch = stream.next()) != null) {
              if (ch === quote && (unescaped || !escaped)) {
                state.tokenize.pop();
                break;
              }
              if (embed && ch === "#" && !escaped) {
                if (stream.eat("{")) {
                  if (quote === "}") {
                    state.context = { prev: state.context, type: "read-quoted-paused" };
                  }
                  state.tokenize.push(tokenBaseUntilBrace());
                  break;
                } else if (/[@\$]/.test(stream.peek())) {
                  state.tokenize.push(tokenBaseOnce());
                  break;
                }
              }
              escaped = !escaped && ch === "\\";
            }
            return style;
          };
        };
        const readHereDoc = (phrase) => {
          return (stream, state) => {
            if (stream.match(phrase)) {
              state.tokenize.pop();
            } else {
              stream.skipToEnd();
            }
            return "string";
          };
        };
        const readBlockComment = (stream, state) => {
          if (stream.sol() && stream.match('"""') && stream.eol()) {
            state.tokenize.pop();
          }
          stream.skipToEnd();
          return "comment";
        };
        return {
          startState: () => {
            return {
              tokenize: [tokenBase],
              indented: 0,
              context: { type: "top", indented: -config.indentUnit },
              continuedLine: false,
              lastTok: null,
              varList: false
            };
          },
          token: (stream, state) => {
            curPunc = null;
            let style = state.tokenize[state.tokenize.length - 1](stream, state);
            let kwtype;
            let thisTok = curPunc;
            if (style === "ident") {
              let word = stream.current();
              style = state.lastTok === "." ? "property" : keywords.propertyIsEnumerable(stream.current()) ? "keyword" : /^[A-Z]/.test(word) ? "tag" : state.lastTok === "def" || state.lastTok === "class" || state.varList ? "def" : "variable";
              const isColumnIndent = stream.column() === stream.indentation();
              if (style === "keyword") {
                thisTok = word;
                if (indentWords.propertyIsEnumerable(word)) {
                  kwtype = "indent";
                } else if (dedentWords.propertyIsEnumerable(word)) {
                  kwtype = "dedent";
                } else if ((word === "if" || word === "unless") && isColumnIndent) {
                  kwtype = "indent";
                } else if (word === "do" && state.context.indented < state.indented) {
                  kwtype = "indent";
                }
              }
            }
            if (curPunc || style && style !== "comment") {
              state.lastTok = thisTok;
            }
            if (curPunc === "|") {
              state.varList = !state.varList;
            }
            if (kwtype === "indent" || /[\(\[\{]/.test(curPunc)) {
              state.context = {
                prev: state.context,
                type: curPunc || style,
                indented: state.indented
              };
            } else if ((kwtype === "dedent" || /[\)\]\}]/.test(curPunc)) && state.context.prev) {
              state.context = state.context.prev;
            }
            if (stream.eol()) {
              state.continuedLine = curPunc === "\\" || style === "operator";
            }
            return style;
          },
          // indent: (state, textAfter) => {
          //   if (state.tokenize[state.tokenize.length - 1] !== tokenBase) {
          //     return 0
          //   }
          //   let firstChar = textAfter && textAfter.charAt(0)
          //   let ct = state.context
          //   let closing = ct.type === matching[firstChar] ||
          //     ct.type === 'keyword' && /^(?:end|until|else|else if|when|rescue)\b/.test(textAfter)
          //   return ct.indented + (closing ? 0 : config.indentUnit) +
          //     (state.continuedLine ? config.indentUnit : 0)
          // },
          electricInput: /^\s*(?:end|rescue|else if|else|catch\})$/,
          lineComment: "#"
        };
      });
      CodeMirror2.defineMIME("text/x-elixir", "elixir");
    });
  }
});

// mode/elm/elm.js
var require_elm = __commonJS({
  "mode/elm/elm.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("elm", function() {
        function switchState(source, setState, f) {
          setState(f);
          return f(source, setState);
        }
        var lowerRE = /[a-z]/;
        var upperRE = /[A-Z]/;
        var innerRE = /[a-zA-Z0-9_]/;
        var digitRE = /[0-9]/;
        var hexRE = /[0-9A-Fa-f]/;
        var symbolRE = /[-&*+.\\/<>=?^|:]/;
        var specialRE = /[(),[\]{}]/;
        var spacesRE = /[ \v\f]/;
        function normal() {
          return function(source, setState) {
            if (source.eatWhile(spacesRE)) {
              return null;
            }
            var char = source.next();
            if (specialRE.test(char)) {
              return char === "{" && source.eat("-") ? switchState(source, setState, chompMultiComment(1)) : char === "[" && source.match("glsl|") ? switchState(source, setState, chompGlsl) : "builtin";
            }
            if (char === "'") {
              return switchState(source, setState, chompChar);
            }
            if (char === '"') {
              return source.eat('"') ? source.eat('"') ? switchState(source, setState, chompMultiString) : "string" : switchState(source, setState, chompSingleString);
            }
            if (upperRE.test(char)) {
              source.eatWhile(innerRE);
              return "variable-2";
            }
            if (lowerRE.test(char)) {
              var isDef = source.pos === 1;
              source.eatWhile(innerRE);
              return isDef ? "def" : "variable";
            }
            if (digitRE.test(char)) {
              if (char === "0") {
                if (source.eat(/[xX]/)) {
                  source.eatWhile(hexRE);
                  return "number";
                }
              } else {
                source.eatWhile(digitRE);
              }
              if (source.eat(".")) {
                source.eatWhile(digitRE);
              }
              if (source.eat(/[eE]/)) {
                source.eat(/[-+]/);
                source.eatWhile(digitRE);
              }
              return "number";
            }
            if (symbolRE.test(char)) {
              if (char === "-" && source.eat("-")) {
                source.skipToEnd();
                return "comment";
              }
              source.eatWhile(symbolRE);
              return "keyword";
            }
            if (char === "_") {
              return "keyword";
            }
            return "error";
          };
        }
        function chompMultiComment(nest) {
          if (nest == 0) {
            return normal();
          }
          return function(source, setState) {
            while (!source.eol()) {
              var char = source.next();
              if (char == "{" && source.eat("-")) {
                ++nest;
              } else if (char == "-" && source.eat("}")) {
                --nest;
                if (nest === 0) {
                  setState(normal());
                  return "comment";
                }
              }
            }
            setState(chompMultiComment(nest));
            return "comment";
          };
        }
        function chompMultiString(source, setState) {
          while (!source.eol()) {
            var char = source.next();
            if (char === '"' && source.eat('"') && source.eat('"')) {
              setState(normal());
              return "string";
            }
          }
          return "string";
        }
        function chompSingleString(source, setState) {
          while (source.skipTo('\\"')) {
            source.next();
            source.next();
          }
          if (source.skipTo('"')) {
            source.next();
            setState(normal());
            return "string";
          }
          source.skipToEnd();
          setState(normal());
          return "error";
        }
        function chompChar(source, setState) {
          while (source.skipTo("\\'")) {
            source.next();
            source.next();
          }
          if (source.skipTo("'")) {
            source.next();
            setState(normal());
            return "string";
          }
          source.skipToEnd();
          setState(normal());
          return "error";
        }
        function chompGlsl(source, setState) {
          while (!source.eol()) {
            var char = source.next();
            if (char === "|" && source.eat("]")) {
              setState(normal());
              return "string";
            }
          }
          return "string";
        }
        var wellKnownWords = {
          case: 1,
          of: 1,
          as: 1,
          if: 1,
          then: 1,
          else: 1,
          let: 1,
          in: 1,
          type: 1,
          alias: 1,
          module: 1,
          where: 1,
          import: 1,
          exposing: 1,
          port: 1
        };
        return {
          startState: function() {
            return { f: normal() };
          },
          copyState: function(s) {
            return { f: s.f };
          },
          token: function(stream, state) {
            var type = state.f(stream, function(s) {
              state.f = s;
            });
            var word = stream.current();
            return wellKnownWords.hasOwnProperty(word) ? "keyword" : type;
          }
        };
      });
      CodeMirror2.defineMIME("text/x-elm", "elm");
    });
  }
});

// mode/erlang/erlang.js
var require_erlang = __commonJS({
  "mode/erlang/erlang.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMIME("text/x-erlang", "erlang");
      CodeMirror2.defineMode("erlang", function(cmCfg) {
        "use strict";
        var typeWords = [
          "-type",
          "-spec",
          "-export_type",
          "-opaque"
        ];
        var keywordWords = [
          "after",
          "begin",
          "catch",
          "case",
          "cond",
          "end",
          "fun",
          "if",
          "let",
          "of",
          "query",
          "receive",
          "try",
          "when"
        ];
        var separatorRE = /[\->,;]/;
        var separatorWords = [
          "->",
          ";",
          ","
        ];
        var operatorAtomWords = [
          "and",
          "andalso",
          "band",
          "bnot",
          "bor",
          "bsl",
          "bsr",
          "bxor",
          "div",
          "not",
          "or",
          "orelse",
          "rem",
          "xor"
        ];
        var operatorSymbolRE = /[\+\-\*\/<>=\|:!]/;
        var operatorSymbolWords = [
          "=",
          "+",
          "-",
          "*",
          "/",
          ">",
          ">=",
          "<",
          "=<",
          "=:=",
          "==",
          "=/=",
          "/=",
          "||",
          "<-",
          "!"
        ];
        var openParenRE = /[<\(\[\{]/;
        var openParenWords = [
          "<<",
          "(",
          "[",
          "{"
        ];
        var closeParenRE = /[>\)\]\}]/;
        var closeParenWords = [
          "}",
          "]",
          ")",
          ">>"
        ];
        var guardWords = [
          "is_atom",
          "is_binary",
          "is_bitstring",
          "is_boolean",
          "is_float",
          "is_function",
          "is_integer",
          "is_list",
          "is_number",
          "is_pid",
          "is_port",
          "is_record",
          "is_reference",
          "is_tuple",
          "atom",
          "binary",
          "bitstring",
          "boolean",
          "function",
          "integer",
          "list",
          "number",
          "pid",
          "port",
          "record",
          "reference",
          "tuple"
        ];
        var bifWords = [
          "abs",
          "adler32",
          "adler32_combine",
          "alive",
          "apply",
          "atom_to_binary",
          "atom_to_list",
          "binary_to_atom",
          "binary_to_existing_atom",
          "binary_to_list",
          "binary_to_term",
          "bit_size",
          "bitstring_to_list",
          "byte_size",
          "check_process_code",
          "contact_binary",
          "crc32",
          "crc32_combine",
          "date",
          "decode_packet",
          "delete_module",
          "disconnect_node",
          "element",
          "erase",
          "exit",
          "float",
          "float_to_list",
          "garbage_collect",
          "get",
          "get_keys",
          "group_leader",
          "halt",
          "hd",
          "integer_to_list",
          "internal_bif",
          "iolist_size",
          "iolist_to_binary",
          "is_alive",
          "is_atom",
          "is_binary",
          "is_bitstring",
          "is_boolean",
          "is_float",
          "is_function",
          "is_integer",
          "is_list",
          "is_number",
          "is_pid",
          "is_port",
          "is_process_alive",
          "is_record",
          "is_reference",
          "is_tuple",
          "length",
          "link",
          "list_to_atom",
          "list_to_binary",
          "list_to_bitstring",
          "list_to_existing_atom",
          "list_to_float",
          "list_to_integer",
          "list_to_pid",
          "list_to_tuple",
          "load_module",
          "make_ref",
          "module_loaded",
          "monitor_node",
          "node",
          "node_link",
          "node_unlink",
          "nodes",
          "notalive",
          "now",
          "open_port",
          "pid_to_list",
          "port_close",
          "port_command",
          "port_connect",
          "port_control",
          "pre_loaded",
          "process_flag",
          "process_info",
          "processes",
          "purge_module",
          "put",
          "register",
          "registered",
          "round",
          "self",
          "setelement",
          "size",
          "spawn",
          "spawn_link",
          "spawn_monitor",
          "spawn_opt",
          "split_binary",
          "statistics",
          "term_to_binary",
          "time",
          "throw",
          "tl",
          "trunc",
          "tuple_size",
          "tuple_to_list",
          "unlink",
          "unregister",
          "whereis"
        ];
        var anumRE = /[\w@Ø-ÞÀ-Öß-öø-ÿ]/;
        var escapesRE = /[0-7]{1,3}|[bdefnrstv\\"']|\^[a-zA-Z]|x[0-9a-zA-Z]{2}|x{[0-9a-zA-Z]+}/;
        function tokenizer(stream, state) {
          if (state.in_string) {
            state.in_string = !doubleQuote(stream);
            return rval(state, stream, "string");
          }
          if (state.in_atom) {
            state.in_atom = !singleQuote(stream);
            return rval(state, stream, "atom");
          }
          if (stream.eatSpace()) {
            return rval(state, stream, "whitespace");
          }
          if (!peekToken(state) && stream.match(/-\s*[a-zß-öø-ÿ][\wØ-ÞÀ-Öß-öø-ÿ]*/)) {
            if (is_member(stream.current(), typeWords)) {
              return rval(state, stream, "type");
            } else {
              return rval(state, stream, "attribute");
            }
          }
          var ch = stream.next();
          if (ch == "%") {
            stream.skipToEnd();
            return rval(state, stream, "comment");
          }
          if (ch == ":") {
            return rval(state, stream, "colon");
          }
          if (ch == "?") {
            stream.eatSpace();
            stream.eatWhile(anumRE);
            return rval(state, stream, "macro");
          }
          if (ch == "#") {
            stream.eatSpace();
            stream.eatWhile(anumRE);
            return rval(state, stream, "record");
          }
          if (ch == "$") {
            if (stream.next() == "\\" && !stream.match(escapesRE)) {
              return rval(state, stream, "error");
            }
            return rval(state, stream, "number");
          }
          if (ch == ".") {
            return rval(state, stream, "dot");
          }
          if (ch == "'") {
            if (!(state.in_atom = !singleQuote(stream))) {
              if (stream.match(/\s*\/\s*[0-9]/, false)) {
                stream.match(/\s*\/\s*[0-9]/, true);
                return rval(state, stream, "fun");
              }
              if (stream.match(/\s*\(/, false) || stream.match(/\s*:/, false)) {
                return rval(state, stream, "function");
              }
            }
            return rval(state, stream, "atom");
          }
          if (ch == '"') {
            state.in_string = !doubleQuote(stream);
            return rval(state, stream, "string");
          }
          if (/[A-Z_Ø-ÞÀ-Ö]/.test(ch)) {
            stream.eatWhile(anumRE);
            return rval(state, stream, "variable");
          }
          if (/[a-z_ß-öø-ÿ]/.test(ch)) {
            stream.eatWhile(anumRE);
            if (stream.match(/\s*\/\s*[0-9]/, false)) {
              stream.match(/\s*\/\s*[0-9]/, true);
              return rval(state, stream, "fun");
            }
            var w = stream.current();
            if (is_member(w, keywordWords)) {
              return rval(state, stream, "keyword");
            } else if (is_member(w, operatorAtomWords)) {
              return rval(state, stream, "operator");
            } else if (stream.match(/\s*\(/, false)) {
              if (is_member(w, bifWords) && (peekToken(state).token != ":" || peekToken(state, 2).token == "erlang")) {
                return rval(state, stream, "builtin");
              } else if (is_member(w, guardWords)) {
                return rval(state, stream, "guard");
              } else {
                return rval(state, stream, "function");
              }
            } else if (lookahead(stream) == ":") {
              if (w == "erlang") {
                return rval(state, stream, "builtin");
              } else {
                return rval(state, stream, "function");
              }
            } else if (is_member(w, ["true", "false"])) {
              return rval(state, stream, "boolean");
            } else {
              return rval(state, stream, "atom");
            }
          }
          var digitRE = /[0-9]/;
          var radixRE = /[0-9a-zA-Z]/;
          if (digitRE.test(ch)) {
            stream.eatWhile(digitRE);
            if (stream.eat("#")) {
              if (!stream.eatWhile(radixRE)) {
                stream.backUp(1);
              }
            } else if (stream.eat(".")) {
              if (!stream.eatWhile(digitRE)) {
                stream.backUp(1);
              } else {
                if (stream.eat(/[eE]/)) {
                  if (stream.eat(/[-+]/)) {
                    if (!stream.eatWhile(digitRE)) {
                      stream.backUp(2);
                    }
                  } else {
                    if (!stream.eatWhile(digitRE)) {
                      stream.backUp(1);
                    }
                  }
                }
              }
            }
            return rval(state, stream, "number");
          }
          if (nongreedy(stream, openParenRE, openParenWords)) {
            return rval(state, stream, "open_paren");
          }
          if (nongreedy(stream, closeParenRE, closeParenWords)) {
            return rval(state, stream, "close_paren");
          }
          if (greedy(stream, separatorRE, separatorWords)) {
            return rval(state, stream, "separator");
          }
          if (greedy(stream, operatorSymbolRE, operatorSymbolWords)) {
            return rval(state, stream, "operator");
          }
          return rval(state, stream, null);
        }
        function nongreedy(stream, re, words) {
          if (stream.current().length == 1 && re.test(stream.current())) {
            stream.backUp(1);
            while (re.test(stream.peek())) {
              stream.next();
              if (is_member(stream.current(), words)) {
                return true;
              }
            }
            stream.backUp(stream.current().length - 1);
          }
          return false;
        }
        function greedy(stream, re, words) {
          if (stream.current().length == 1 && re.test(stream.current())) {
            while (re.test(stream.peek())) {
              stream.next();
            }
            while (0 < stream.current().length) {
              if (is_member(stream.current(), words)) {
                return true;
              } else {
                stream.backUp(1);
              }
            }
            stream.next();
          }
          return false;
        }
        function doubleQuote(stream) {
          return quote(stream, '"', "\\");
        }
        function singleQuote(stream) {
          return quote(stream, "'", "\\");
        }
        function quote(stream, quoteChar, escapeChar) {
          while (!stream.eol()) {
            var ch = stream.next();
            if (ch == quoteChar) {
              return true;
            } else if (ch == escapeChar) {
              stream.next();
            }
          }
          return false;
        }
        function lookahead(stream) {
          var m = stream.match(/([\n\s]+|%[^\n]*\n)*(.)/, false);
          return m ? m.pop() : "";
        }
        function is_member(element, list) {
          return -1 < list.indexOf(element);
        }
        function rval(state, stream, type) {
          pushToken(state, realToken(type, stream));
          switch (type) {
            case "atom":
              return "atom";
            case "attribute":
              return "attribute";
            case "boolean":
              return "atom";
            case "builtin":
              return "builtin";
            case "close_paren":
              return null;
            case "colon":
              return null;
            case "comment":
              return "comment";
            case "dot":
              return null;
            case "error":
              return "error";
            case "fun":
              return "meta";
            case "function":
              return "tag";
            case "guard":
              return "property";
            case "keyword":
              return "keyword";
            case "macro":
              return "variable-2";
            case "number":
              return "number";
            case "open_paren":
              return null;
            case "operator":
              return "operator";
            case "record":
              return "bracket";
            case "separator":
              return null;
            case "string":
              return "string";
            case "type":
              return "def";
            case "variable":
              return "variable";
            default:
              return null;
          }
        }
        function aToken(tok, col, ind, typ) {
          return {
            token: tok,
            column: col,
            indent: ind,
            type: typ
          };
        }
        function realToken(type, stream) {
          return aToken(
            stream.current(),
            stream.column(),
            stream.indentation(),
            type
          );
        }
        function fakeToken(type) {
          return aToken(type, 0, 0, type);
        }
        function peekToken(state, depth) {
          var len = state.tokenStack.length;
          var dep = depth ? depth : 1;
          if (len < dep) {
            return false;
          } else {
            return state.tokenStack[len - dep];
          }
        }
        function pushToken(state, token) {
          if (!(token.type == "comment" || token.type == "whitespace")) {
            state.tokenStack = maybe_drop_pre(state.tokenStack, token);
            state.tokenStack = maybe_drop_post(state.tokenStack);
          }
        }
        function maybe_drop_pre(s, token) {
          var last = s.length - 1;
          if (0 < last && s[last].type === "record" && token.type === "dot") {
            s.pop();
          } else if (0 < last && s[last].type === "group") {
            s.pop();
            s.push(token);
          } else {
            s.push(token);
          }
          return s;
        }
        function maybe_drop_post(s) {
          if (!s.length)
            return s;
          var last = s.length - 1;
          if (s[last].type === "dot") {
            return [];
          }
          if (last > 1 && s[last].type === "fun" && s[last - 1].token === "fun") {
            return s.slice(0, last - 1);
          }
          switch (s[last].token) {
            case "}":
              return d(s, { g: ["{"] });
            case "]":
              return d(s, { i: ["["] });
            case ")":
              return d(s, { i: ["("] });
            case ">>":
              return d(s, { i: ["<<"] });
            case "end":
              return d(s, { i: ["begin", "case", "fun", "if", "receive", "try"] });
            case ",":
              return d(s, { e: [
                "begin",
                "try",
                "when",
                "->",
                ",",
                "(",
                "[",
                "{",
                "<<"
              ] });
            case "->":
              return d(s, {
                r: ["when"],
                m: ["try", "if", "case", "receive"]
              });
            case ";":
              return d(s, { E: ["case", "fun", "if", "receive", "try", "when"] });
            case "catch":
              return d(s, { e: ["try"] });
            case "of":
              return d(s, { e: ["case"] });
            case "after":
              return d(s, { e: ["receive", "try"] });
            default:
              return s;
          }
        }
        function d(stack, tt) {
          for (var type in tt) {
            var len = stack.length - 1;
            var tokens = tt[type];
            for (var i = len - 1; -1 < i; i--) {
              if (is_member(stack[i].token, tokens)) {
                var ss = stack.slice(0, i);
                switch (type) {
                  case "m":
                    return ss.concat(stack[i]).concat(stack[len]);
                  case "r":
                    return ss.concat(stack[len]);
                  case "i":
                    return ss;
                  case "g":
                    return ss.concat(fakeToken("group"));
                  case "E":
                    return ss.concat(stack[i]);
                  case "e":
                    return ss.concat(stack[i]);
                }
              }
            }
          }
          return type == "E" ? [] : stack;
        }
        function indenter(state, textAfter) {
          var t;
          var unit = cmCfg.indentUnit;
          var wordAfter = wordafter(textAfter);
          var currT = peekToken(state, 1);
          var prevT = peekToken(state, 2);
          if (state.in_string || state.in_atom) {
            return CodeMirror2.Pass;
          } else if (!prevT) {
            return 0;
          } else if (currT.token == "when") {
            return currT.column + unit;
          } else if (wordAfter === "when" && prevT.type === "function") {
            return prevT.indent + unit;
          } else if (wordAfter === "(" && currT.token === "fun") {
            return currT.column + 3;
          } else if (wordAfter === "catch" && (t = getToken(state, ["try"]))) {
            return t.column;
          } else if (is_member(wordAfter, ["end", "after", "of"])) {
            t = getToken(state, ["begin", "case", "fun", "if", "receive", "try"]);
            return t ? t.column : CodeMirror2.Pass;
          } else if (is_member(wordAfter, closeParenWords)) {
            t = getToken(state, openParenWords);
            return t ? t.column : CodeMirror2.Pass;
          } else if (is_member(currT.token, [",", "|", "||"]) || is_member(wordAfter, [",", "|", "||"])) {
            t = postcommaToken(state);
            return t ? t.column + t.token.length : unit;
          } else if (currT.token == "->") {
            if (is_member(prevT.token, ["receive", "case", "if", "try"])) {
              return prevT.column + unit + unit;
            } else {
              return prevT.column + unit;
            }
          } else if (is_member(currT.token, openParenWords)) {
            return currT.column + currT.token.length;
          } else {
            t = defaultToken(state);
            return truthy(t) ? t.column + unit : 0;
          }
        }
        function wordafter(str) {
          var m = str.match(/,|[a-z]+|\}|\]|\)|>>|\|+|\(/);
          return truthy(m) && m.index === 0 ? m[0] : "";
        }
        function postcommaToken(state) {
          var objs = state.tokenStack.slice(0, -1);
          var i = getTokenIndex(objs, "type", ["open_paren"]);
          return truthy(objs[i]) ? objs[i] : false;
        }
        function defaultToken(state) {
          var objs = state.tokenStack;
          var stop = getTokenIndex(objs, "type", ["open_paren", "separator", "keyword"]);
          var oper = getTokenIndex(objs, "type", ["operator"]);
          if (truthy(stop) && truthy(oper) && stop < oper) {
            return objs[stop + 1];
          } else if (truthy(stop)) {
            return objs[stop];
          } else {
            return false;
          }
        }
        function getToken(state, tokens) {
          var objs = state.tokenStack;
          var i = getTokenIndex(objs, "token", tokens);
          return truthy(objs[i]) ? objs[i] : false;
        }
        function getTokenIndex(objs, propname, propvals) {
          for (var i = objs.length - 1; -1 < i; i--) {
            if (is_member(objs[i][propname], propvals)) {
              return i;
            }
          }
          return false;
        }
        function truthy(x) {
          return x !== false && x != null;
        }
        return {
          startState: function() {
            return {
              tokenStack: [],
              in_string: false,
              in_atom: false
            };
          },
          token: function(stream, state) {
            return tokenizer(stream, state);
          },
          indent: function(state, textAfter) {
            return indenter(state, textAfter);
          },
          lineComment: "%"
        };
      });
    });
  }
});

// mode/factor/factor.js
var require_factor = __commonJS({
  "mode/factor/factor.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror(), require_simple());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror", "../../addon/mode/simple"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineSimpleMode("factor", {
        // The start state contains the rules that are intially used
        start: [
          // comments
          { regex: /#?!.*/, token: "comment" },
          // strings """, multiline --> state
          { regex: /"""/, token: "string", next: "string3" },
          { regex: /(STRING:)(\s)/, token: ["keyword", null], next: "string2" },
          { regex: /\S*?"/, token: "string", next: "string" },
          // numbers: dec, hex, unicode, bin, fractional, complex
          { regex: /(?:0x[\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\-?\d+.?\d*)(?=\s)/, token: "number" },
          //{regex: /[+-]?/} //fractional
          // definition: defining word, defined word, etc
          { regex: /((?:GENERIC)|\:?\:)(\s+)(\S+)(\s+)(\()/, token: ["keyword", null, "def", null, "bracket"], next: "stack" },
          // method definition: defining word, type, defined word, etc
          { regex: /(M\:)(\s+)(\S+)(\s+)(\S+)/, token: ["keyword", null, "def", null, "tag"] },
          // vocabulary using --> state
          { regex: /USING\:/, token: "keyword", next: "vocabulary" },
          // vocabulary definition/use
          { regex: /(USE\:|IN\:)(\s+)(\S+)(?=\s|$)/, token: ["keyword", null, "tag"] },
          // definition: a defining word, defined word
          { regex: /(\S+\:)(\s+)(\S+)(?=\s|$)/, token: ["keyword", null, "def"] },
          // "keywords", incl. ; t f . [ ] { } defining words
          { regex: /(?:;|\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\.|\S*\[|\]|\S*\{|\})(?=\s|$)/, token: "keyword" },
          // <constructors> and the like
          { regex: /\S+[\)>\.\*\?]+(?=\s|$)/, token: "builtin" },
          { regex: /[\)><]+\S+(?=\s|$)/, token: "builtin" },
          // operators
          { regex: /(?:[\+\-\=\/\*<>])(?=\s|$)/, token: "keyword" },
          // any id (?)
          { regex: /\S+/, token: "variable" },
          { regex: /\s+|./, token: null }
        ],
        vocabulary: [
          { regex: /;/, token: "keyword", next: "start" },
          { regex: /\S+/, token: "tag" },
          { regex: /\s+|./, token: null }
        ],
        string: [
          { regex: /(?:[^\\]|\\.)*?"/, token: "string", next: "start" },
          { regex: /.*/, token: "string" }
        ],
        string2: [
          { regex: /^;/, token: "keyword", next: "start" },
          { regex: /.*/, token: "string" }
        ],
        string3: [
          { regex: /(?:[^\\]|\\.)*?"""/, token: "string", next: "start" },
          { regex: /.*/, token: "string" }
        ],
        stack: [
          { regex: /\)/, token: "bracket", next: "start" },
          { regex: /--/, token: "bracket" },
          { regex: /\S+/, token: "meta" },
          { regex: /\s+|./, token: null }
        ],
        // The meta property contains global information about the mode. It
        // can contain properties like lineComment, which are supported by
        // all modes, and also directives like dontIndentStates, which are
        // specific to simple modes.
        meta: {
          dontIndentStates: ["start", "vocabulary", "string", "string3", "stack"],
          lineComment: ["!", "#!"]
        }
      });
      CodeMirror2.defineMIME("text/x-factor", "factor");
    });
  }
});

// mode/fcl/fcl.js
var require_fcl = __commonJS({
  "mode/fcl/fcl.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("fcl", function(config) {
        var indentUnit = config.indentUnit;
        var keywords = {
          "term": true,
          "method": true,
          "accu": true,
          "rule": true,
          "then": true,
          "is": true,
          "and": true,
          "or": true,
          "if": true,
          "default": true
        };
        var start_blocks = {
          "var_input": true,
          "var_output": true,
          "fuzzify": true,
          "defuzzify": true,
          "function_block": true,
          "ruleblock": true
        };
        var end_blocks = {
          "end_ruleblock": true,
          "end_defuzzify": true,
          "end_function_block": true,
          "end_fuzzify": true,
          "end_var": true
        };
        var atoms = {
          "true": true,
          "false": true,
          "nan": true,
          "real": true,
          "min": true,
          "max": true,
          "cog": true,
          "cogs": true
        };
        var isOperatorChar = /[+\-*&^%:=<>!|\/]/;
        function tokenBase(stream, state) {
          var ch = stream.next();
          if (/[\d\.]/.test(ch)) {
            if (ch == ".") {
              stream.match(/^[0-9]+([eE][\-+]?[0-9]+)?/);
            } else if (ch == "0") {
              stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);
            } else {
              stream.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/);
            }
            return "number";
          }
          if (ch == "/" || ch == "(") {
            if (stream.eat("*")) {
              state.tokenize = tokenComment;
              return tokenComment(stream, state);
            }
            if (stream.eat("/")) {
              stream.skipToEnd();
              return "comment";
            }
          }
          if (isOperatorChar.test(ch)) {
            stream.eatWhile(isOperatorChar);
            return "operator";
          }
          stream.eatWhile(/[\w\$_\xa1-\uffff]/);
          var cur = stream.current().toLowerCase();
          if (keywords.propertyIsEnumerable(cur) || start_blocks.propertyIsEnumerable(cur) || end_blocks.propertyIsEnumerable(cur)) {
            return "keyword";
          }
          if (atoms.propertyIsEnumerable(cur))
            return "atom";
          return "variable";
        }
        function tokenComment(stream, state) {
          var maybeEnd = false, ch;
          while (ch = stream.next()) {
            if ((ch == "/" || ch == ")") && maybeEnd) {
              state.tokenize = tokenBase;
              break;
            }
            maybeEnd = ch == "*";
          }
          return "comment";
        }
        function Context(indented, column, type, align, prev) {
          this.indented = indented;
          this.column = column;
          this.type = type;
          this.align = align;
          this.prev = prev;
        }
        function pushContext(state, col, type) {
          return state.context = new Context(state.indented, col, type, null, state.context);
        }
        function popContext(state) {
          if (!state.context.prev)
            return;
          var t = state.context.type;
          if (t == "end_block")
            state.indented = state.context.indented;
          return state.context = state.context.prev;
        }
        return {
          startState: function(basecolumn) {
            return {
              tokenize: null,
              context: new Context((basecolumn || 0) - indentUnit, 0, "top", false),
              indented: 0,
              startOfLine: true
            };
          },
          token: function(stream, state) {
            var ctx = state.context;
            if (stream.sol()) {
              if (ctx.align == null)
                ctx.align = false;
              state.indented = stream.indentation();
              state.startOfLine = true;
            }
            if (stream.eatSpace())
              return null;
            var style = (state.tokenize || tokenBase)(stream, state);
            if (style == "comment")
              return style;
            if (ctx.align == null)
              ctx.align = true;
            var cur = stream.current().toLowerCase();
            if (start_blocks.propertyIsEnumerable(cur))
              pushContext(state, stream.column(), "end_block");
            else if (end_blocks.propertyIsEnumerable(cur))
              popContext(state);
            state.startOfLine = false;
            return style;
          },
          indent: function(state, textAfter) {
            if (state.tokenize != tokenBase && state.tokenize != null)
              return 0;
            var ctx = state.context;
            var closing = end_blocks.propertyIsEnumerable(textAfter);
            if (ctx.align)
              return ctx.column + (closing ? 0 : 1);
            else
              return ctx.indented + (closing ? 0 : indentUnit);
          },
          electricChars: "ryk",
          fold: "brace",
          blockCommentStart: "(*",
          blockCommentEnd: "*)",
          lineComment: "//"
        };
      });
      CodeMirror2.defineMIME("text/x-fcl", "fcl");
    });
  }
});

// mode/forth/forth.js
var require_forth = __commonJS({
  "mode/forth/forth.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      function toWordList(words) {
        var ret = [];
        words.split(" ").forEach(function(e) {
          ret.push({ name: e });
        });
        return ret;
      }
      var coreWordList = toWordList(
        "INVERT AND OR XOR 2* 2/ LSHIFT RSHIFT 0= = 0< < > U< MIN MAX 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP >R R> R@ + - 1+ 1- ABS NEGATE S>D * M* UM* FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2! ALIGN ALIGNED +! ALLOT CHAR [CHAR] [ ] BL FIND EXECUTE IMMEDIATE COUNT LITERAL STATE ; DOES> >BODY EVALUATE SOURCE >IN <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL FILL MOVE . CR EMIT SPACE SPACES TYPE U. .R U.R ACCEPT TRUE FALSE <> U> 0<> 0> NIP TUCK ROLL PICK 2>R 2R@ 2R> WITHIN UNUSED MARKER I J TO COMPILE, [COMPILE] SAVE-INPUT RESTORE-INPUT PAD ERASE 2LITERAL DNEGATE D- D+ D0< D0= D2* D2/ D< D= DMAX DMIN D>S DABS M+ M*/ D. D.R 2ROT DU< CATCH THROW FREE RESIZE ALLOCATE CS-PICK CS-ROLL GET-CURRENT SET-CURRENT FORTH-WORDLIST GET-ORDER SET-ORDER PREVIOUS SEARCH-WORDLIST WORDLIST FIND ALSO ONLY FORTH DEFINITIONS ORDER -TRAILING /STRING SEARCH COMPARE CMOVE CMOVE> BLANK SLITERAL"
      );
      var immediateWordList = toWordList("IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE [IF] [ELSE] [THEN] ?DO DO LOOP +LOOP UNLOOP LEAVE EXIT AGAIN CASE OF ENDOF ENDCASE");
      CodeMirror2.defineMode("forth", function() {
        function searchWordList(wordList, word) {
          var i;
          for (i = wordList.length - 1; i >= 0; i--) {
            if (wordList[i].name === word.toUpperCase()) {
              return wordList[i];
            }
          }
          return void 0;
        }
        return {
          startState: function() {
            return {
              state: "",
              base: 10,
              coreWordList,
              immediateWordList,
              wordList: []
            };
          },
          token: function(stream, stt) {
            var mat;
            if (stream.eatSpace()) {
              return null;
            }
            if (stt.state === "") {
              if (stream.match(/^(\]|:NONAME)(\s|$)/i)) {
                stt.state = " compilation";
                return "builtin compilation";
              }
              mat = stream.match(/^(\:)\s+(\S+)(\s|$)+/);
              if (mat) {
                stt.wordList.push({ name: mat[2].toUpperCase() });
                stt.state = " compilation";
                return "def" + stt.state;
              }
              mat = stream.match(/^(VARIABLE|2VARIABLE|CONSTANT|2CONSTANT|CREATE|POSTPONE|VALUE|WORD)\s+(\S+)(\s|$)+/i);
              if (mat) {
                stt.wordList.push({ name: mat[2].toUpperCase() });
                return "def" + stt.state;
              }
              mat = stream.match(/^(\'|\[\'\])\s+(\S+)(\s|$)+/);
              if (mat) {
                return "builtin" + stt.state;
              }
            } else {
              if (stream.match(/^(\;|\[)(\s)/)) {
                stt.state = "";
                stream.backUp(1);
                return "builtin compilation";
              }
              if (stream.match(/^(\;|\[)($)/)) {
                stt.state = "";
                return "builtin compilation";
              }
              if (stream.match(/^(POSTPONE)\s+\S+(\s|$)+/)) {
                return "builtin";
              }
            }
            mat = stream.match(/^(\S+)(\s+|$)/);
            if (mat) {
              if (searchWordList(stt.wordList, mat[1]) !== void 0) {
                return "variable" + stt.state;
              }
              if (mat[1] === "\\") {
                stream.skipToEnd();
                return "comment" + stt.state;
              }
              if (searchWordList(stt.coreWordList, mat[1]) !== void 0) {
                return "builtin" + stt.state;
              }
              if (searchWordList(stt.immediateWordList, mat[1]) !== void 0) {
                return "keyword" + stt.state;
              }
              if (mat[1] === "(") {
                stream.eatWhile(function(s) {
                  return s !== ")";
                });
                stream.eat(")");
                return "comment" + stt.state;
              }
              if (mat[1] === ".(") {
                stream.eatWhile(function(s) {
                  return s !== ")";
                });
                stream.eat(")");
                return "string" + stt.state;
              }
              if (mat[1] === 'S"' || mat[1] === '."' || mat[1] === 'C"') {
                stream.eatWhile(function(s) {
                  return s !== '"';
                });
                stream.eat('"');
                return "string" + stt.state;
              }
              if (mat[1] - 68719476735) {
                return "number" + stt.state;
              }
              return "atom" + stt.state;
            }
          }
        };
      });
      CodeMirror2.defineMIME("text/x-forth", "forth");
    });
  }
});

// mode/fortran/fortran.js
var require_fortran = __commonJS({
  "mode/fortran/fortran.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("fortran", function() {
        function words(array) {
          var keys = {};
          for (var i = 0; i < array.length; ++i) {
            keys[array[i]] = true;
          }
          return keys;
        }
        var keywords = words([
          "abstract",
          "accept",
          "allocatable",
          "allocate",
          "array",
          "assign",
          "asynchronous",
          "backspace",
          "bind",
          "block",
          "byte",
          "call",
          "case",
          "class",
          "close",
          "common",
          "contains",
          "continue",
          "cycle",
          "data",
          "deallocate",
          "decode",
          "deferred",
          "dimension",
          "do",
          "elemental",
          "else",
          "encode",
          "end",
          "endif",
          "entry",
          "enumerator",
          "equivalence",
          "exit",
          "external",
          "extrinsic",
          "final",
          "forall",
          "format",
          "function",
          "generic",
          "go",
          "goto",
          "if",
          "implicit",
          "import",
          "include",
          "inquire",
          "intent",
          "interface",
          "intrinsic",
          "module",
          "namelist",
          "non_intrinsic",
          "non_overridable",
          "none",
          "nopass",
          "nullify",
          "open",
          "optional",
          "options",
          "parameter",
          "pass",
          "pause",
          "pointer",
          "print",
          "private",
          "program",
          "protected",
          "public",
          "pure",
          "read",
          "recursive",
          "result",
          "return",
          "rewind",
          "save",
          "select",
          "sequence",
          "stop",
          "subroutine",
          "target",
          "then",
          "to",
          "type",
          "use",
          "value",
          "volatile",
          "where",
          "while",
          "write"
        ]);
        var builtins = words([
          "abort",
          "abs",
          "access",
          "achar",
          "acos",
          "adjustl",
          "adjustr",
          "aimag",
          "aint",
          "alarm",
          "all",
          "allocated",
          "alog",
          "amax",
          "amin",
          "amod",
          "and",
          "anint",
          "any",
          "asin",
          "associated",
          "atan",
          "besj",
          "besjn",
          "besy",
          "besyn",
          "bit_size",
          "btest",
          "cabs",
          "ccos",
          "ceiling",
          "cexp",
          "char",
          "chdir",
          "chmod",
          "clog",
          "cmplx",
          "command_argument_count",
          "complex",
          "conjg",
          "cos",
          "cosh",
          "count",
          "cpu_time",
          "cshift",
          "csin",
          "csqrt",
          "ctime",
          "c_funloc",
          "c_loc",
          "c_associated",
          "c_null_ptr",
          "c_null_funptr",
          "c_f_pointer",
          "c_null_char",
          "c_alert",
          "c_backspace",
          "c_form_feed",
          "c_new_line",
          "c_carriage_return",
          "c_horizontal_tab",
          "c_vertical_tab",
          "dabs",
          "dacos",
          "dasin",
          "datan",
          "date_and_time",
          "dbesj",
          "dbesj",
          "dbesjn",
          "dbesy",
          "dbesy",
          "dbesyn",
          "dble",
          "dcos",
          "dcosh",
          "ddim",
          "derf",
          "derfc",
          "dexp",
          "digits",
          "dim",
          "dint",
          "dlog",
          "dlog",
          "dmax",
          "dmin",
          "dmod",
          "dnint",
          "dot_product",
          "dprod",
          "dsign",
          "dsinh",
          "dsin",
          "dsqrt",
          "dtanh",
          "dtan",
          "dtime",
          "eoshift",
          "epsilon",
          "erf",
          "erfc",
          "etime",
          "exit",
          "exp",
          "exponent",
          "extends_type_of",
          "fdate",
          "fget",
          "fgetc",
          "float",
          "floor",
          "flush",
          "fnum",
          "fputc",
          "fput",
          "fraction",
          "fseek",
          "fstat",
          "ftell",
          "gerror",
          "getarg",
          "get_command",
          "get_command_argument",
          "get_environment_variable",
          "getcwd",
          "getenv",
          "getgid",
          "getlog",
          "getpid",
          "getuid",
          "gmtime",
          "hostnm",
          "huge",
          "iabs",
          "iachar",
          "iand",
          "iargc",
          "ibclr",
          "ibits",
          "ibset",
          "ichar",
          "idate",
          "idim",
          "idint",
          "idnint",
          "ieor",
          "ierrno",
          "ifix",
          "imag",
          "imagpart",
          "index",
          "int",
          "ior",
          "irand",
          "isatty",
          "ishft",
          "ishftc",
          "isign",
          "iso_c_binding",
          "is_iostat_end",
          "is_iostat_eor",
          "itime",
          "kill",
          "kind",
          "lbound",
          "len",
          "len_trim",
          "lge",
          "lgt",
          "link",
          "lle",
          "llt",
          "lnblnk",
          "loc",
          "log",
          "logical",
          "long",
          "lshift",
          "lstat",
          "ltime",
          "matmul",
          "max",
          "maxexponent",
          "maxloc",
          "maxval",
          "mclock",
          "merge",
          "move_alloc",
          "min",
          "minexponent",
          "minloc",
          "minval",
          "mod",
          "modulo",
          "mvbits",
          "nearest",
          "new_line",
          "nint",
          "not",
          "or",
          "pack",
          "perror",
          "precision",
          "present",
          "product",
          "radix",
          "rand",
          "random_number",
          "random_seed",
          "range",
          "real",
          "realpart",
          "rename",
          "repeat",
          "reshape",
          "rrspacing",
          "rshift",
          "same_type_as",
          "scale",
          "scan",
          "second",
          "selected_int_kind",
          "selected_real_kind",
          "set_exponent",
          "shape",
          "short",
          "sign",
          "signal",
          "sinh",
          "sin",
          "sleep",
          "sngl",
          "spacing",
          "spread",
          "sqrt",
          "srand",
          "stat",
          "sum",
          "symlnk",
          "system",
          "system_clock",
          "tan",
          "tanh",
          "time",
          "tiny",
          "transfer",
          "transpose",
          "trim",
          "ttynam",
          "ubound",
          "umask",
          "unlink",
          "unpack",
          "verify",
          "xor",
          "zabs",
          "zcos",
          "zexp",
          "zlog",
          "zsin",
          "zsqrt"
        ]);
        var dataTypes = words([
          "c_bool",
          "c_char",
          "c_double",
          "c_double_complex",
          "c_float",
          "c_float_complex",
          "c_funptr",
          "c_int",
          "c_int16_t",
          "c_int32_t",
          "c_int64_t",
          "c_int8_t",
          "c_int_fast16_t",
          "c_int_fast32_t",
          "c_int_fast64_t",
          "c_int_fast8_t",
          "c_int_least16_t",
          "c_int_least32_t",
          "c_int_least64_t",
          "c_int_least8_t",
          "c_intmax_t",
          "c_intptr_t",
          "c_long",
          "c_long_double",
          "c_long_double_complex",
          "c_long_long",
          "c_ptr",
          "c_short",
          "c_signed_char",
          "c_size_t",
          "character",
          "complex",
          "double",
          "integer",
          "logical",
          "real"
        ]);
        var isOperatorChar = /[+\-*&=<>\/\:]/;
        var litOperator = new RegExp("(.and.|.or.|.eq.|.lt.|.le.|.gt.|.ge.|.ne.|.not.|.eqv.|.neqv.)", "i");
        function tokenBase(stream, state) {
          if (stream.match(litOperator)) {
            return "operator";
          }
          var ch = stream.next();
          if (ch == "!") {
            stream.skipToEnd();
            return "comment";
          }
          if (ch == '"' || ch == "'") {
            state.tokenize = tokenString(ch);
            return state.tokenize(stream, state);
          }
          if (/[\[\]\(\),]/.test(ch)) {
            return null;
          }
          if (/\d/.test(ch)) {
            stream.eatWhile(/[\w\.]/);
            return "number";
          }
          if (isOperatorChar.test(ch)) {
            stream.eatWhile(isOperatorChar);
            return "operator";
          }
          stream.eatWhile(/[\w\$_]/);
          var word = stream.current().toLowerCase();
          if (keywords.hasOwnProperty(word)) {
            return "keyword";
          }
          if (builtins.hasOwnProperty(word) || dataTypes.hasOwnProperty(word)) {
            return "builtin";
          }
          return "variable";
        }
        function tokenString(quote) {
          return function(stream, state) {
            var escaped = false, next, end = false;
            while ((next = stream.next()) != null) {
              if (next == quote && !escaped) {
                end = true;
                break;
              }
              escaped = !escaped && next == "\\";
            }
            if (end || !escaped)
              state.tokenize = null;
            return "string";
          };
        }
        return {
          startState: function() {
            return { tokenize: null };
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            var style = (state.tokenize || tokenBase)(stream, state);
            if (style == "comment" || style == "meta")
              return style;
            return style;
          }
        };
      });
      CodeMirror2.defineMIME("text/x-fortran", "fortran");
    });
  }
});

// mode/gas/gas.js
var require_gas = __commonJS({
  "mode/gas/gas.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("gas", function(_config, parserConfig) {
        "use strict";
        var custom = [];
        var lineCommentStartSymbol = "";
        var directives = {
          ".abort": "builtin",
          ".align": "builtin",
          ".altmacro": "builtin",
          ".ascii": "builtin",
          ".asciz": "builtin",
          ".balign": "builtin",
          ".balignw": "builtin",
          ".balignl": "builtin",
          ".bundle_align_mode": "builtin",
          ".bundle_lock": "builtin",
          ".bundle_unlock": "builtin",
          ".byte": "builtin",
          ".cfi_startproc": "builtin",
          ".comm": "builtin",
          ".data": "builtin",
          ".def": "builtin",
          ".desc": "builtin",
          ".dim": "builtin",
          ".double": "builtin",
          ".eject": "builtin",
          ".else": "builtin",
          ".elseif": "builtin",
          ".end": "builtin",
          ".endef": "builtin",
          ".endfunc": "builtin",
          ".endif": "builtin",
          ".equ": "builtin",
          ".equiv": "builtin",
          ".eqv": "builtin",
          ".err": "builtin",
          ".error": "builtin",
          ".exitm": "builtin",
          ".extern": "builtin",
          ".fail": "builtin",
          ".file": "builtin",
          ".fill": "builtin",
          ".float": "builtin",
          ".func": "builtin",
          ".global": "builtin",
          ".gnu_attribute": "builtin",
          ".hidden": "builtin",
          ".hword": "builtin",
          ".ident": "builtin",
          ".if": "builtin",
          ".incbin": "builtin",
          ".include": "builtin",
          ".int": "builtin",
          ".internal": "builtin",
          ".irp": "builtin",
          ".irpc": "builtin",
          ".lcomm": "builtin",
          ".lflags": "builtin",
          ".line": "builtin",
          ".linkonce": "builtin",
          ".list": "builtin",
          ".ln": "builtin",
          ".loc": "builtin",
          ".loc_mark_labels": "builtin",
          ".local": "builtin",
          ".long": "builtin",
          ".macro": "builtin",
          ".mri": "builtin",
          ".noaltmacro": "builtin",
          ".nolist": "builtin",
          ".octa": "builtin",
          ".offset": "builtin",
          ".org": "builtin",
          ".p2align": "builtin",
          ".popsection": "builtin",
          ".previous": "builtin",
          ".print": "builtin",
          ".protected": "builtin",
          ".psize": "builtin",
          ".purgem": "builtin",
          ".pushsection": "builtin",
          ".quad": "builtin",
          ".reloc": "builtin",
          ".rept": "builtin",
          ".sbttl": "builtin",
          ".scl": "builtin",
          ".section": "builtin",
          ".set": "builtin",
          ".short": "builtin",
          ".single": "builtin",
          ".size": "builtin",
          ".skip": "builtin",
          ".sleb128": "builtin",
          ".space": "builtin",
          ".stab": "builtin",
          ".string": "builtin",
          ".struct": "builtin",
          ".subsection": "builtin",
          ".symver": "builtin",
          ".tag": "builtin",
          ".text": "builtin",
          ".title": "builtin",
          ".type": "builtin",
          ".uleb128": "builtin",
          ".val": "builtin",
          ".version": "builtin",
          ".vtable_entry": "builtin",
          ".vtable_inherit": "builtin",
          ".warning": "builtin",
          ".weak": "builtin",
          ".weakref": "builtin",
          ".word": "builtin"
        };
        var registers = {};
        function x86(_parserConfig) {
          lineCommentStartSymbol = "#";
          registers.ax = "variable";
          registers.eax = "variable-2";
          registers.rax = "variable-3";
          registers.bx = "variable";
          registers.ebx = "variable-2";
          registers.rbx = "variable-3";
          registers.cx = "variable";
          registers.ecx = "variable-2";
          registers.rcx = "variable-3";
          registers.dx = "variable";
          registers.edx = "variable-2";
          registers.rdx = "variable-3";
          registers.si = "variable";
          registers.esi = "variable-2";
          registers.rsi = "variable-3";
          registers.di = "variable";
          registers.edi = "variable-2";
          registers.rdi = "variable-3";
          registers.sp = "variable";
          registers.esp = "variable-2";
          registers.rsp = "variable-3";
          registers.bp = "variable";
          registers.ebp = "variable-2";
          registers.rbp = "variable-3";
          registers.ip = "variable";
          registers.eip = "variable-2";
          registers.rip = "variable-3";
          registers.cs = "keyword";
          registers.ds = "keyword";
          registers.ss = "keyword";
          registers.es = "keyword";
          registers.fs = "keyword";
          registers.gs = "keyword";
        }
        function armv6(_parserConfig) {
          lineCommentStartSymbol = "@";
          directives.syntax = "builtin";
          registers.r0 = "variable";
          registers.r1 = "variable";
          registers.r2 = "variable";
          registers.r3 = "variable";
          registers.r4 = "variable";
          registers.r5 = "variable";
          registers.r6 = "variable";
          registers.r7 = "variable";
          registers.r8 = "variable";
          registers.r9 = "variable";
          registers.r10 = "variable";
          registers.r11 = "variable";
          registers.r12 = "variable";
          registers.sp = "variable-2";
          registers.lr = "variable-2";
          registers.pc = "variable-2";
          registers.r13 = registers.sp;
          registers.r14 = registers.lr;
          registers.r15 = registers.pc;
          custom.push(function(ch, stream) {
            if (ch === "#") {
              stream.eatWhile(/\w/);
              return "number";
            }
          });
        }
        var arch = (parserConfig.architecture || "x86").toLowerCase();
        if (arch === "x86") {
          x86(parserConfig);
        } else if (arch === "arm" || arch === "armv6") {
          armv6(parserConfig);
        }
        function nextUntilUnescaped(stream, end) {
          var escaped = false, next;
          while ((next = stream.next()) != null) {
            if (next === end && !escaped) {
              return false;
            }
            escaped = !escaped && next === "\\";
          }
          return escaped;
        }
        function clikeComment(stream, state) {
          var maybeEnd = false, ch;
          while ((ch = stream.next()) != null) {
            if (ch === "/" && maybeEnd) {
              state.tokenize = null;
              break;
            }
            maybeEnd = ch === "*";
          }
          return "comment";
        }
        return {
          startState: function() {
            return {
              tokenize: null
            };
          },
          token: function(stream, state) {
            if (state.tokenize) {
              return state.tokenize(stream, state);
            }
            if (stream.eatSpace()) {
              return null;
            }
            var style, cur, ch = stream.next();
            if (ch === "/") {
              if (stream.eat("*")) {
                state.tokenize = clikeComment;
                return clikeComment(stream, state);
              }
            }
            if (ch === lineCommentStartSymbol) {
              stream.skipToEnd();
              return "comment";
            }
            if (ch === '"') {
              nextUntilUnescaped(stream, '"');
              return "string";
            }
            if (ch === ".") {
              stream.eatWhile(/\w/);
              cur = stream.current().toLowerCase();
              style = directives[cur];
              return style || null;
            }
            if (ch === "=") {
              stream.eatWhile(/\w/);
              return "tag";
            }
            if (ch === "{") {
              return "braket";
            }
            if (ch === "}") {
              return "braket";
            }
            if (/\d/.test(ch)) {
              if (ch === "0" && stream.eat("x")) {
                stream.eatWhile(/[0-9a-fA-F]/);
                return "number";
              }
              stream.eatWhile(/\d/);
              return "number";
            }
            if (/\w/.test(ch)) {
              stream.eatWhile(/\w/);
              if (stream.eat(":")) {
                return "tag";
              }
              cur = stream.current().toLowerCase();
              style = registers[cur];
              return style || null;
            }
            for (var i = 0; i < custom.length; i++) {
              style = custom[i](ch, stream, state);
              if (style) {
                return style;
              }
            }
          },
          lineComment: lineCommentStartSymbol,
          blockCommentStart: "/*",
          blockCommentEnd: "*/"
        };
      });
    });
  }
});

// mode/gherkin/gherkin.js
var require_gherkin = __commonJS({
  "mode/gherkin/gherkin.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("gherkin", function() {
        return {
          startState: function() {
            return {
              lineNumber: 0,
              tableHeaderLine: false,
              allowFeature: true,
              allowBackground: false,
              allowScenario: false,
              allowSteps: false,
              allowPlaceholders: false,
              allowMultilineArgument: false,
              inMultilineString: false,
              inMultilineTable: false,
              inKeywordLine: false
            };
          },
          token: function(stream, state) {
            if (stream.sol()) {
              state.lineNumber++;
              state.inKeywordLine = false;
              if (state.inMultilineTable) {
                state.tableHeaderLine = false;
                if (!stream.match(/\s*\|/, false)) {
                  state.allowMultilineArgument = false;
                  state.inMultilineTable = false;
                }
              }
            }
            stream.eatSpace();
            if (state.allowMultilineArgument) {
              if (state.inMultilineString) {
                if (stream.match('"""')) {
                  state.inMultilineString = false;
                  state.allowMultilineArgument = false;
                } else {
                  stream.match(/.*/);
                }
                return "string";
              }
              if (state.inMultilineTable) {
                if (stream.match(/\|\s*/)) {
                  return "bracket";
                } else {
                  stream.match(/[^\|]*/);
                  return state.tableHeaderLine ? "header" : "string";
                }
              }
              if (stream.match('"""')) {
                state.inMultilineString = true;
                return "string";
              } else if (stream.match("|")) {
                state.inMultilineTable = true;
                state.tableHeaderLine = true;
                return "bracket";
              }
            }
            if (stream.match(/#.*/)) {
              return "comment";
            } else if (!state.inKeywordLine && stream.match(/@\S+/)) {
              return "tag";
            } else if (!state.inKeywordLine && state.allowFeature && stream.match(/(機能|功能|フィーチャ|기능|โครงหลัก|ความสามารถ|ความต้องการทางธุรกิจ|ಹೆಚ್ಚಳ|గుణము|ਮੁਹਾਂਦਰਾ|ਨਕਸ਼ ਨੁਹਾਰ|ਖਾਸੀਅਤ|रूप लेख|وِیژگی|خاصية|תכונה|Функціонал|Функция|Функционалност|Функционал|Үзенчәлеклелек|Свойство|Особина|Мөмкинлек|Могућност|Λειτουργία|Δυνατότητα|Właściwość|Vlastnosť|Trajto|Tính năng|Savybė|Pretty much|Požiadavka|Požadavek|Potrzeba biznesowa|Özellik|Osobina|Ominaisuus|Omadus|OH HAI|Mogućnost|Mogucnost|Jellemző|Hwæt|Hwaet|Funzionalità|Funktionalitéit|Funktionalität|Funkcja|Funkcionalnost|Funkcionalitāte|Funkcia|Fungsi|Functionaliteit|Funcționalitate|Funcţionalitate|Functionalitate|Funcionalitat|Funcionalidade|Fonctionnalité|Fitur|Fīča|Feature|Eiginleiki|Egenskap|Egenskab|Característica|Caracteristica|Business Need|Aspekt|Arwedd|Ahoy matey!|Ability):/)) {
              state.allowScenario = true;
              state.allowBackground = true;
              state.allowPlaceholders = false;
              state.allowSteps = false;
              state.allowMultilineArgument = false;
              state.inKeywordLine = true;
              return "keyword";
            } else if (!state.inKeywordLine && state.allowBackground && stream.match(/(背景|배경|แนวคิด|ಹಿನ್ನೆಲೆ|నేపథ్యం|ਪਿਛੋਕੜ|पृष्ठभूमि|زمینه|الخلفية|רקע|Тарих|Предыстория|Предистория|Позадина|Передумова|Основа|Контекст|Кереш|Υπόβαθρο|Założenia|Yo\-ho\-ho|Tausta|Taust|Situācija|Rerefons|Pozadina|Pozadie|Pozadí|Osnova|Latar Belakang|Kontext|Konteksts|Kontekstas|Kontekst|Háttér|Hannergrond|Grundlage|Geçmiş|Fundo|Fono|First off|Dis is what went down|Dasar|Contexto|Contexte|Context|Contesto|Cenário de Fundo|Cenario de Fundo|Cefndir|Bối cảnh|Bakgrunnur|Bakgrunn|Bakgrund|Baggrund|Background|B4|Antecedents|Antecedentes|Ær|Aer|Achtergrond):/)) {
              state.allowPlaceholders = false;
              state.allowSteps = true;
              state.allowBackground = false;
              state.allowMultilineArgument = false;
              state.inKeywordLine = true;
              return "keyword";
            } else if (!state.inKeywordLine && state.allowScenario && stream.match(/(場景大綱|场景大纲|劇本大綱|剧本大纲|テンプレ|シナリオテンプレート|シナリオテンプレ|シナリオアウトライン|시나리오 개요|สรุปเหตุการณ์|โครงสร้างของเหตุการณ์|ವಿವರಣೆ|కథనం|ਪਟਕਥਾ ਰੂਪ ਰੇਖਾ|ਪਟਕਥਾ ਢਾਂਚਾ|परिदृश्य रूपरेखा|سيناريو مخطط|الگوی سناریو|תבנית תרחיש|Сценарийның төзелеше|Сценарий структураси|Структура сценарію|Структура сценария|Структура сценарија|Скица|Рамка на сценарий|Концепт|Περιγραφή Σεναρίου|Wharrimean is|Template Situai|Template Senario|Template Keadaan|Tapausaihio|Szenariogrundriss|Szablon scenariusza|Swa hwær swa|Swa hwaer swa|Struktura scenarija|Structură scenariu|Structura scenariu|Skica|Skenario konsep|Shiver me timbers|Senaryo taslağı|Schema dello scenario|Scenariomall|Scenariomal|Scenario Template|Scenario Outline|Scenario Amlinellol|Scenārijs pēc parauga|Scenarijaus šablonas|Reckon it's like|Raamstsenaarium|Plang vum Szenario|Plan du Scénario|Plan du scénario|Osnova scénáře|Osnova Scenára|Náčrt Scenáru|Náčrt Scénáře|Náčrt Scenára|MISHUN SRSLY|Menggariskan Senario|Lýsing Dæma|Lýsing Atburðarásar|Konturo de la scenaro|Koncept|Khung tình huống|Khung kịch bản|Forgatókönyv vázlat|Esquema do Cenário|Esquema do Cenario|Esquema del escenario|Esquema de l'escenari|Esbozo do escenario|Delineação do Cenário|Delineacao do Cenario|All y'all|Abstrakt Scenario|Abstract Scenario):/)) {
              state.allowPlaceholders = true;
              state.allowSteps = true;
              state.allowMultilineArgument = false;
              state.inKeywordLine = true;
              return "keyword";
            } else if (state.allowScenario && stream.match(/(例子|例|サンプル|예|ชุดของเหตุการณ์|ชุดของตัวอย่าง|ಉದಾಹರಣೆಗಳು|ఉదాహరణలు|ਉਦਾਹਰਨਾਂ|उदाहरण|نمونه ها|امثلة|דוגמאות|Үрнәкләр|Сценарији|Примеры|Примери|Приклади|Мисоллар|Мисаллар|Σενάρια|Παραδείγματα|You'll wanna|Voorbeelden|Variantai|Tapaukset|Se þe|Se the|Se ðe|Scenarios|Scenariji|Scenarijai|Przykłady|Primjeri|Primeri|Příklady|Príklady|Piemēri|Példák|Pavyzdžiai|Paraugs|Örnekler|Juhtumid|Exemplos|Exemples|Exemple|Exempel|EXAMPLZ|Examples|Esempi|Enghreifftiau|Ekzemploj|Eksempler|Ejemplos|Dữ liệu|Dead men tell no tales|Dæmi|Contoh|Cenários|Cenarios|Beispiller|Beispiele|Atburðarásir):/)) {
              state.allowPlaceholders = false;
              state.allowSteps = true;
              state.allowBackground = false;
              state.allowMultilineArgument = true;
              return "keyword";
            } else if (!state.inKeywordLine && state.allowScenario && stream.match(/(場景|场景|劇本|剧本|シナリオ|시나리오|เหตุการณ์|ಕಥಾಸಾರಾಂಶ|సన్నివేశం|ਪਟਕਥਾ|परिदृश्य|سيناريو|سناریو|תרחיש|Сценарій|Сценарио|Сценарий|Пример|Σενάριο|Tình huống|The thing of it is|Tapaus|Szenario|Swa|Stsenaarium|Skenario|Situai|Senaryo|Senario|Scenaro|Scenariusz|Scenariu|Scénario|Scenario|Scenarijus|Scenārijs|Scenarij|Scenarie|Scénář|Scenár|Primer|MISHUN|Kịch bản|Keadaan|Heave to|Forgatókönyv|Escenario|Escenari|Cenário|Cenario|Awww, look mate|Atburðarás):/)) {
              state.allowPlaceholders = false;
              state.allowSteps = true;
              state.allowBackground = false;
              state.allowMultilineArgument = false;
              state.inKeywordLine = true;
              return "keyword";
            } else if (!state.inKeywordLine && state.allowSteps && stream.match(/(那麼|那么|而且|當|当|并且|同時|同时|前提|假设|假設|假定|假如|但是|但し|並且|もし|ならば|ただし|しかし|かつ|하지만|조건|먼저|만일|만약|단|그리고|그러면|และ |เมื่อ |แต่ |ดังนั้น |กำหนดให้ |ಸ್ಥಿತಿಯನ್ನು |ಮತ್ತು |ನೀಡಿದ |ನಂತರ |ಆದರೆ |మరియు |చెప్పబడినది |కాని |ఈ పరిస్థితిలో |అప్పుడు |ਪਰ |ਤਦ |ਜੇਕਰ |ਜਿਵੇਂ ਕਿ |ਜਦੋਂ |ਅਤੇ |यदि |परन्तु |पर |तब |तदा |तथा |जब |चूंकि |किन्तु |कदा |और |अगर |و |هنگامی |متى |لكن |عندما |ثم |بفرض |با فرض |اما |اذاً |آنگاه |כאשר |וגם |בהינתן |אזי |אז |אבל |Якщо |Һәм |Унда |Тоді |Тогда |То |Также |Та |Пусть |Припустимо, що |Припустимо |Онда |Но |Нехай |Нәтиҗәдә |Лекин |Ләкин |Коли |Когда |Когато |Када |Кад |К тому же |І |И |Задато |Задати |Задате |Если |Допустим |Дано |Дадено |Вә |Ва |Бирок |Әмма |Әйтик |Әгәр |Аммо |Али |Але |Агар |А також |А |Τότε |Όταν |Και |Δεδομένου |Αλλά |Þurh |Þegar |Þa þe |Þá |Þa |Zatati |Zakładając |Zadato |Zadate |Zadano |Zadani |Zadan |Za předpokladu |Za predpokladu |Youse know when youse got |Youse know like when |Yna |Yeah nah |Y'know |Y |Wun |Wtedy |When y'all |When |Wenn |WEN |wann |Ve |Và |Und |Un |ugeholl |Too right |Thurh |Thì |Then y'all |Then |Tha the |Tha |Tetapi |Tapi |Tak |Tada |Tad |Stel |Soit |Siis |Și |Şi |Si |Sed |Se |Så |Quando |Quand |Quan |Pryd |Potom |Pokud |Pokiaľ |Però |Pero |Pak |Oraz |Onda |Ond |Oletetaan |Og |Och |O zaman |Niin |Nhưng |När |Når |Mutta |Men |Mas |Maka |Majd |Mając |Mais |Maar |mä |Ma |Lorsque |Lorsqu'|Logo |Let go and haul |Kun |Kuid |Kui |Kiedy |Khi |Ketika |Kemudian |Keď |Když |Kaj |Kai |Kada |Kad |Jeżeli |Jeśli |Ja |It's just unbelievable |Ir |I CAN HAZ |I |Ha |Givun |Givet |Given y'all |Given |Gitt |Gegeven |Gegeben seien |Gegeben sei |Gdy |Gangway! |Fakat |Étant donnés |Etant donnés |Étant données |Etant données |Étant donnée |Etant donnée |Étant donné |Etant donné |Et |És |Entonces |Entón |Então |Entao |En |Eğer ki |Ef |Eeldades |E |Ðurh |Duota |Dun |Donitaĵo |Donat |Donada |Do |Diyelim ki |Diberi |Dengan |Den youse gotta |DEN |De |Dato |Dați fiind |Daţi fiind |Dati fiind |Dati |Date fiind |Date |Data |Dat fiind |Dar |Dann |dann |Dan |Dados |Dado |Dadas |Dada |Ða ðe |Ða |Cuando |Cho |Cando |Când |Cand |Cal |But y'all |But at the end of the day I reckon |BUT |But |Buh |Blimey! |Biết |Bet |Bagi |Aye |awer |Avast! |Atunci |Atesa |Atès |Apabila |Anrhegedig a |Angenommen |And y'all |And |AN |An |an |Amikor |Amennyiben |Ama |Als |Alors |Allora |Ali |Aleshores |Ale |Akkor |Ak |Adott |Ac |Aber |A zároveň |A tiež |A taktiež |A také |A |a |7 |\* )/)) {
              state.inStep = true;
              state.allowPlaceholders = true;
              state.allowMultilineArgument = true;
              state.inKeywordLine = true;
              return "keyword";
            } else if (stream.match(/"[^"]*"?/)) {
              return "string";
            } else if (state.allowPlaceholders && stream.match(/<[^>]*>?/)) {
              return "variable";
            } else {
              stream.next();
              stream.eatWhile(/[^@"<#]/);
              return null;
            }
          }
        };
      });
      CodeMirror2.defineMIME("text/x-feature", "gherkin");
    });
  }
});

// mode/go/go.js
var require_go = __commonJS({
  "mode/go/go.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("go", function(config) {
        var indentUnit = config.indentUnit;
        var keywords = {
          "break": true,
          "case": true,
          "chan": true,
          "const": true,
          "continue": true,
          "default": true,
          "defer": true,
          "else": true,
          "fallthrough": true,
          "for": true,
          "func": true,
          "go": true,
          "goto": true,
          "if": true,
          "import": true,
          "interface": true,
          "map": true,
          "package": true,
          "range": true,
          "return": true,
          "select": true,
          "struct": true,
          "switch": true,
          "type": true,
          "var": true,
          "bool": true,
          "byte": true,
          "complex64": true,
          "complex128": true,
          "float32": true,
          "float64": true,
          "int8": true,
          "int16": true,
          "int32": true,
          "int64": true,
          "string": true,
          "uint8": true,
          "uint16": true,
          "uint32": true,
          "uint64": true,
          "int": true,
          "uint": true,
          "uintptr": true,
          "error": true,
          "rune": true
        };
        var atoms = {
          "true": true,
          "false": true,
          "iota": true,
          "nil": true,
          "append": true,
          "cap": true,
          "close": true,
          "complex": true,
          "copy": true,
          "delete": true,
          "imag": true,
          "len": true,
          "make": true,
          "new": true,
          "panic": true,
          "print": true,
          "println": true,
          "real": true,
          "recover": true
        };
        var isOperatorChar = /[+\-*&^%:=<>!|\/]/;
        var curPunc;
        function tokenBase(stream, state) {
          var ch = stream.next();
          if (ch == '"' || ch == "'" || ch == "`") {
            state.tokenize = tokenString(ch);
            return state.tokenize(stream, state);
          }
          if (/[\d\.]/.test(ch)) {
            if (ch == ".") {
              stream.match(/^[0-9]+([eE][\-+]?[0-9]+)?/);
            } else if (ch == "0") {
              stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);
            } else {
              stream.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/);
            }
            return "number";
          }
          if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
            curPunc = ch;
            return null;
          }
          if (ch == "/") {
            if (stream.eat("*")) {
              state.tokenize = tokenComment;
              return tokenComment(stream, state);
            }
            if (stream.eat("/")) {
              stream.skipToEnd();
              return "comment";
            }
          }
          if (isOperatorChar.test(ch)) {
            stream.eatWhile(isOperatorChar);
            return "operator";
          }
          stream.eatWhile(/[\w\$_\xa1-\uffff]/);
          var cur = stream.current();
          if (keywords.propertyIsEnumerable(cur)) {
            if (cur == "case" || cur == "default")
              curPunc = "case";
            return "keyword";
          }
          if (atoms.propertyIsEnumerable(cur))
            return "atom";
          return "variable";
        }
        function tokenString(quote) {
          return function(stream, state) {
            var escaped = false, next, end = false;
            while ((next = stream.next()) != null) {
              if (next == quote && !escaped) {
                end = true;
                break;
              }
              escaped = !escaped && quote != "`" && next == "\\";
            }
            if (end || !(escaped || quote == "`"))
              state.tokenize = tokenBase;
            return "string";
          };
        }
        function tokenComment(stream, state) {
          var maybeEnd = false, ch;
          while (ch = stream.next()) {
            if (ch == "/" && maybeEnd) {
              state.tokenize = tokenBase;
              break;
            }
            maybeEnd = ch == "*";
          }
          return "comment";
        }
        function Context(indented, column, type, align, prev) {
          this.indented = indented;
          this.column = column;
          this.type = type;
          this.align = align;
          this.prev = prev;
        }
        function pushContext(state, col, type) {
          return state.context = new Context(state.indented, col, type, null, state.context);
        }
        function popContext(state) {
          if (!state.context.prev)
            return;
          var t = state.context.type;
          if (t == ")" || t == "]" || t == "}")
            state.indented = state.context.indented;
          return state.context = state.context.prev;
        }
        return {
          startState: function(basecolumn) {
            return {
              tokenize: null,
              context: new Context((basecolumn || 0) - indentUnit, 0, "top", false),
              indented: 0,
              startOfLine: true
            };
          },
          token: function(stream, state) {
            var ctx = state.context;
            if (stream.sol()) {
              if (ctx.align == null)
                ctx.align = false;
              state.indented = stream.indentation();
              state.startOfLine = true;
              if (ctx.type == "case")
                ctx.type = "}";
            }
            if (stream.eatSpace())
              return null;
            curPunc = null;
            var style = (state.tokenize || tokenBase)(stream, state);
            if (style == "comment")
              return style;
            if (ctx.align == null)
              ctx.align = true;
            if (curPunc == "{")
              pushContext(state, stream.column(), "}");
            else if (curPunc == "[")
              pushContext(state, stream.column(), "]");
            else if (curPunc == "(")
              pushContext(state, stream.column(), ")");
            else if (curPunc == "case")
              ctx.type = "case";
            else if (curPunc == "}" && ctx.type == "}")
              popContext(state);
            else if (curPunc == ctx.type)
              popContext(state);
            state.startOfLine = false;
            return style;
          },
          indent: function(state, textAfter) {
            if (state.tokenize != tokenBase && state.tokenize != null)
              return CodeMirror2.Pass;
            var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
            if (ctx.type == "case" && /^(?:case|default)\b/.test(textAfter)) {
              state.context.type = "}";
              return ctx.indented;
            }
            var closing = firstChar == ctx.type;
            if (ctx.align)
              return ctx.column + (closing ? 0 : 1);
            else
              return ctx.indented + (closing ? 0 : indentUnit);
          },
          electricChars: "{}):",
          closeBrackets: "()[]{}''\"\"``",
          fold: "brace",
          blockCommentStart: "/*",
          blockCommentEnd: "*/",
          lineComment: "//"
        };
      });
      CodeMirror2.defineMIME("text/x-go", "go");
    });
  }
});

// mode/groovy/groovy.js
var require_groovy = __commonJS({
  "mode/groovy/groovy.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("groovy", function(config) {
        function words(str) {
          var obj = {}, words2 = str.split(" ");
          for (var i = 0; i < words2.length; ++i)
            obj[words2[i]] = true;
          return obj;
        }
        var keywords = words(
          "abstract as assert boolean break byte case catch char class const continue def default do double else enum extends final finally float for goto if implements import in instanceof int interface long native new package private protected public return short static strictfp super switch synchronized threadsafe throw throws trait transient try void volatile while"
        );
        var blockKeywords = words("catch class def do else enum finally for if interface switch trait try while");
        var standaloneKeywords = words("return break continue");
        var atoms = words("null true false this");
        var curPunc;
        function tokenBase(stream, state) {
          var ch = stream.next();
          if (ch == '"' || ch == "'") {
            return startString(ch, stream, state);
          }
          if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
            curPunc = ch;
            return null;
          }
          if (/\d/.test(ch)) {
            stream.eatWhile(/[\w\.]/);
            if (stream.eat(/eE/)) {
              stream.eat(/\+\-/);
              stream.eatWhile(/\d/);
            }
            return "number";
          }
          if (ch == "/") {
            if (stream.eat("*")) {
              state.tokenize.push(tokenComment);
              return tokenComment(stream, state);
            }
            if (stream.eat("/")) {
              stream.skipToEnd();
              return "comment";
            }
            if (expectExpression(state.lastToken, false)) {
              return startString(ch, stream, state);
            }
          }
          if (ch == "-" && stream.eat(">")) {
            curPunc = "->";
            return null;
          }
          if (/[+\-*&%=<>!?|\/~]/.test(ch)) {
            stream.eatWhile(/[+\-*&%=<>|~]/);
            return "operator";
          }
          stream.eatWhile(/[\w\$_]/);
          if (ch == "@") {
            stream.eatWhile(/[\w\$_\.]/);
            return "meta";
          }
          if (state.lastToken == ".")
            return "property";
          if (stream.eat(":")) {
            curPunc = "proplabel";
            return "property";
          }
          var cur = stream.current();
          if (atoms.propertyIsEnumerable(cur)) {
            return "atom";
          }
          if (keywords.propertyIsEnumerable(cur)) {
            if (blockKeywords.propertyIsEnumerable(cur))
              curPunc = "newstatement";
            else if (standaloneKeywords.propertyIsEnumerable(cur))
              curPunc = "standalone";
            return "keyword";
          }
          return "variable";
        }
        tokenBase.isBase = true;
        function startString(quote, stream, state) {
          var tripleQuoted = false;
          if (quote != "/" && stream.eat(quote)) {
            if (stream.eat(quote))
              tripleQuoted = true;
            else
              return "string";
          }
          function t(stream2, state2) {
            var escaped = false, next, end = !tripleQuoted;
            while ((next = stream2.next()) != null) {
              if (next == quote && !escaped) {
                if (!tripleQuoted) {
                  break;
                }
                if (stream2.match(quote + quote)) {
                  end = true;
                  break;
                }
              }
              if (quote == '"' && next == "$" && !escaped && stream2.eat("{")) {
                state2.tokenize.push(tokenBaseUntilBrace());
                return "string";
              }
              escaped = !escaped && next == "\\";
            }
            if (end)
              state2.tokenize.pop();
            return "string";
          }
          state.tokenize.push(t);
          return t(stream, state);
        }
        function tokenBaseUntilBrace() {
          var depth = 1;
          function t(stream, state) {
            if (stream.peek() == "}") {
              depth--;
              if (depth == 0) {
                state.tokenize.pop();
                return state.tokenize[state.tokenize.length - 1](stream, state);
              }
            } else if (stream.peek() == "{") {
              depth++;
            }
            return tokenBase(stream, state);
          }
          t.isBase = true;
          return t;
        }
        function tokenComment(stream, state) {
          var maybeEnd = false, ch;
          while (ch = stream.next()) {
            if (ch == "/" && maybeEnd) {
              state.tokenize.pop();
              break;
            }
            maybeEnd = ch == "*";
          }
          return "comment";
        }
        function expectExpression(last, newline) {
          return !last || last == "operator" || last == "->" || /[\.\[\{\(,;:]/.test(last) || last == "newstatement" || last == "keyword" || last == "proplabel" || last == "standalone" && !newline;
        }
        function Context(indented, column, type, align, prev) {
          this.indented = indented;
          this.column = column;
          this.type = type;
          this.align = align;
          this.prev = prev;
        }
        function pushContext(state, col, type) {
          return state.context = new Context(state.indented, col, type, null, state.context);
        }
        function popContext(state) {
          var t = state.context.type;
          if (t == ")" || t == "]" || t == "}")
            state.indented = state.context.indented;
          return state.context = state.context.prev;
        }
        return {
          startState: function(basecolumn) {
            return {
              tokenize: [tokenBase],
              context: new Context((basecolumn || 0) - config.indentUnit, 0, "top", false),
              indented: 0,
              startOfLine: true,
              lastToken: null
            };
          },
          token: function(stream, state) {
            var ctx = state.context;
            if (stream.sol()) {
              if (ctx.align == null)
                ctx.align = false;
              state.indented = stream.indentation();
              state.startOfLine = true;
              if (ctx.type == "statement" && !expectExpression(state.lastToken, true)) {
                popContext(state);
                ctx = state.context;
              }
            }
            if (stream.eatSpace())
              return null;
            curPunc = null;
            var style = state.tokenize[state.tokenize.length - 1](stream, state);
            if (style == "comment")
              return style;
            if (ctx.align == null)
              ctx.align = true;
            if ((curPunc == ";" || curPunc == ":") && ctx.type == "statement")
              popContext(state);
            else if (curPunc == "->" && ctx.type == "statement" && ctx.prev.type == "}") {
              popContext(state);
              state.context.align = false;
            } else if (curPunc == "{")
              pushContext(state, stream.column(), "}");
            else if (curPunc == "[")
              pushContext(state, stream.column(), "]");
            else if (curPunc == "(")
              pushContext(state, stream.column(), ")");
            else if (curPunc == "}") {
              while (ctx.type == "statement")
                ctx = popContext(state);
              if (ctx.type == "}")
                ctx = popContext(state);
              while (ctx.type == "statement")
                ctx = popContext(state);
            } else if (curPunc == ctx.type)
              popContext(state);
            else if (ctx.type == "}" || ctx.type == "top" || ctx.type == "statement" && curPunc == "newstatement")
              pushContext(state, stream.column(), "statement");
            state.startOfLine = false;
            state.lastToken = curPunc || style;
            return style;
          },
          indent: function(state, textAfter) {
            if (!state.tokenize[state.tokenize.length - 1].isBase)
              return CodeMirror2.Pass;
            var firstChar = textAfter && textAfter.charAt(0), ctx = state.context;
            if (ctx.type == "statement" && !expectExpression(state.lastToken, true))
              ctx = ctx.prev;
            var closing = firstChar == ctx.type;
            if (ctx.type == "statement")
              return ctx.indented + (firstChar == "{" ? 0 : config.indentUnit);
            else if (ctx.align)
              return ctx.column + (closing ? 0 : 1);
            else
              return ctx.indented + (closing ? 0 : config.indentUnit);
          },
          electricChars: "{}",
          closeBrackets: { triples: `'"` },
          fold: "brace",
          blockCommentStart: "/*",
          blockCommentEnd: "*/",
          lineComment: "//"
        };
      });
      CodeMirror2.defineMIME("text/x-groovy", "groovy");
    });
  }
});

// mode/ruby/ruby.js
var require_ruby = __commonJS({
  "mode/ruby/ruby.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      function wordObj(words) {
        var o = {};
        for (var i = 0, e = words.length; i < e; ++i)
          o[words[i]] = true;
        return o;
      }
      var keywordList = [
        "alias",
        "and",
        "BEGIN",
        "begin",
        "break",
        "case",
        "class",
        "def",
        "defined?",
        "do",
        "else",
        "elsif",
        "END",
        "end",
        "ensure",
        "false",
        "for",
        "if",
        "in",
        "module",
        "next",
        "not",
        "or",
        "redo",
        "rescue",
        "retry",
        "return",
        "self",
        "super",
        "then",
        "true",
        "undef",
        "unless",
        "until",
        "when",
        "while",
        "yield",
        "nil",
        "raise",
        "throw",
        "catch",
        "fail",
        "loop",
        "callcc",
        "caller",
        "lambda",
        "proc",
        "public",
        "protected",
        "private",
        "require",
        "load",
        "require_relative",
        "extend",
        "autoload",
        "__END__",
        "__FILE__",
        "__LINE__",
        "__dir__"
      ], keywords = wordObj(keywordList);
      var indentWords = wordObj([
        "def",
        "class",
        "case",
        "for",
        "while",
        "until",
        "module",
        "then",
        "catch",
        "loop",
        "proc",
        "begin"
      ]);
      var dedentWords = wordObj(["end", "until"]);
      var opening = { "[": "]", "{": "}", "(": ")" };
      var closing = { "]": "[", "}": "{", ")": "(" };
      CodeMirror2.defineMode("ruby", function(config) {
        var curPunc;
        function chain(newtok, stream, state) {
          state.tokenize.push(newtok);
          return newtok(stream, state);
        }
        function tokenBase(stream, state) {
          if (stream.sol() && stream.match("=begin") && stream.eol()) {
            state.tokenize.push(readBlockComment);
            return "comment";
          }
          if (stream.eatSpace())
            return null;
          var ch = stream.next(), m;
          if (ch == "`" || ch == "'" || ch == '"') {
            return chain(readQuoted(ch, "string", ch == '"' || ch == "`"), stream, state);
          } else if (ch == "/") {
            if (regexpAhead(stream))
              return chain(readQuoted(ch, "string-2", true), stream, state);
            else
              return "operator";
          } else if (ch == "%") {
            var style = "string", embed = true;
            if (stream.eat("s"))
              style = "atom";
            else if (stream.eat(/[WQ]/))
              style = "string";
            else if (stream.eat(/[r]/))
              style = "string-2";
            else if (stream.eat(/[wxq]/)) {
              style = "string";
              embed = false;
            }
            var delim = stream.eat(/[^\w\s=]/);
            if (!delim)
              return "operator";
            if (opening.propertyIsEnumerable(delim))
              delim = opening[delim];
            return chain(readQuoted(delim, style, embed, true), stream, state);
          } else if (ch == "#") {
            stream.skipToEnd();
            return "comment";
          } else if (ch == "<" && (m = stream.match(/^<([-~])[\`\"\']?([a-zA-Z_?]\w*)[\`\"\']?(?:;|$)/))) {
            return chain(readHereDoc(m[2], m[1]), stream, state);
          } else if (ch == "0") {
            if (stream.eat("x"))
              stream.eatWhile(/[\da-fA-F]/);
            else if (stream.eat("b"))
              stream.eatWhile(/[01]/);
            else
              stream.eatWhile(/[0-7]/);
            return "number";
          } else if (/\d/.test(ch)) {
            stream.match(/^[\d_]*(?:\.[\d_]+)?(?:[eE][+\-]?[\d_]+)?/);
            return "number";
          } else if (ch == "?") {
            while (stream.match(/^\\[CM]-/)) {
            }
            if (stream.eat("\\"))
              stream.eatWhile(/\w/);
            else
              stream.next();
            return "string";
          } else if (ch == ":") {
            if (stream.eat("'"))
              return chain(readQuoted("'", "atom", false), stream, state);
            if (stream.eat('"'))
              return chain(readQuoted('"', "atom", true), stream, state);
            if (stream.eat(/[\<\>]/)) {
              stream.eat(/[\<\>]/);
              return "atom";
            }
            if (stream.eat(/[\+\-\*\/\&\|\:\!]/)) {
              return "atom";
            }
            if (stream.eat(/[a-zA-Z$@_\xa1-\uffff]/)) {
              stream.eatWhile(/[\w$\xa1-\uffff]/);
              stream.eat(/[\?\!\=]/);
              return "atom";
            }
            return "operator";
          } else if (ch == "@" && stream.match(/^@?[a-zA-Z_\xa1-\uffff]/)) {
            stream.eat("@");
            stream.eatWhile(/[\w\xa1-\uffff]/);
            return "variable-2";
          } else if (ch == "$") {
            if (stream.eat(/[a-zA-Z_]/)) {
              stream.eatWhile(/[\w]/);
            } else if (stream.eat(/\d/)) {
              stream.eat(/\d/);
            } else {
              stream.next();
            }
            return "variable-3";
          } else if (/[a-zA-Z_\xa1-\uffff]/.test(ch)) {
            stream.eatWhile(/[\w\xa1-\uffff]/);
            stream.eat(/[\?\!]/);
            if (stream.eat(":"))
              return "atom";
            return "ident";
          } else if (ch == "|" && (state.varList || state.lastTok == "{" || state.lastTok == "do")) {
            curPunc = "|";
            return null;
          } else if (/[\(\)\[\]{}\\;]/.test(ch)) {
            curPunc = ch;
            return null;
          } else if (ch == "-" && stream.eat(">")) {
            return "arrow";
          } else if (/[=+\-\/*:\.^%<>~|]/.test(ch)) {
            var more = stream.eatWhile(/[=+\-\/*:\.^%<>~|]/);
            if (ch == "." && !more)
              curPunc = ".";
            return "operator";
          } else {
            return null;
          }
        }
        function regexpAhead(stream) {
          var start = stream.pos, depth = 0, next, found = false, escaped = false;
          while ((next = stream.next()) != null) {
            if (!escaped) {
              if ("[{(".indexOf(next) > -1) {
                depth++;
              } else if ("]})".indexOf(next) > -1) {
                depth--;
                if (depth < 0)
                  break;
              } else if (next == "/" && depth == 0) {
                found = true;
                break;
              }
              escaped = next == "\\";
            } else {
              escaped = false;
            }
          }
          stream.backUp(stream.pos - start);
          return found;
        }
        function tokenBaseUntilBrace(depth) {
          if (!depth)
            depth = 1;
          return function(stream, state) {
            if (stream.peek() == "}") {
              if (depth == 1) {
                state.tokenize.pop();
                return state.tokenize[state.tokenize.length - 1](stream, state);
              } else {
                state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth - 1);
              }
            } else if (stream.peek() == "{") {
              state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth + 1);
            }
            return tokenBase(stream, state);
          };
        }
        function tokenBaseOnce() {
          var alreadyCalled = false;
          return function(stream, state) {
            if (alreadyCalled) {
              state.tokenize.pop();
              return state.tokenize[state.tokenize.length - 1](stream, state);
            }
            alreadyCalled = true;
            return tokenBase(stream, state);
          };
        }
        function readQuoted(quote, style, embed, unescaped) {
          return function(stream, state) {
            var escaped = false, ch;
            if (state.context.type === "read-quoted-paused") {
              state.context = state.context.prev;
              stream.eat("}");
            }
            while ((ch = stream.next()) != null) {
              if (ch == quote && (unescaped || !escaped)) {
                state.tokenize.pop();
                break;
              }
              if (embed && ch == "#" && !escaped) {
                if (stream.eat("{")) {
                  if (quote == "}") {
                    state.context = { prev: state.context, type: "read-quoted-paused" };
                  }
                  state.tokenize.push(tokenBaseUntilBrace());
                  break;
                } else if (/[@\$]/.test(stream.peek())) {
                  state.tokenize.push(tokenBaseOnce());
                  break;
                }
              }
              escaped = !escaped && ch == "\\";
            }
            return style;
          };
        }
        function readHereDoc(phrase, mayIndent) {
          return function(stream, state) {
            if (mayIndent)
              stream.eatSpace();
            if (stream.match(phrase))
              state.tokenize.pop();
            else
              stream.skipToEnd();
            return "string";
          };
        }
        function readBlockComment(stream, state) {
          if (stream.sol() && stream.match("=end") && stream.eol())
            state.tokenize.pop();
          stream.skipToEnd();
          return "comment";
        }
        return {
          startState: function() {
            return {
              tokenize: [tokenBase],
              indented: 0,
              context: { type: "top", indented: -config.indentUnit },
              continuedLine: false,
              lastTok: null,
              varList: false
            };
          },
          token: function(stream, state) {
            curPunc = null;
            if (stream.sol())
              state.indented = stream.indentation();
            var style = state.tokenize[state.tokenize.length - 1](stream, state), kwtype;
            var thisTok = curPunc;
            if (style == "ident") {
              var word = stream.current();
              style = state.lastTok == "." ? "property" : keywords.propertyIsEnumerable(stream.current()) ? "keyword" : /^[A-Z]/.test(word) ? "tag" : state.lastTok == "def" || state.lastTok == "class" || state.varList ? "def" : "variable";
              if (style == "keyword") {
                thisTok = word;
                if (indentWords.propertyIsEnumerable(word))
                  kwtype = "indent";
                else if (dedentWords.propertyIsEnumerable(word))
                  kwtype = "dedent";
                else if ((word == "if" || word == "unless") && stream.column() == stream.indentation())
                  kwtype = "indent";
                else if (word == "do" && state.context.indented < state.indented)
                  kwtype = "indent";
              }
            }
            if (curPunc || style && style != "comment")
              state.lastTok = thisTok;
            if (curPunc == "|")
              state.varList = !state.varList;
            if (kwtype == "indent" || /[\(\[\{]/.test(curPunc))
              state.context = { prev: state.context, type: curPunc || style, indented: state.indented };
            else if ((kwtype == "dedent" || /[\)\]\}]/.test(curPunc)) && state.context.prev)
              state.context = state.context.prev;
            if (stream.eol())
              state.continuedLine = curPunc == "\\" || style == "operator";
            return style;
          },
          indent: function(state, textAfter) {
            if (state.tokenize[state.tokenize.length - 1] != tokenBase)
              return CodeMirror2.Pass;
            var firstChar = textAfter && textAfter.charAt(0);
            var ct = state.context;
            var closed = ct.type == closing[firstChar] || ct.type == "keyword" && /^(?:end|until|else|elsif|when|rescue)\b/.test(textAfter);
            return ct.indented + (closed ? 0 : config.indentUnit) + (state.continuedLine ? config.indentUnit : 0);
          },
          electricInput: /^\s*(?:end|rescue|elsif|else|\})$/,
          lineComment: "#",
          fold: "indent"
        };
      });
      CodeMirror2.defineMIME("text/x-ruby", "ruby");
      CodeMirror2.registerHelper("hintWords", "ruby", keywordList);
    });
  }
});

// mode/haml/haml.js
var require_haml = __commonJS({
  "mode/haml/haml.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror(), require_htmlmixed(), require_ruby());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror", "../htmlmixed/htmlmixed", "../ruby/ruby"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("haml", function(config) {
        var htmlMode = CodeMirror2.getMode(config, { name: "htmlmixed" });
        var rubyMode = CodeMirror2.getMode(config, "ruby");
        function rubyInQuote(endQuote) {
          return function(stream, state) {
            var ch = stream.peek();
            if (ch == endQuote && state.rubyState.tokenize.length == 1) {
              stream.next();
              state.tokenize = html;
              return "closeAttributeTag";
            } else {
              return ruby(stream, state);
            }
          };
        }
        function ruby(stream, state) {
          if (stream.match("-#")) {
            stream.skipToEnd();
            return "comment";
          }
          return rubyMode.token(stream, state.rubyState);
        }
        function html(stream, state) {
          var ch = stream.peek();
          if (state.previousToken.style == "comment") {
            if (state.indented > state.previousToken.indented) {
              stream.skipToEnd();
              return "commentLine";
            }
          }
          if (state.startOfLine) {
            if (ch == "!" && stream.match("!!")) {
              stream.skipToEnd();
              return "tag";
            } else if (stream.match(/^%[\w:#\.]+=/)) {
              state.tokenize = ruby;
              return "hamlTag";
            } else if (stream.match(/^%[\w:]+/)) {
              return "hamlTag";
            } else if (ch == "/") {
              stream.skipToEnd();
              return "comment";
            }
          }
          if (state.startOfLine || state.previousToken.style == "hamlTag") {
            if (ch == "#" || ch == ".") {
              stream.match(/[\w-#\.]*/);
              return "hamlAttribute";
            }
          }
          if (state.startOfLine && !stream.match("-->", false) && (ch == "=" || ch == "-")) {
            state.tokenize = ruby;
            return state.tokenize(stream, state);
          }
          if (state.previousToken.style == "hamlTag" || state.previousToken.style == "closeAttributeTag" || state.previousToken.style == "hamlAttribute") {
            if (ch == "(") {
              state.tokenize = rubyInQuote(")");
              return state.tokenize(stream, state);
            } else if (ch == "{") {
              if (!stream.match(/^\{%.*/)) {
                state.tokenize = rubyInQuote("}");
                return state.tokenize(stream, state);
              }
            }
          }
          return htmlMode.token(stream, state.htmlState);
        }
        return {
          // default to html mode
          startState: function() {
            var htmlState = CodeMirror2.startState(htmlMode);
            var rubyState = CodeMirror2.startState(rubyMode);
            return {
              htmlState,
              rubyState,
              indented: 0,
              previousToken: { style: null, indented: 0 },
              tokenize: html
            };
          },
          copyState: function(state) {
            return {
              htmlState: CodeMirror2.copyState(htmlMode, state.htmlState),
              rubyState: CodeMirror2.copyState(rubyMode, state.rubyState),
              indented: state.indented,
              previousToken: state.previousToken,
              tokenize: state.tokenize
            };
          },
          token: function(stream, state) {
            if (stream.sol()) {
              state.indented = stream.indentation();
              state.startOfLine = true;
            }
            if (stream.eatSpace())
              return null;
            var style = state.tokenize(stream, state);
            state.startOfLine = false;
            if (style && style != "commentLine") {
              state.previousToken = { style, indented: state.indented };
            }
            if (stream.eol() && state.tokenize == ruby) {
              stream.backUp(1);
              var ch = stream.peek();
              stream.next();
              if (ch && ch != ",") {
                state.tokenize = html;
              }
            }
            if (style == "hamlTag") {
              style = "tag";
            } else if (style == "commentLine") {
              style = "comment";
            } else if (style == "hamlAttribute") {
              style = "attribute";
            } else if (style == "closeAttributeTag") {
              style = null;
            }
            return style;
          }
        };
      }, "htmlmixed", "ruby");
      CodeMirror2.defineMIME("text/x-haml", "haml");
    });
  }
});

// addon/mode/multiplex.js
var require_multiplex = __commonJS({
  "addon/mode/multiplex.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
    });
  }
});

// mode/handlebars/handlebars.js
var require_handlebars = __commonJS({
  "mode/handlebars/handlebars.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror(), require_simple(), require_multiplex());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror", "../../addon/mode/simple", "../../addon/mode/multiplex"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineSimpleMode("handlebars-tags", {
        start: [
          { regex: /\{\{\{/, push: "handlebars_raw", token: "tag" },
          { regex: /\{\{!--/, push: "dash_comment", token: "comment" },
          { regex: /\{\{!/, push: "comment", token: "comment" },
          { regex: /\{\{/, push: "handlebars", token: "tag" }
        ],
        handlebars_raw: [
          { regex: /\}\}\}/, pop: true, token: "tag" }
        ],
        handlebars: [
          { regex: /\}\}/, pop: true, token: "tag" },
          // Double and single quotes
          { regex: /"(?:[^\\"]|\\.)*"?/, token: "string" },
          { regex: /'(?:[^\\']|\\.)*'?/, token: "string" },
          // Handlebars keywords
          { regex: />|[#\/]([A-Za-z_]\w*)/, token: "keyword" },
          { regex: /(?:else|this)\b/, token: "keyword" },
          // Numeral
          { regex: /\d+/i, token: "number" },
          // Atoms like = and .
          { regex: /=|~|@|true|false/, token: "atom" },
          // Paths
          { regex: /(?:\.\.\/)*(?:[A-Za-z_][\w\.]*)+/, token: "variable-2" }
        ],
        dash_comment: [
          { regex: /--\}\}/, pop: true, token: "comment" },
          // Commented code
          { regex: /./, token: "comment" }
        ],
        comment: [
          { regex: /\}\}/, pop: true, token: "comment" },
          { regex: /./, token: "comment" }
        ],
        meta: {
          blockCommentStart: "{{--",
          blockCommentEnd: "--}}"
        }
      });
      CodeMirror2.defineMode("handlebars", function(config, parserConfig) {
        var handlebars = CodeMirror2.getMode(config, "handlebars-tags");
        if (!parserConfig || !parserConfig.base)
          return handlebars;
        return CodeMirror2.multiplexingMode(
          CodeMirror2.getMode(config, parserConfig.base),
          { open: "{{", close: /\}\}\}?/, mode: handlebars, parseDelimiters: true }
        );
      });
      CodeMirror2.defineMIME("text/x-handlebars-template", "handlebars");
    });
  }
});

// mode/haskell/haskell.js
var require_haskell = __commonJS({
  "mode/haskell/haskell.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("haskell", function(_config, modeConfig) {
        function switchState(source, setState, f) {
          setState(f);
          return f(source, setState);
        }
        var smallRE = /[a-z_]/;
        var largeRE = /[A-Z]/;
        var digitRE = /\d/;
        var hexitRE = /[0-9A-Fa-f]/;
        var octitRE = /[0-7]/;
        var idRE = /[a-z_A-Z0-9'\xa1-\uffff]/;
        var symbolRE = /[-!#$%&*+.\/<=>?@\\^|~:]/;
        var specialRE = /[(),;[\]`{}]/;
        var whiteCharRE = /[ \t\v\f]/;
        function normal(source, setState) {
          if (source.eatWhile(whiteCharRE)) {
            return null;
          }
          var ch = source.next();
          if (specialRE.test(ch)) {
            if (ch == "{" && source.eat("-")) {
              var t = "comment";
              if (source.eat("#")) {
                t = "meta";
              }
              return switchState(source, setState, ncomment(t, 1));
            }
            return null;
          }
          if (ch == "'") {
            if (source.eat("\\")) {
              source.next();
            } else {
              source.next();
            }
            if (source.eat("'")) {
              return "string";
            }
            return "string error";
          }
          if (ch == '"') {
            return switchState(source, setState, stringLiteral);
          }
          if (largeRE.test(ch)) {
            source.eatWhile(idRE);
            if (source.eat(".")) {
              return "qualifier";
            }
            return "variable-2";
          }
          if (smallRE.test(ch)) {
            source.eatWhile(idRE);
            return "variable";
          }
          if (digitRE.test(ch)) {
            if (ch == "0") {
              if (source.eat(/[xX]/)) {
                source.eatWhile(hexitRE);
                return "integer";
              }
              if (source.eat(/[oO]/)) {
                source.eatWhile(octitRE);
                return "number";
              }
            }
            source.eatWhile(digitRE);
            var t = "number";
            if (source.match(/^\.\d+/)) {
              t = "number";
            }
            if (source.eat(/[eE]/)) {
              t = "number";
              source.eat(/[-+]/);
              source.eatWhile(digitRE);
            }
            return t;
          }
          if (ch == "." && source.eat("."))
            return "keyword";
          if (symbolRE.test(ch)) {
            if (ch == "-" && source.eat(/-/)) {
              source.eatWhile(/-/);
              if (!source.eat(symbolRE)) {
                source.skipToEnd();
                return "comment";
              }
            }
            var t = "variable";
            if (ch == ":") {
              t = "variable-2";
            }
            source.eatWhile(symbolRE);
            return t;
          }
          return "error";
        }
        function ncomment(type, nest) {
          if (nest == 0) {
            return normal;
          }
          return function(source, setState) {
            var currNest = nest;
            while (!source.eol()) {
              var ch = source.next();
              if (ch == "{" && source.eat("-")) {
                ++currNest;
              } else if (ch == "-" && source.eat("}")) {
                --currNest;
                if (currNest == 0) {
                  setState(normal);
                  return type;
                }
              }
            }
            setState(ncomment(type, currNest));
            return type;
          };
        }
        function stringLiteral(source, setState) {
          while (!source.eol()) {
            var ch = source.next();
            if (ch == '"') {
              setState(normal);
              return "string";
            }
            if (ch == "\\") {
              if (source.eol() || source.eat(whiteCharRE)) {
                setState(stringGap);
                return "string";
              }
              if (source.eat("&")) {
              } else {
                source.next();
              }
            }
          }
          setState(normal);
          return "string error";
        }
        function stringGap(source, setState) {
          if (source.eat("\\")) {
            return switchState(source, setState, stringLiteral);
          }
          source.next();
          setState(normal);
          return "error";
        }
        var wellKnownWords = function() {
          var wkw = {};
          function setType(t) {
            return function() {
              for (var i = 0; i < arguments.length; i++)
                wkw[arguments[i]] = t;
            };
          }
          setType("keyword")(
            "case",
            "class",
            "data",
            "default",
            "deriving",
            "do",
            "else",
            "foreign",
            "if",
            "import",
            "in",
            "infix",
            "infixl",
            "infixr",
            "instance",
            "let",
            "module",
            "newtype",
            "of",
            "then",
            "type",
            "where",
            "_"
          );
          setType("keyword")(
            "..",
            ":",
            "::",
            "=",
            "\\",
            "<-",
            "->",
            "@",
            "~",
            "=>"
          );
          setType("builtin")(
            "!!",
            "$!",
            "$",
            "&&",
            "+",
            "++",
            "-",
            ".",
            "/",
            "/=",
            "<",
            "<*",
            "<=",
            "<$>",
            "<*>",
            "=<<",
            "==",
            ">",
            ">=",
            ">>",
            ">>=",
            "^",
            "^^",
            "||",
            "*",
            "*>",
            "**"
          );
          setType("builtin")(
            "Applicative",
            "Bool",
            "Bounded",
            "Char",
            "Double",
            "EQ",
            "Either",
            "Enum",
            "Eq",
            "False",
            "FilePath",
            "Float",
            "Floating",
            "Fractional",
            "Functor",
            "GT",
            "IO",
            "IOError",
            "Int",
            "Integer",
            "Integral",
            "Just",
            "LT",
            "Left",
            "Maybe",
            "Monad",
            "Nothing",
            "Num",
            "Ord",
            "Ordering",
            "Rational",
            "Read",
            "ReadS",
            "Real",
            "RealFloat",
            "RealFrac",
            "Right",
            "Show",
            "ShowS",
            "String",
            "True"
          );
          setType("builtin")(
            "abs",
            "acos",
            "acosh",
            "all",
            "and",
            "any",
            "appendFile",
            "asTypeOf",
            "asin",
            "asinh",
            "atan",
            "atan2",
            "atanh",
            "break",
            "catch",
            "ceiling",
            "compare",
            "concat",
            "concatMap",
            "const",
            "cos",
            "cosh",
            "curry",
            "cycle",
            "decodeFloat",
            "div",
            "divMod",
            "drop",
            "dropWhile",
            "either",
            "elem",
            "encodeFloat",
            "enumFrom",
            "enumFromThen",
            "enumFromThenTo",
            "enumFromTo",
            "error",
            "even",
            "exp",
            "exponent",
            "fail",
            "filter",
            "flip",
            "floatDigits",
            "floatRadix",
            "floatRange",
            "floor",
            "fmap",
            "foldl",
            "foldl1",
            "foldr",
            "foldr1",
            "fromEnum",
            "fromInteger",
            "fromIntegral",
            "fromRational",
            "fst",
            "gcd",
            "getChar",
            "getContents",
            "getLine",
            "head",
            "id",
            "init",
            "interact",
            "ioError",
            "isDenormalized",
            "isIEEE",
            "isInfinite",
            "isNaN",
            "isNegativeZero",
            "iterate",
            "last",
            "lcm",
            "length",
            "lex",
            "lines",
            "log",
            "logBase",
            "lookup",
            "map",
            "mapM",
            "mapM_",
            "max",
            "maxBound",
            "maximum",
            "maybe",
            "min",
            "minBound",
            "minimum",
            "mod",
            "negate",
            "not",
            "notElem",
            "null",
            "odd",
            "or",
            "otherwise",
            "pi",
            "pred",
            "print",
            "product",
            "properFraction",
            "pure",
            "putChar",
            "putStr",
            "putStrLn",
            "quot",
            "quotRem",
            "read",
            "readFile",
            "readIO",
            "readList",
            "readLn",
            "readParen",
            "reads",
            "readsPrec",
            "realToFrac",
            "recip",
            "rem",
            "repeat",
            "replicate",
            "return",
            "reverse",
            "round",
            "scaleFloat",
            "scanl",
            "scanl1",
            "scanr",
            "scanr1",
            "seq",
            "sequence",
            "sequence_",
            "show",
            "showChar",
            "showList",
            "showParen",
            "showString",
            "shows",
            "showsPrec",
            "significand",
            "signum",
            "sin",
            "sinh",
            "snd",
            "span",
            "splitAt",
            "sqrt",
            "subtract",
            "succ",
            "sum",
            "tail",
            "take",
            "takeWhile",
            "tan",
            "tanh",
            "toEnum",
            "toInteger",
            "toRational",
            "truncate",
            "uncurry",
            "undefined",
            "unlines",
            "until",
            "unwords",
            "unzip",
            "unzip3",
            "userError",
            "words",
            "writeFile",
            "zip",
            "zip3",
            "zipWith",
            "zipWith3"
          );
          var override = modeConfig.overrideKeywords;
          if (override) {
            for (var word in override)
              if (override.hasOwnProperty(word))
                wkw[word] = override[word];
          }
          return wkw;
        }();
        return {
          startState: function() {
            return { f: normal };
          },
          copyState: function(s) {
            return { f: s.f };
          },
          token: function(stream, state) {
            var t = state.f(stream, function(s) {
              state.f = s;
            });
            var w = stream.current();
            return wellKnownWords.hasOwnProperty(w) ? wellKnownWords[w] : t;
          },
          blockCommentStart: "{-",
          blockCommentEnd: "-}",
          lineComment: "--"
        };
      });
      CodeMirror2.defineMIME("text/x-haskell", "haskell");
    });
  }
});

// mode/haskell-literate/haskell-literate.js
var require_haskell_literate = __commonJS({
  "mode/haskell-literate/haskell-literate.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror(), require_haskell());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror", "../haskell/haskell"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("haskell-literate", function(config, parserConfig) {
        var baseMode = CodeMirror2.getMode(config, parserConfig && parserConfig.base || "haskell");
        return {
          startState: function() {
            return {
              inCode: false,
              baseState: CodeMirror2.startState(baseMode)
            };
          },
          token: function(stream, state) {
            if (stream.sol()) {
              if (state.inCode = stream.eat(">"))
                return "meta";
            }
            if (state.inCode) {
              return baseMode.token(stream, state.baseState);
            } else {
              stream.skipToEnd();
              return "comment";
            }
          },
          innerMode: function(state) {
            return state.inCode ? { state: state.baseState, mode: baseMode } : null;
          }
        };
      }, "haskell");
      CodeMirror2.defineMIME("text/x-literate-haskell", "haskell-literate");
    });
  }
});

// mode/haxe/haxe.js
var require_haxe = __commonJS({
  "mode/haxe/haxe.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("haxe", function(config, parserConfig) {
        var indentUnit = config.indentUnit;
        function kw(type2) {
          return { type: type2, style: "keyword" };
        }
        var A = kw("keyword a"), B = kw("keyword b"), C = kw("keyword c");
        var operator = kw("operator"), atom = { type: "atom", style: "atom" }, attribute = { type: "attribute", style: "attribute" };
        var type = kw("typedef");
        var keywords = {
          "if": A,
          "while": A,
          "else": B,
          "do": B,
          "try": B,
          "return": C,
          "break": C,
          "continue": C,
          "new": C,
          "throw": C,
          "var": kw("var"),
          "inline": attribute,
          "static": attribute,
          "using": kw("import"),
          "public": attribute,
          "private": attribute,
          "cast": kw("cast"),
          "import": kw("import"),
          "macro": kw("macro"),
          "function": kw("function"),
          "catch": kw("catch"),
          "untyped": kw("untyped"),
          "callback": kw("cb"),
          "for": kw("for"),
          "switch": kw("switch"),
          "case": kw("case"),
          "default": kw("default"),
          "in": operator,
          "never": kw("property_access"),
          "trace": kw("trace"),
          "class": type,
          "abstract": type,
          "enum": type,
          "interface": type,
          "typedef": type,
          "extends": type,
          "implements": type,
          "dynamic": type,
          "true": atom,
          "false": atom,
          "null": atom
        };
        var isOperatorChar = /[+\-*&%=<>!?|]/;
        function chain(stream, state, f) {
          state.tokenize = f;
          return f(stream, state);
        }
        function toUnescaped(stream, end) {
          var escaped = false, next;
          while ((next = stream.next()) != null) {
            if (next == end && !escaped)
              return true;
            escaped = !escaped && next == "\\";
          }
        }
        var type, content;
        function ret(tp, style, cont2) {
          type = tp;
          content = cont2;
          return style;
        }
        function haxeTokenBase(stream, state) {
          var ch = stream.next();
          if (ch == '"' || ch == "'") {
            return chain(stream, state, haxeTokenString(ch));
          } else if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
            return ret(ch);
          } else if (ch == "0" && stream.eat(/x/i)) {
            stream.eatWhile(/[\da-f]/i);
            return ret("number", "number");
          } else if (/\d/.test(ch) || ch == "-" && stream.eat(/\d/)) {
            stream.match(/^\d*(?:\.\d*(?!\.))?(?:[eE][+\-]?\d+)?/);
            return ret("number", "number");
          } else if (state.reAllowed && (ch == "~" && stream.eat(/\//))) {
            toUnescaped(stream, "/");
            stream.eatWhile(/[gimsu]/);
            return ret("regexp", "string-2");
          } else if (ch == "/") {
            if (stream.eat("*")) {
              return chain(stream, state, haxeTokenComment);
            } else if (stream.eat("/")) {
              stream.skipToEnd();
              return ret("comment", "comment");
            } else {
              stream.eatWhile(isOperatorChar);
              return ret("operator", null, stream.current());
            }
          } else if (ch == "#") {
            stream.skipToEnd();
            return ret("conditional", "meta");
          } else if (ch == "@") {
            stream.eat(/:/);
            stream.eatWhile(/[\w_]/);
            return ret("metadata", "meta");
          } else if (isOperatorChar.test(ch)) {
            stream.eatWhile(isOperatorChar);
            return ret("operator", null, stream.current());
          } else {
            var word;
            if (/[A-Z]/.test(ch)) {
              stream.eatWhile(/[\w_<>]/);
              word = stream.current();
              return ret("type", "variable-3", word);
            } else {
              stream.eatWhile(/[\w_]/);
              var word = stream.current(), known = keywords.propertyIsEnumerable(word) && keywords[word];
              return known && state.kwAllowed ? ret(known.type, known.style, word) : ret("variable", "variable", word);
            }
          }
        }
        function haxeTokenString(quote) {
          return function(stream, state) {
            if (toUnescaped(stream, quote))
              state.tokenize = haxeTokenBase;
            return ret("string", "string");
          };
        }
        function haxeTokenComment(stream, state) {
          var maybeEnd = false, ch;
          while (ch = stream.next()) {
            if (ch == "/" && maybeEnd) {
              state.tokenize = haxeTokenBase;
              break;
            }
            maybeEnd = ch == "*";
          }
          return ret("comment", "comment");
        }
        var atomicTypes = { "atom": true, "number": true, "variable": true, "string": true, "regexp": true };
        function HaxeLexical(indented, column, type2, align, prev, info) {
          this.indented = indented;
          this.column = column;
          this.type = type2;
          this.prev = prev;
          this.info = info;
          if (align != null)
            this.align = align;
        }
        function inScope(state, varname) {
          for (var v = state.localVars; v; v = v.next)
            if (v.name == varname)
              return true;
        }
        function parseHaxe(state, style, type2, content2, stream) {
          var cc = state.cc;
          cx.state = state;
          cx.stream = stream;
          cx.marked = null, cx.cc = cc;
          if (!state.lexical.hasOwnProperty("align"))
            state.lexical.align = true;
          while (true) {
            var combinator = cc.length ? cc.pop() : statement;
            if (combinator(type2, content2)) {
              while (cc.length && cc[cc.length - 1].lex)
                cc.pop()();
              if (cx.marked)
                return cx.marked;
              if (type2 == "variable" && inScope(state, content2))
                return "variable-2";
              if (type2 == "variable" && imported(state, content2))
                return "variable-3";
              return style;
            }
          }
        }
        function imported(state, typename) {
          if (/[a-z]/.test(typename.charAt(0)))
            return false;
          var len = state.importedtypes.length;
          for (var i = 0; i < len; i++)
            if (state.importedtypes[i] == typename)
              return true;
        }
        function registerimport(importname) {
          var state = cx.state;
          for (var t = state.importedtypes; t; t = t.next)
            if (t.name == importname)
              return;
          state.importedtypes = { name: importname, next: state.importedtypes };
        }
        var cx = { state: null, column: null, marked: null, cc: null };
        function pass() {
          for (var i = arguments.length - 1; i >= 0; i--)
            cx.cc.push(arguments[i]);
        }
        function cont() {
          pass.apply(null, arguments);
          return true;
        }
        function inList(name, list) {
          for (var v = list; v; v = v.next)
            if (v.name == name)
              return true;
          return false;
        }
        function register(varname) {
          var state = cx.state;
          if (state.context) {
            cx.marked = "def";
            if (inList(varname, state.localVars))
              return;
            state.localVars = { name: varname, next: state.localVars };
          } else if (state.globalVars) {
            if (inList(varname, state.globalVars))
              return;
            state.globalVars = { name: varname, next: state.globalVars };
          }
        }
        var defaultVars = { name: "this", next: null };
        function pushcontext() {
          if (!cx.state.context)
            cx.state.localVars = defaultVars;
          cx.state.context = { prev: cx.state.context, vars: cx.state.localVars };
        }
        function popcontext() {
          cx.state.localVars = cx.state.context.vars;
          cx.state.context = cx.state.context.prev;
        }
        popcontext.lex = true;
        function pushlex(type2, info) {
          var result = function() {
            var state = cx.state;
            state.lexical = new HaxeLexical(state.indented, cx.stream.column(), type2, null, state.lexical, info);
          };
          result.lex = true;
          return result;
        }
        function poplex() {
          var state = cx.state;
          if (state.lexical.prev) {
            if (state.lexical.type == ")")
              state.indented = state.lexical.indented;
            state.lexical = state.lexical.prev;
          }
        }
        poplex.lex = true;
        function expect(wanted) {
          function f(type2) {
            if (type2 == wanted)
              return cont();
            else if (wanted == ";")
              return pass();
            else
              return cont(f);
          }
          return f;
        }
        function statement(type2) {
          if (type2 == "@")
            return cont(metadef);
          if (type2 == "var")
            return cont(pushlex("vardef"), vardef1, expect(";"), poplex);
          if (type2 == "keyword a")
            return cont(pushlex("form"), expression, statement, poplex);
          if (type2 == "keyword b")
            return cont(pushlex("form"), statement, poplex);
          if (type2 == "{")
            return cont(pushlex("}"), pushcontext, block, poplex, popcontext);
          if (type2 == ";")
            return cont();
          if (type2 == "attribute")
            return cont(maybeattribute);
          if (type2 == "function")
            return cont(functiondef);
          if (type2 == "for")
            return cont(
              pushlex("form"),
              expect("("),
              pushlex(")"),
              forspec1,
              expect(")"),
              poplex,
              statement,
              poplex
            );
          if (type2 == "variable")
            return cont(pushlex("stat"), maybelabel);
          if (type2 == "switch")
            return cont(
              pushlex("form"),
              expression,
              pushlex("}", "switch"),
              expect("{"),
              block,
              poplex,
              poplex
            );
          if (type2 == "case")
            return cont(expression, expect(":"));
          if (type2 == "default")
            return cont(expect(":"));
          if (type2 == "catch")
            return cont(
              pushlex("form"),
              pushcontext,
              expect("("),
              funarg,
              expect(")"),
              statement,
              poplex,
              popcontext
            );
          if (type2 == "import")
            return cont(importdef, expect(";"));
          if (type2 == "typedef")
            return cont(typedef);
          return pass(pushlex("stat"), expression, expect(";"), poplex);
        }
        function expression(type2) {
          if (atomicTypes.hasOwnProperty(type2))
            return cont(maybeoperator);
          if (type2 == "type")
            return cont(maybeoperator);
          if (type2 == "function")
            return cont(functiondef);
          if (type2 == "keyword c")
            return cont(maybeexpression);
          if (type2 == "(")
            return cont(pushlex(")"), maybeexpression, expect(")"), poplex, maybeoperator);
          if (type2 == "operator")
            return cont(expression);
          if (type2 == "[")
            return cont(pushlex("]"), commasep(maybeexpression, "]"), poplex, maybeoperator);
          if (type2 == "{")
            return cont(pushlex("}"), commasep(objprop, "}"), poplex, maybeoperator);
          return cont();
        }
        function maybeexpression(type2) {
          if (type2.match(/[;\}\)\],]/))
            return pass();
          return pass(expression);
        }
        function maybeoperator(type2, value) {
          if (type2 == "operator" && /\+\+|--/.test(value))
            return cont(maybeoperator);
          if (type2 == "operator" || type2 == ":")
            return cont(expression);
          if (type2 == ";")
            return;
          if (type2 == "(")
            return cont(pushlex(")"), commasep(expression, ")"), poplex, maybeoperator);
          if (type2 == ".")
            return cont(property, maybeoperator);
          if (type2 == "[")
            return cont(pushlex("]"), expression, expect("]"), poplex, maybeoperator);
        }
        function maybeattribute(type2) {
          if (type2 == "attribute")
            return cont(maybeattribute);
          if (type2 == "function")
            return cont(functiondef);
          if (type2 == "var")
            return cont(vardef1);
        }
        function metadef(type2) {
          if (type2 == ":")
            return cont(metadef);
          if (type2 == "variable")
            return cont(metadef);
          if (type2 == "(")
            return cont(pushlex(")"), commasep(metaargs, ")"), poplex, statement);
        }
        function metaargs(type2) {
          if (type2 == "variable")
            return cont();
        }
        function importdef(type2, value) {
          if (type2 == "variable" && /[A-Z]/.test(value.charAt(0))) {
            registerimport(value);
            return cont();
          } else if (type2 == "variable" || type2 == "property" || type2 == "." || value == "*")
            return cont(importdef);
        }
        function typedef(type2, value) {
          if (type2 == "variable" && /[A-Z]/.test(value.charAt(0))) {
            registerimport(value);
            return cont();
          } else if (type2 == "type" && /[A-Z]/.test(value.charAt(0))) {
            return cont();
          }
        }
        function maybelabel(type2) {
          if (type2 == ":")
            return cont(poplex, statement);
          return pass(maybeoperator, expect(";"), poplex);
        }
        function property(type2) {
          if (type2 == "variable") {
            cx.marked = "property";
            return cont();
          }
        }
        function objprop(type2) {
          if (type2 == "variable")
            cx.marked = "property";
          if (atomicTypes.hasOwnProperty(type2))
            return cont(expect(":"), expression);
        }
        function commasep(what, end) {
          function proceed(type2) {
            if (type2 == ",")
              return cont(what, proceed);
            if (type2 == end)
              return cont();
            return cont(expect(end));
          }
          return function(type2) {
            if (type2 == end)
              return cont();
            else
              return pass(what, proceed);
          };
        }
        function block(type2) {
          if (type2 == "}")
            return cont();
          return pass(statement, block);
        }
        function vardef1(type2, value) {
          if (type2 == "variable") {
            register(value);
            return cont(typeuse, vardef2);
          }
          return cont();
        }
        function vardef2(type2, value) {
          if (value == "=")
            return cont(expression, vardef2);
          if (type2 == ",")
            return cont(vardef1);
        }
        function forspec1(type2, value) {
          if (type2 == "variable") {
            register(value);
            return cont(forin, expression);
          } else {
            return pass();
          }
        }
        function forin(_type, value) {
          if (value == "in")
            return cont();
        }
        function functiondef(type2, value) {
          if (type2 == "variable" || type2 == "type") {
            register(value);
            return cont(functiondef);
          }
          if (value == "new")
            return cont(functiondef);
          if (type2 == "(")
            return cont(pushlex(")"), pushcontext, commasep(funarg, ")"), poplex, typeuse, statement, popcontext);
        }
        function typeuse(type2) {
          if (type2 == ":")
            return cont(typestring);
        }
        function typestring(type2) {
          if (type2 == "type")
            return cont();
          if (type2 == "variable")
            return cont();
          if (type2 == "{")
            return cont(pushlex("}"), commasep(typeprop, "}"), poplex);
        }
        function typeprop(type2) {
          if (type2 == "variable")
            return cont(typeuse);
        }
        function funarg(type2, value) {
          if (type2 == "variable") {
            register(value);
            return cont(typeuse);
          }
        }
        return {
          startState: function(basecolumn) {
            var defaulttypes = ["Int", "Float", "String", "Void", "Std", "Bool", "Dynamic", "Array"];
            var state = {
              tokenize: haxeTokenBase,
              reAllowed: true,
              kwAllowed: true,
              cc: [],
              lexical: new HaxeLexical((basecolumn || 0) - indentUnit, 0, "block", false),
              localVars: parserConfig.localVars,
              importedtypes: defaulttypes,
              context: parserConfig.localVars && { vars: parserConfig.localVars },
              indented: 0
            };
            if (parserConfig.globalVars && typeof parserConfig.globalVars == "object")
              state.globalVars = parserConfig.globalVars;
            return state;
          },
          token: function(stream, state) {
            if (stream.sol()) {
              if (!state.lexical.hasOwnProperty("align"))
                state.lexical.align = false;
              state.indented = stream.indentation();
            }
            if (stream.eatSpace())
              return null;
            var style = state.tokenize(stream, state);
            if (type == "comment")
              return style;
            state.reAllowed = !!(type == "operator" || type == "keyword c" || type.match(/^[\[{}\(,;:]$/));
            state.kwAllowed = type != ".";
            return parseHaxe(state, style, type, content, stream);
          },
          indent: function(state, textAfter) {
            if (state.tokenize != haxeTokenBase)
              return 0;
            var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical;
            if (lexical.type == "stat" && firstChar == "}")
              lexical = lexical.prev;
            var type2 = lexical.type, closing = firstChar == type2;
            if (type2 == "vardef")
              return lexical.indented + 4;
            else if (type2 == "form" && firstChar == "{")
              return lexical.indented;
            else if (type2 == "stat" || type2 == "form")
              return lexical.indented + indentUnit;
            else if (lexical.info == "switch" && !closing)
              return lexical.indented + (/^(?:case|default)\b/.test(textAfter) ? indentUnit : 2 * indentUnit);
            else if (lexical.align)
              return lexical.column + (closing ? 0 : 1);
            else
              return lexical.indented + (closing ? 0 : indentUnit);
          },
          electricChars: "{}",
          blockCommentStart: "/*",
          blockCommentEnd: "*/",
          lineComment: "//"
        };
      });
      CodeMirror2.defineMIME("text/x-haxe", "haxe");
      CodeMirror2.defineMode("hxml", function() {
        return {
          startState: function() {
            return {
              define: false,
              inString: false
            };
          },
          token: function(stream, state) {
            var ch = stream.peek();
            var sol = stream.sol();
            if (ch == "#") {
              stream.skipToEnd();
              return "comment";
            }
            if (sol && ch == "-") {
              var style = "variable-2";
              stream.eat(/-/);
              if (stream.peek() == "-") {
                stream.eat(/-/);
                style = "keyword a";
              }
              if (stream.peek() == "D") {
                stream.eat(/[D]/);
                style = "keyword c";
                state.define = true;
              }
              stream.eatWhile(/[A-Z]/i);
              return style;
            }
            var ch = stream.peek();
            if (state.inString == false && ch == "'") {
              state.inString = true;
              stream.next();
            }
            if (state.inString == true) {
              if (stream.skipTo("'")) {
              } else {
                stream.skipToEnd();
              }
              if (stream.peek() == "'") {
                stream.next();
                state.inString = false;
              }
              return "string";
            }
            stream.next();
            return null;
          },
          lineComment: "#"
        };
      });
      CodeMirror2.defineMIME("text/x-hxml", "hxml");
    });
  }
});

// mode/htmlembedded/htmlembedded.js
var require_htmlembedded = __commonJS({
  "mode/htmlembedded/htmlembedded.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(
          require_codemirror(),
          require_htmlmixed(),
          require_multiplex()
        );
      else if (typeof define == "function" && define.amd)
        define([
          "../../lib/codemirror",
          "../htmlmixed/htmlmixed",
          "../../addon/mode/multiplex"
        ], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("htmlembedded", function(config, parserConfig) {
        var closeComment = parserConfig.closeComment || "--%>";
        return CodeMirror2.multiplexingMode(CodeMirror2.getMode(config, "htmlmixed"), {
          open: parserConfig.openComment || "<%--",
          close: closeComment,
          delimStyle: "comment",
          mode: { token: function(stream) {
            stream.skipTo(closeComment) || stream.skipToEnd();
            return "comment";
          } }
        }, {
          open: parserConfig.open || parserConfig.scriptStartRegex || "<%",
          close: parserConfig.close || parserConfig.scriptEndRegex || "%>",
          mode: CodeMirror2.getMode(config, parserConfig.scriptingModeSpec)
        });
      }, "htmlmixed");
      CodeMirror2.defineMIME("application/x-ejs", { name: "htmlembedded", scriptingModeSpec: "javascript" });
      CodeMirror2.defineMIME("application/x-aspx", { name: "htmlembedded", scriptingModeSpec: "text/x-csharp" });
      CodeMirror2.defineMIME("application/x-jsp", { name: "htmlembedded", scriptingModeSpec: "text/x-java" });
      CodeMirror2.defineMIME("application/x-erb", { name: "htmlembedded", scriptingModeSpec: "ruby" });
    });
  }
});

// mode/http/http.js
var require_http = __commonJS({
  "mode/http/http.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("http", function() {
        function failFirstLine(stream, state) {
          stream.skipToEnd();
          state.cur = header;
          return "error";
        }
        function start(stream, state) {
          if (stream.match(/^HTTP\/\d\.\d/)) {
            state.cur = responseStatusCode;
            return "keyword";
          } else if (stream.match(/^[A-Z]+/) && /[ \t]/.test(stream.peek())) {
            state.cur = requestPath;
            return "keyword";
          } else {
            return failFirstLine(stream, state);
          }
        }
        function responseStatusCode(stream, state) {
          var code = stream.match(/^\d+/);
          if (!code)
            return failFirstLine(stream, state);
          state.cur = responseStatusText;
          var status = Number(code[0]);
          if (status >= 100 && status < 200) {
            return "positive informational";
          } else if (status >= 200 && status < 300) {
            return "positive success";
          } else if (status >= 300 && status < 400) {
            return "positive redirect";
          } else if (status >= 400 && status < 500) {
            return "negative client-error";
          } else if (status >= 500 && status < 600) {
            return "negative server-error";
          } else {
            return "error";
          }
        }
        function responseStatusText(stream, state) {
          stream.skipToEnd();
          state.cur = header;
          return null;
        }
        function requestPath(stream, state) {
          stream.eatWhile(/\S/);
          state.cur = requestProtocol;
          return "string-2";
        }
        function requestProtocol(stream, state) {
          if (stream.match(/^HTTP\/\d\.\d$/)) {
            state.cur = header;
            return "keyword";
          } else {
            return failFirstLine(stream, state);
          }
        }
        function header(stream) {
          if (stream.sol() && !stream.eat(/[ \t]/)) {
            if (stream.match(/^.*?:/)) {
              return "atom";
            } else {
              stream.skipToEnd();
              return "error";
            }
          } else {
            stream.skipToEnd();
            return "string";
          }
        }
        function body(stream) {
          stream.skipToEnd();
          return null;
        }
        return {
          token: function(stream, state) {
            var cur = state.cur;
            if (cur != header && cur != body && stream.eatSpace())
              return null;
            return cur(stream, state);
          },
          blankLine: function(state) {
            state.cur = body;
          },
          startState: function() {
            return { cur: start };
          }
        };
      });
      CodeMirror2.defineMIME("message/http", "http");
    });
  }
});

// mode/idl/idl.js
var require_idl = __commonJS({
  "mode/idl/idl.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      function wordRegexp(words) {
        return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
      }
      ;
      var builtinArray = [
        "a_correlate",
        "abs",
        "acos",
        "adapt_hist_equal",
        "alog",
        "alog2",
        "alog10",
        "amoeba",
        "annotate",
        "app_user_dir",
        "app_user_dir_query",
        "arg_present",
        "array_equal",
        "array_indices",
        "arrow",
        "ascii_template",
        "asin",
        "assoc",
        "atan",
        "axis",
        "axis",
        "bandpass_filter",
        "bandreject_filter",
        "barplot",
        "bar_plot",
        "beseli",
        "beselj",
        "beselk",
        "besely",
        "beta",
        "biginteger",
        "bilinear",
        "bin_date",
        "binary_template",
        "bindgen",
        "binomial",
        "bit_ffs",
        "bit_population",
        "blas_axpy",
        "blk_con",
        "boolarr",
        "boolean",
        "boxplot",
        "box_cursor",
        "breakpoint",
        "broyden",
        "bubbleplot",
        "butterworth",
        "bytarr",
        "byte",
        "byteorder",
        "bytscl",
        "c_correlate",
        "calendar",
        "caldat",
        "call_external",
        "call_function",
        "call_method",
        "call_procedure",
        "canny",
        "catch",
        "cd",
        "cdf",
        "ceil",
        "chebyshev",
        "check_math",
        "chisqr_cvf",
        "chisqr_pdf",
        "choldc",
        "cholsol",
        "cindgen",
        "cir_3pnt",
        "clipboard",
        "close",
        "clust_wts",
        "cluster",
        "cluster_tree",
        "cmyk_convert",
        "code_coverage",
        "color_convert",
        "color_exchange",
        "color_quan",
        "color_range_map",
        "colorbar",
        "colorize_sample",
        "colormap_applicable",
        "colormap_gradient",
        "colormap_rotation",
        "colortable",
        "comfit",
        "command_line_args",
        "common",
        "compile_opt",
        "complex",
        "complexarr",
        "complexround",
        "compute_mesh_normals",
        "cond",
        "congrid",
        "conj",
        "constrained_min",
        "contour",
        "contour",
        "convert_coord",
        "convol",
        "convol_fft",
        "coord2to3",
        "copy_lun",
        "correlate",
        "cos",
        "cosh",
        "cpu",
        "cramer",
        "createboxplotdata",
        "create_cursor",
        "create_struct",
        "create_view",
        "crossp",
        "crvlength",
        "ct_luminance",
        "cti_test",
        "cursor",
        "curvefit",
        "cv_coord",
        "cvttobm",
        "cw_animate",
        "cw_animate_getp",
        "cw_animate_load",
        "cw_animate_run",
        "cw_arcball",
        "cw_bgroup",
        "cw_clr_index",
        "cw_colorsel",
        "cw_defroi",
        "cw_field",
        "cw_filesel",
        "cw_form",
        "cw_fslider",
        "cw_light_editor",
        "cw_light_editor_get",
        "cw_light_editor_set",
        "cw_orient",
        "cw_palette_editor",
        "cw_palette_editor_get",
        "cw_palette_editor_set",
        "cw_pdmenu",
        "cw_rgbslider",
        "cw_tmpl",
        "cw_zoom",
        "db_exists",
        "dblarr",
        "dcindgen",
        "dcomplex",
        "dcomplexarr",
        "define_key",
        "define_msgblk",
        "define_msgblk_from_file",
        "defroi",
        "defsysv",
        "delvar",
        "dendro_plot",
        "dendrogram",
        "deriv",
        "derivsig",
        "determ",
        "device",
        "dfpmin",
        "diag_matrix",
        "dialog_dbconnect",
        "dialog_message",
        "dialog_pickfile",
        "dialog_printersetup",
        "dialog_printjob",
        "dialog_read_image",
        "dialog_write_image",
        "dictionary",
        "digital_filter",
        "dilate",
        "dindgen",
        "dissolve",
        "dist",
        "distance_measure",
        "dlm_load",
        "dlm_register",
        "doc_library",
        "double",
        "draw_roi",
        "edge_dog",
        "efont",
        "eigenql",
        "eigenvec",
        "ellipse",
        "elmhes",
        "emboss",
        "empty",
        "enable_sysrtn",
        "eof",
        "eos",
        "erase",
        "erf",
        "erfc",
        "erfcx",
        "erode",
        "errorplot",
        "errplot",
        "estimator_filter",
        "execute",
        "exit",
        "exp",
        "expand",
        "expand_path",
        "expint",
        "extrac",
        "extract_slice",
        "f_cvf",
        "f_pdf",
        "factorial",
        "fft",
        "file_basename",
        "file_chmod",
        "file_copy",
        "file_delete",
        "file_dirname",
        "file_expand_path",
        "file_gunzip",
        "file_gzip",
        "file_info",
        "file_lines",
        "file_link",
        "file_mkdir",
        "file_move",
        "file_poll_input",
        "file_readlink",
        "file_same",
        "file_search",
        "file_tar",
        "file_test",
        "file_untar",
        "file_unzip",
        "file_which",
        "file_zip",
        "filepath",
        "findgen",
        "finite",
        "fix",
        "flick",
        "float",
        "floor",
        "flow3",
        "fltarr",
        "flush",
        "format_axis_values",
        "forward_function",
        "free_lun",
        "fstat",
        "fulstr",
        "funct",
        "function",
        "fv_test",
        "fx_root",
        "fz_roots",
        "gamma",
        "gamma_ct",
        "gauss_cvf",
        "gauss_pdf",
        "gauss_smooth",
        "gauss2dfit",
        "gaussfit",
        "gaussian_function",
        "gaussint",
        "get_drive_list",
        "get_dxf_objects",
        "get_kbrd",
        "get_login_info",
        "get_lun",
        "get_screen_size",
        "getenv",
        "getwindows",
        "greg2jul",
        "grib",
        "grid_input",
        "grid_tps",
        "grid3",
        "griddata",
        "gs_iter",
        "h_eq_ct",
        "h_eq_int",
        "hanning",
        "hash",
        "hdf",
        "hdf5",
        "heap_free",
        "heap_gc",
        "heap_nosave",
        "heap_refcount",
        "heap_save",
        "help",
        "hilbert",
        "hist_2d",
        "hist_equal",
        "histogram",
        "hls",
        "hough",
        "hqr",
        "hsv",
        "i18n_multibytetoutf8",
        "i18n_multibytetowidechar",
        "i18n_utf8tomultibyte",
        "i18n_widechartomultibyte",
        "ibeta",
        "icontour",
        "iconvertcoord",
        "idelete",
        "identity",
        "idl_base64",
        "idl_container",
        "idl_validname",
        "idlexbr_assistant",
        "idlitsys_createtool",
        "idlunit",
        "iellipse",
        "igamma",
        "igetcurrent",
        "igetdata",
        "igetid",
        "igetproperty",
        "iimage",
        "image",
        "image_cont",
        "image_statistics",
        "image_threshold",
        "imaginary",
        "imap",
        "indgen",
        "int_2d",
        "int_3d",
        "int_tabulated",
        "intarr",
        "interpol",
        "interpolate",
        "interval_volume",
        "invert",
        "ioctl",
        "iopen",
        "ir_filter",
        "iplot",
        "ipolygon",
        "ipolyline",
        "iputdata",
        "iregister",
        "ireset",
        "iresolve",
        "irotate",
        "isa",
        "isave",
        "iscale",
        "isetcurrent",
        "isetproperty",
        "ishft",
        "isocontour",
        "isosurface",
        "isurface",
        "itext",
        "itranslate",
        "ivector",
        "ivolume",
        "izoom",
        "journal",
        "json_parse",
        "json_serialize",
        "jul2greg",
        "julday",
        "keyword_set",
        "krig2d",
        "kurtosis",
        "kw_test",
        "l64indgen",
        "la_choldc",
        "la_cholmprove",
        "la_cholsol",
        "la_determ",
        "la_eigenproblem",
        "la_eigenql",
        "la_eigenvec",
        "la_elmhes",
        "la_gm_linear_model",
        "la_hqr",
        "la_invert",
        "la_least_square_equality",
        "la_least_squares",
        "la_linear_equation",
        "la_ludc",
        "la_lumprove",
        "la_lusol",
        "la_svd",
        "la_tridc",
        "la_trimprove",
        "la_triql",
        "la_trired",
        "la_trisol",
        "label_date",
        "label_region",
        "ladfit",
        "laguerre",
        "lambda",
        "lambdap",
        "lambertw",
        "laplacian",
        "least_squares_filter",
        "leefilt",
        "legend",
        "legendre",
        "linbcg",
        "lindgen",
        "linfit",
        "linkimage",
        "list",
        "ll_arc_distance",
        "lmfit",
        "lmgr",
        "lngamma",
        "lnp_test",
        "loadct",
        "locale_get",
        "logical_and",
        "logical_or",
        "logical_true",
        "lon64arr",
        "lonarr",
        "long",
        "long64",
        "lsode",
        "lu_complex",
        "ludc",
        "lumprove",
        "lusol",
        "m_correlate",
        "machar",
        "make_array",
        "make_dll",
        "make_rt",
        "map",
        "mapcontinents",
        "mapgrid",
        "map_2points",
        "map_continents",
        "map_grid",
        "map_image",
        "map_patch",
        "map_proj_forward",
        "map_proj_image",
        "map_proj_info",
        "map_proj_init",
        "map_proj_inverse",
        "map_set",
        "matrix_multiply",
        "matrix_power",
        "max",
        "md_test",
        "mean",
        "meanabsdev",
        "mean_filter",
        "median",
        "memory",
        "mesh_clip",
        "mesh_decimate",
        "mesh_issolid",
        "mesh_merge",
        "mesh_numtriangles",
        "mesh_obj",
        "mesh_smooth",
        "mesh_surfacearea",
        "mesh_validate",
        "mesh_volume",
        "message",
        "min",
        "min_curve_surf",
        "mk_html_help",
        "modifyct",
        "moment",
        "morph_close",
        "morph_distance",
        "morph_gradient",
        "morph_hitormiss",
        "morph_open",
        "morph_thin",
        "morph_tophat",
        "multi",
        "n_elements",
        "n_params",
        "n_tags",
        "ncdf",
        "newton",
        "noise_hurl",
        "noise_pick",
        "noise_scatter",
        "noise_slur",
        "norm",
        "obj_class",
        "obj_destroy",
        "obj_hasmethod",
        "obj_isa",
        "obj_new",
        "obj_valid",
        "objarr",
        "on_error",
        "on_ioerror",
        "online_help",
        "openr",
        "openu",
        "openw",
        "oplot",
        "oploterr",
        "orderedhash",
        "p_correlate",
        "parse_url",
        "particle_trace",
        "path_cache",
        "path_sep",
        "pcomp",
        "plot",
        "plot3d",
        "plot",
        "plot_3dbox",
        "plot_field",
        "ploterr",
        "plots",
        "polar_contour",
        "polar_surface",
        "polyfill",
        "polyshade",
        "pnt_line",
        "point_lun",
        "polarplot",
        "poly",
        "poly_2d",
        "poly_area",
        "poly_fit",
        "polyfillv",
        "polygon",
        "polyline",
        "polywarp",
        "popd",
        "powell",
        "pref_commit",
        "pref_get",
        "pref_set",
        "prewitt",
        "primes",
        "print",
        "printf",
        "printd",
        "pro",
        "product",
        "profile",
        "profiler",
        "profiles",
        "project_vol",
        "ps_show_fonts",
        "psafm",
        "pseudo",
        "ptr_free",
        "ptr_new",
        "ptr_valid",
        "ptrarr",
        "pushd",
        "qgrid3",
        "qhull",
        "qromb",
        "qromo",
        "qsimp",
        "query_*",
        "query_ascii",
        "query_bmp",
        "query_csv",
        "query_dicom",
        "query_gif",
        "query_image",
        "query_jpeg",
        "query_jpeg2000",
        "query_mrsid",
        "query_pict",
        "query_png",
        "query_ppm",
        "query_srf",
        "query_tiff",
        "query_video",
        "query_wav",
        "r_correlate",
        "r_test",
        "radon",
        "randomn",
        "randomu",
        "ranks",
        "rdpix",
        "read",
        "readf",
        "read_ascii",
        "read_binary",
        "read_bmp",
        "read_csv",
        "read_dicom",
        "read_gif",
        "read_image",
        "read_interfile",
        "read_jpeg",
        "read_jpeg2000",
        "read_mrsid",
        "read_pict",
        "read_png",
        "read_ppm",
        "read_spr",
        "read_srf",
        "read_sylk",
        "read_tiff",
        "read_video",
        "read_wav",
        "read_wave",
        "read_x11_bitmap",
        "read_xwd",
        "reads",
        "readu",
        "real_part",
        "rebin",
        "recall_commands",
        "recon3",
        "reduce_colors",
        "reform",
        "region_grow",
        "register_cursor",
        "regress",
        "replicate",
        "replicate_inplace",
        "resolve_all",
        "resolve_routine",
        "restore",
        "retall",
        "return",
        "reverse",
        "rk4",
        "roberts",
        "rot",
        "rotate",
        "round",
        "routine_filepath",
        "routine_info",
        "rs_test",
        "s_test",
        "save",
        "savgol",
        "scale3",
        "scale3d",
        "scatterplot",
        "scatterplot3d",
        "scope_level",
        "scope_traceback",
        "scope_varfetch",
        "scope_varname",
        "search2d",
        "search3d",
        "sem_create",
        "sem_delete",
        "sem_lock",
        "sem_release",
        "set_plot",
        "set_shading",
        "setenv",
        "sfit",
        "shade_surf",
        "shade_surf_irr",
        "shade_volume",
        "shift",
        "shift_diff",
        "shmdebug",
        "shmmap",
        "shmunmap",
        "shmvar",
        "show3",
        "showfont",
        "signum",
        "simplex",
        "sin",
        "sindgen",
        "sinh",
        "size",
        "skewness",
        "skip_lun",
        "slicer3",
        "slide_image",
        "smooth",
        "sobel",
        "socket",
        "sort",
        "spawn",
        "sph_4pnt",
        "sph_scat",
        "spher_harm",
        "spl_init",
        "spl_interp",
        "spline",
        "spline_p",
        "sprsab",
        "sprsax",
        "sprsin",
        "sprstp",
        "sqrt",
        "standardize",
        "stddev",
        "stop",
        "strarr",
        "strcmp",
        "strcompress",
        "streamline",
        "streamline",
        "stregex",
        "stretch",
        "string",
        "strjoin",
        "strlen",
        "strlowcase",
        "strmatch",
        "strmessage",
        "strmid",
        "strpos",
        "strput",
        "strsplit",
        "strtrim",
        "struct_assign",
        "struct_hide",
        "strupcase",
        "surface",
        "surface",
        "surfr",
        "svdc",
        "svdfit",
        "svsol",
        "swap_endian",
        "swap_endian_inplace",
        "symbol",
        "systime",
        "t_cvf",
        "t_pdf",
        "t3d",
        "tag_names",
        "tan",
        "tanh",
        "tek_color",
        "temporary",
        "terminal_size",
        "tetra_clip",
        "tetra_surface",
        "tetra_volume",
        "text",
        "thin",
        "thread",
        "threed",
        "tic",
        "time_test2",
        "timegen",
        "timer",
        "timestamp",
        "timestamptovalues",
        "tm_test",
        "toc",
        "total",
        "trace",
        "transpose",
        "tri_surf",
        "triangulate",
        "trigrid",
        "triql",
        "trired",
        "trisol",
        "truncate_lun",
        "ts_coef",
        "ts_diff",
        "ts_fcast",
        "ts_smooth",
        "tv",
        "tvcrs",
        "tvlct",
        "tvrd",
        "tvscl",
        "typename",
        "uindgen",
        "uint",
        "uintarr",
        "ul64indgen",
        "ulindgen",
        "ulon64arr",
        "ulonarr",
        "ulong",
        "ulong64",
        "uniq",
        "unsharp_mask",
        "usersym",
        "value_locate",
        "variance",
        "vector",
        "vector_field",
        "vel",
        "velovect",
        "vert_t3d",
        "voigt",
        "volume",
        "voronoi",
        "voxel_proj",
        "wait",
        "warp_tri",
        "watershed",
        "wdelete",
        "wf_draw",
        "where",
        "widget_base",
        "widget_button",
        "widget_combobox",
        "widget_control",
        "widget_displaycontextmenu",
        "widget_draw",
        "widget_droplist",
        "widget_event",
        "widget_info",
        "widget_label",
        "widget_list",
        "widget_propertysheet",
        "widget_slider",
        "widget_tab",
        "widget_table",
        "widget_text",
        "widget_tree",
        "widget_tree_move",
        "widget_window",
        "wiener_filter",
        "window",
        "window",
        "write_bmp",
        "write_csv",
        "write_gif",
        "write_image",
        "write_jpeg",
        "write_jpeg2000",
        "write_nrif",
        "write_pict",
        "write_png",
        "write_ppm",
        "write_spr",
        "write_srf",
        "write_sylk",
        "write_tiff",
        "write_video",
        "write_wav",
        "write_wave",
        "writeu",
        "wset",
        "wshow",
        "wtn",
        "wv_applet",
        "wv_cwt",
        "wv_cw_wavelet",
        "wv_denoise",
        "wv_dwt",
        "wv_fn_coiflet",
        "wv_fn_daubechies",
        "wv_fn_gaussian",
        "wv_fn_haar",
        "wv_fn_morlet",
        "wv_fn_paul",
        "wv_fn_symlet",
        "wv_import_data",
        "wv_import_wavelet",
        "wv_plot3d_wps",
        "wv_plot_multires",
        "wv_pwt",
        "wv_tool_denoise",
        "xbm_edit",
        "xdisplayfile",
        "xdxf",
        "xfont",
        "xinteranimate",
        "xloadct",
        "xmanager",
        "xmng_tmpl",
        "xmtool",
        "xobjview",
        "xobjview_rotate",
        "xobjview_write_image",
        "xpalette",
        "xpcolor",
        "xplot3d",
        "xregistered",
        "xroi",
        "xsq_test",
        "xsurface",
        "xvaredit",
        "xvolume",
        "xvolume_rotate",
        "xvolume_write_image",
        "xyouts",
        "zlib_compress",
        "zlib_uncompress",
        "zoom",
        "zoom_24"
      ];
      var builtins = wordRegexp(builtinArray);
      var keywordArray = [
        "begin",
        "end",
        "endcase",
        "endfor",
        "endwhile",
        "endif",
        "endrep",
        "endforeach",
        "break",
        "case",
        "continue",
        "for",
        "foreach",
        "goto",
        "if",
        "then",
        "else",
        "repeat",
        "until",
        "switch",
        "while",
        "do",
        "pro",
        "function"
      ];
      var keywords = wordRegexp(keywordArray);
      CodeMirror2.registerHelper("hintWords", "idl", builtinArray.concat(keywordArray));
      var identifiers = new RegExp("^[_a-z\xA1-\uFFFF][_a-z0-9\xA1-\uFFFF]*", "i");
      var singleOperators = /[+\-*&=<>\/@#~$]/;
      var boolOperators = new RegExp("(and|or|eq|lt|le|gt|ge|ne|not)", "i");
      function tokenBase(stream) {
        if (stream.eatSpace())
          return null;
        if (stream.match(";")) {
          stream.skipToEnd();
          return "comment";
        }
        if (stream.match(/^[0-9\.+-]/, false)) {
          if (stream.match(/^[+-]?0x[0-9a-fA-F]+/))
            return "number";
          if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?/))
            return "number";
          if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?/))
            return "number";
        }
        if (stream.match(/^"([^"]|(""))*"/)) {
          return "string";
        }
        if (stream.match(/^'([^']|(''))*'/)) {
          return "string";
        }
        if (stream.match(keywords)) {
          return "keyword";
        }
        if (stream.match(builtins)) {
          return "builtin";
        }
        if (stream.match(identifiers)) {
          return "variable";
        }
        if (stream.match(singleOperators) || stream.match(boolOperators)) {
          return "operator";
        }
        stream.next();
        return null;
      }
      ;
      CodeMirror2.defineMode("idl", function() {
        return {
          token: function(stream) {
            return tokenBase(stream);
          }
        };
      });
      CodeMirror2.defineMIME("text/x-idl", "idl");
    });
  }
});

// mode/jinja2/jinja2.js
var require_jinja2 = __commonJS({
  "mode/jinja2/jinja2.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("jinja2", function() {
        var keywords = [
          "and",
          "as",
          "block",
          "endblock",
          "by",
          "cycle",
          "debug",
          "else",
          "elif",
          "extends",
          "filter",
          "endfilter",
          "firstof",
          "for",
          "endfor",
          "if",
          "endif",
          "ifchanged",
          "endifchanged",
          "ifequal",
          "endifequal",
          "ifnotequal",
          "endifnotequal",
          "in",
          "include",
          "load",
          "not",
          "now",
          "or",
          "parsed",
          "regroup",
          "reversed",
          "spaceless",
          "endspaceless",
          "ssi",
          "templatetag",
          "openblock",
          "closeblock",
          "openvariable",
          "closevariable",
          "openbrace",
          "closebrace",
          "opencomment",
          "closecomment",
          "widthratio",
          "url",
          "with",
          "endwith",
          "get_current_language",
          "trans",
          "endtrans",
          "noop",
          "blocktrans",
          "endblocktrans",
          "get_available_languages",
          "get_current_language_bidi",
          "plural"
        ], operator = /^[+\-*&%=<>!?|~^]/, sign = /^[:\[\(\{]/, atom = ["true", "false"], number = /^(\d[+\-\*\/])?\d+(\.\d+)?/;
        keywords = new RegExp("((" + keywords.join(")|(") + "))\\b");
        atom = new RegExp("((" + atom.join(")|(") + "))\\b");
        function tokenBase(stream, state) {
          var ch = stream.peek();
          if (state.incomment) {
            if (!stream.skipTo("#}")) {
              stream.skipToEnd();
            } else {
              stream.eatWhile(/\#|}/);
              state.incomment = false;
            }
            return "comment";
          } else if (state.intag) {
            if (state.operator) {
              state.operator = false;
              if (stream.match(atom)) {
                return "atom";
              }
              if (stream.match(number)) {
                return "number";
              }
            }
            if (state.sign) {
              state.sign = false;
              if (stream.match(atom)) {
                return "atom";
              }
              if (stream.match(number)) {
                return "number";
              }
            }
            if (state.instring) {
              if (ch == state.instring) {
                state.instring = false;
              }
              stream.next();
              return "string";
            } else if (ch == "'" || ch == '"') {
              state.instring = ch;
              stream.next();
              return "string";
            } else if (stream.match(state.intag + "}") || stream.eat("-") && stream.match(state.intag + "}")) {
              state.intag = false;
              return "tag";
            } else if (stream.match(operator)) {
              state.operator = true;
              return "operator";
            } else if (stream.match(sign)) {
              state.sign = true;
            } else {
              if (stream.eat(" ") || stream.sol()) {
                if (stream.match(keywords)) {
                  return "keyword";
                }
                if (stream.match(atom)) {
                  return "atom";
                }
                if (stream.match(number)) {
                  return "number";
                }
                if (stream.sol()) {
                  stream.next();
                }
              } else {
                stream.next();
              }
            }
            return "variable";
          } else if (stream.eat("{")) {
            if (stream.eat("#")) {
              state.incomment = true;
              if (!stream.skipTo("#}")) {
                stream.skipToEnd();
              } else {
                stream.eatWhile(/\#|}/);
                state.incomment = false;
              }
              return "comment";
            } else if (ch = stream.eat(/\{|%/)) {
              state.intag = ch;
              if (ch == "{") {
                state.intag = "}";
              }
              stream.eat("-");
              return "tag";
            }
          }
          stream.next();
        }
        ;
        return {
          startState: function() {
            return { tokenize: tokenBase };
          },
          token: function(stream, state) {
            return state.tokenize(stream, state);
          },
          blockCommentStart: "{#",
          blockCommentEnd: "#}"
        };
      });
      CodeMirror2.defineMIME("text/jinja2", "jinja2");
    });
  }
});

// mode/jsx/jsx.js
var require_jsx = __commonJS({
  "mode/jsx/jsx.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror(), require_xml(), require_javascript());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror", "../xml/xml", "../javascript/javascript"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      function Context(state, mode, depth, prev) {
        this.state = state;
        this.mode = mode;
        this.depth = depth;
        this.prev = prev;
      }
      function copyContext(context) {
        return new Context(
          CodeMirror2.copyState(context.mode, context.state),
          context.mode,
          context.depth,
          context.prev && copyContext(context.prev)
        );
      }
      CodeMirror2.defineMode("jsx", function(config, modeConfig) {
        var xmlMode = CodeMirror2.getMode(config, { name: "xml", allowMissing: true, multilineTagIndentPastTag: false, allowMissingTagName: true });
        var jsMode = CodeMirror2.getMode(config, modeConfig && modeConfig.base || "javascript");
        function flatXMLIndent(state) {
          var tagName = state.tagName;
          state.tagName = null;
          var result = xmlMode.indent(state, "", "");
          state.tagName = tagName;
          return result;
        }
        function token(stream, state) {
          if (state.context.mode == xmlMode)
            return xmlToken(stream, state, state.context);
          else
            return jsToken(stream, state, state.context);
        }
        function xmlToken(stream, state, cx) {
          if (cx.depth == 2) {
            if (stream.match(/^.*?\*\//))
              cx.depth = 1;
            else
              stream.skipToEnd();
            return "comment";
          }
          if (stream.peek() == "{") {
            xmlMode.skipAttribute(cx.state);
            var indent = flatXMLIndent(cx.state), xmlContext = cx.state.context;
            if (xmlContext && stream.match(/^[^>]*>\s*$/, false)) {
              while (xmlContext.prev && !xmlContext.startOfLine)
                xmlContext = xmlContext.prev;
              if (xmlContext.startOfLine)
                indent -= config.indentUnit;
              else if (cx.prev.state.lexical)
                indent = cx.prev.state.lexical.indented;
            } else if (cx.depth == 1) {
              indent += config.indentUnit;
            }
            state.context = new Context(
              CodeMirror2.startState(jsMode, indent),
              jsMode,
              0,
              state.context
            );
            return null;
          }
          if (cx.depth == 1) {
            if (stream.peek() == "<") {
              xmlMode.skipAttribute(cx.state);
              state.context = new Context(
                CodeMirror2.startState(xmlMode, flatXMLIndent(cx.state)),
                xmlMode,
                0,
                state.context
              );
              return null;
            } else if (stream.match("//")) {
              stream.skipToEnd();
              return "comment";
            } else if (stream.match("/*")) {
              cx.depth = 2;
              return token(stream, state);
            }
          }
          var style = xmlMode.token(stream, cx.state), cur = stream.current(), stop;
          if (/\btag\b/.test(style)) {
            if (/>$/.test(cur)) {
              if (cx.state.context)
                cx.depth = 0;
              else
                state.context = state.context.prev;
            } else if (/^</.test(cur)) {
              cx.depth = 1;
            }
          } else if (!style && (stop = cur.indexOf("{")) > -1) {
            stream.backUp(cur.length - stop);
          }
          return style;
        }
        function jsToken(stream, state, cx) {
          if (stream.peek() == "<" && jsMode.expressionAllowed(stream, cx.state)) {
            jsMode.skipExpression(cx.state);
            state.context = new Context(
              CodeMirror2.startState(xmlMode, jsMode.indent(cx.state, "", "")),
              xmlMode,
              0,
              state.context
            );
            return null;
          }
          var style = jsMode.token(stream, cx.state);
          if (!style && cx.depth != null) {
            var cur = stream.current();
            if (cur == "{") {
              cx.depth++;
            } else if (cur == "}") {
              if (--cx.depth == 0)
                state.context = state.context.prev;
            }
          }
          return style;
        }
        return {
          startState: function() {
            return { context: new Context(CodeMirror2.startState(jsMode), jsMode) };
          },
          copyState: function(state) {
            return { context: copyContext(state.context) };
          },
          token,
          indent: function(state, textAfter, fullLine) {
            return state.context.mode.indent(state.context.state, textAfter, fullLine);
          },
          innerMode: function(state) {
            return state.context;
          }
        };
      }, "xml", "javascript");
      CodeMirror2.defineMIME("text/jsx", "jsx");
      CodeMirror2.defineMIME("text/typescript-jsx", { name: "jsx", base: { name: "javascript", typescript: true } });
    });
  }
});

// mode/julia/julia.js
var require_julia = __commonJS({
  "mode/julia/julia.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("julia", function(config, parserConf) {
        function wordRegexp(words, end) {
          if (typeof end === "undefined") {
            end = "\\b";
          }
          return new RegExp("^((" + words.join(")|(") + "))" + end);
        }
        var octChar = "\\\\[0-7]{1,3}";
        var hexChar = "\\\\x[A-Fa-f0-9]{1,2}";
        var sChar = `\\\\[abefnrtv0%?'"\\\\]`;
        var uChar = "([^\\u0027\\u005C\\uD800-\\uDFFF]|[\\uD800-\\uDFFF][\\uDC00-\\uDFFF])";
        var operators = parserConf.operators || wordRegexp([
          "[<>]:",
          "[<>=]=",
          "<<=?",
          ">>>?=?",
          "=>",
          "->",
          "\\/\\/",
          "[\\\\%*+\\-<>!=\\/^|&\\u00F7\\u22BB]=?",
          "\\?",
          "\\$",
          "~",
          ":",
          "\\u00D7",
          "\\u2208",
          "\\u2209",
          "\\u220B",
          "\\u220C",
          "\\u2218",
          "\\u221A",
          "\\u221B",
          "\\u2229",
          "\\u222A",
          "\\u2260",
          "\\u2264",
          "\\u2265",
          "\\u2286",
          "\\u2288",
          "\\u228A",
          "\\u22C5",
          "\\b(in|isa)\\b(?!.?\\()"
        ], "");
        var delimiters = parserConf.delimiters || /^[;,()[\]{}]/;
        var identifiers = parserConf.identifiers || /^[_A-Za-z\u00A1-\u2217\u2219-\uFFFF][\w\u00A1-\u2217\u2219-\uFFFF]*!*/;
        var chars = wordRegexp([octChar, hexChar, sChar, uChar], "'");
        var openersList = [
          "begin",
          "function",
          "type",
          "struct",
          "immutable",
          "let",
          "macro",
          "for",
          "while",
          "quote",
          "if",
          "else",
          "elseif",
          "try",
          "finally",
          "catch",
          "do"
        ];
        var closersList = ["end", "else", "elseif", "catch", "finally"];
        var keywordsList = [
          "if",
          "else",
          "elseif",
          "while",
          "for",
          "begin",
          "let",
          "end",
          "do",
          "try",
          "catch",
          "finally",
          "return",
          "break",
          "continue",
          "global",
          "local",
          "const",
          "export",
          "import",
          "importall",
          "using",
          "function",
          "where",
          "macro",
          "module",
          "baremodule",
          "struct",
          "type",
          "mutable",
          "immutable",
          "quote",
          "typealias",
          "abstract",
          "primitive",
          "bitstype"
        ];
        var builtinsList = ["true", "false", "nothing", "NaN", "Inf"];
        CodeMirror2.registerHelper("hintWords", "julia", keywordsList.concat(builtinsList));
        var openers = wordRegexp(openersList);
        var closers = wordRegexp(closersList);
        var keywords = wordRegexp(keywordsList);
        var builtins = wordRegexp(builtinsList);
        var macro = /^@[_A-Za-z][\w]*/;
        var symbol = /^:[_A-Za-z\u00A1-\uFFFF][\w\u00A1-\uFFFF]*!*/;
        var stringPrefixes = /^(`|([_A-Za-z\u00A1-\uFFFF]*"("")?))/;
        function inArray(state) {
          return state.nestedArrays > 0;
        }
        function inGenerator(state) {
          return state.nestedGenerators > 0;
        }
        function currentScope(state, n) {
          if (typeof n === "undefined") {
            n = 0;
          }
          if (state.scopes.length <= n) {
            return null;
          }
          return state.scopes[state.scopes.length - (n + 1)];
        }
        function tokenBase(stream, state) {
          if (stream.match(/^#=/, false)) {
            state.tokenize = tokenComment;
            return state.tokenize(stream, state);
          }
          var leavingExpr = state.leavingExpr;
          if (stream.sol()) {
            leavingExpr = false;
          }
          state.leavingExpr = false;
          if (leavingExpr) {
            if (stream.match(/^'+/)) {
              return "operator";
            }
          }
          if (stream.match(/\.{4,}/)) {
            return "error";
          } else if (stream.match(/\.{1,3}/)) {
            return "operator";
          }
          if (stream.eatSpace()) {
            return null;
          }
          var ch = stream.peek();
          if (ch === "#") {
            stream.skipToEnd();
            return "comment";
          }
          if (ch === "[") {
            state.scopes.push("[");
            state.nestedArrays++;
          }
          if (ch === "(") {
            state.scopes.push("(");
            state.nestedGenerators++;
          }
          if (inArray(state) && ch === "]") {
            while (state.scopes.length && currentScope(state) !== "[") {
              state.scopes.pop();
            }
            state.scopes.pop();
            state.nestedArrays--;
            state.leavingExpr = true;
          }
          if (inGenerator(state) && ch === ")") {
            while (state.scopes.length && currentScope(state) !== "(") {
              state.scopes.pop();
            }
            state.scopes.pop();
            state.nestedGenerators--;
            state.leavingExpr = true;
          }
          if (inArray(state)) {
            if (state.lastToken == "end" && stream.match(/^:/)) {
              return "operator";
            }
            if (stream.match(/^end/)) {
              return "number";
            }
          }
          var match;
          if (match = stream.match(openers, false)) {
            state.scopes.push(match[0]);
          }
          if (stream.match(closers, false)) {
            state.scopes.pop();
          }
          if (stream.match(/^::(?![:\$])/)) {
            state.tokenize = tokenAnnotation;
            return state.tokenize(stream, state);
          }
          if (!leavingExpr && stream.match(symbol) || stream.match(/:([<>]:|<<=?|>>>?=?|->|\/\/|\.{2,3}|[\.\\%*+\-<>!\/^|&]=?|[~\?\$])/)) {
            return "builtin";
          }
          if (stream.match(operators)) {
            return "operator";
          }
          if (stream.match(/^\.?\d/, false)) {
            var imMatcher = RegExp(/^im\b/);
            var numberLiteral = false;
            if (stream.match(/^0x\.[0-9a-f_]+p[\+\-]?[_\d]+/i)) {
              numberLiteral = true;
            }
            if (stream.match(/^0x[0-9a-f_]+/i)) {
              numberLiteral = true;
            }
            if (stream.match(/^0b[01_]+/i)) {
              numberLiteral = true;
            }
            if (stream.match(/^0o[0-7_]+/i)) {
              numberLiteral = true;
            }
            if (stream.match(/^(?:(?:\d[_\d]*)?\.(?!\.)(?:\d[_\d]*)?|\d[_\d]*\.(?!\.)(?:\d[_\d]*))?([Eef][\+\-]?[_\d]+)?/i)) {
              numberLiteral = true;
            }
            if (stream.match(/^\d[_\d]*(e[\+\-]?\d+)?/i)) {
              numberLiteral = true;
            }
            if (numberLiteral) {
              stream.match(imMatcher);
              state.leavingExpr = true;
              return "number";
            }
          }
          if (stream.match(/^'/)) {
            state.tokenize = tokenChar;
            return state.tokenize(stream, state);
          }
          if (stream.match(stringPrefixes)) {
            state.tokenize = tokenStringFactory(stream.current());
            return state.tokenize(stream, state);
          }
          if (stream.match(macro)) {
            return "meta";
          }
          if (stream.match(delimiters)) {
            return null;
          }
          if (stream.match(keywords)) {
            return "keyword";
          }
          if (stream.match(builtins)) {
            return "builtin";
          }
          var isDefinition = state.isDefinition || state.lastToken == "function" || state.lastToken == "macro" || state.lastToken == "type" || state.lastToken == "struct" || state.lastToken == "immutable";
          if (stream.match(identifiers)) {
            if (isDefinition) {
              if (stream.peek() === ".") {
                state.isDefinition = true;
                return "variable";
              }
              state.isDefinition = false;
              return "def";
            }
            if (stream.match(/^({[^}]*})*\(/, false)) {
              state.tokenize = tokenCallOrDef;
              return state.tokenize(stream, state);
            }
            state.leavingExpr = true;
            return "variable";
          }
          stream.next();
          return "error";
        }
        function tokenCallOrDef(stream, state) {
          for (; ; ) {
            var match = stream.match(/^(\(\s*)/), charsAdvanced = 0;
            if (match) {
              if (state.firstParenPos < 0)
                state.firstParenPos = state.scopes.length;
              state.scopes.push("(");
              charsAdvanced += match[1].length;
            }
            if (currentScope(state) == "(" && stream.match(/^\)/)) {
              state.scopes.pop();
              charsAdvanced += 1;
              if (state.scopes.length <= state.firstParenPos) {
                var isDefinition = stream.match(/^(\s*where\s+[^\s=]+)*\s*?=(?!=)/, false);
                stream.backUp(charsAdvanced);
                state.firstParenPos = -1;
                state.tokenize = tokenBase;
                if (isDefinition)
                  return "def";
                return "builtin";
              }
            }
            if (stream.match(/^$/g, false)) {
              stream.backUp(charsAdvanced);
              while (state.scopes.length > state.firstParenPos)
                state.scopes.pop();
              state.firstParenPos = -1;
              state.tokenize = tokenBase;
              return "builtin";
            }
            if (!stream.match(/^[^()]+/)) {
              stream.next();
              return null;
            }
          }
        }
        function tokenAnnotation(stream, state) {
          stream.match(/.*?(?=,|;|{|}|\(|\)|=|$|\s)/);
          if (stream.match(/^{/)) {
            state.nestedParameters++;
          } else if (stream.match(/^}/) && state.nestedParameters > 0) {
            state.nestedParameters--;
          }
          if (state.nestedParameters > 0) {
            stream.match(/.*?(?={|})/) || stream.next();
          } else if (state.nestedParameters == 0) {
            state.tokenize = tokenBase;
          }
          return "builtin";
        }
        function tokenComment(stream, state) {
          if (stream.match(/^#=/)) {
            state.nestedComments++;
          }
          if (!stream.match(/.*?(?=(#=|=#))/)) {
            stream.skipToEnd();
          }
          if (stream.match(/^=#/)) {
            state.nestedComments--;
            if (state.nestedComments == 0)
              state.tokenize = tokenBase;
          }
          return "comment";
        }
        function tokenChar(stream, state) {
          var isChar = false, match;
          if (stream.match(chars)) {
            isChar = true;
          } else if (match = stream.match(/\\u([a-f0-9]{1,4})(?=')/i)) {
            var value = parseInt(match[1], 16);
            if (value <= 55295 || value >= 57344) {
              isChar = true;
              stream.next();
            }
          } else if (match = stream.match(/\\U([A-Fa-f0-9]{5,8})(?=')/)) {
            var value = parseInt(match[1], 16);
            if (value <= 1114111) {
              isChar = true;
              stream.next();
            }
          }
          if (isChar) {
            state.leavingExpr = true;
            state.tokenize = tokenBase;
            return "string";
          }
          if (!stream.match(/^[^']+(?=')/)) {
            stream.skipToEnd();
          }
          if (stream.match(/^'/)) {
            state.tokenize = tokenBase;
          }
          return "error";
        }
        function tokenStringFactory(delimiter) {
          if (delimiter.substr(-3) === '"""') {
            delimiter = '"""';
          } else if (delimiter.substr(-1) === '"') {
            delimiter = '"';
          }
          function tokenString(stream, state) {
            if (stream.eat("\\")) {
              stream.next();
            } else if (stream.match(delimiter)) {
              state.tokenize = tokenBase;
              state.leavingExpr = true;
              return "string";
            } else {
              stream.eat(/[`"]/);
            }
            stream.eatWhile(/[^\\`"]/);
            return "string";
          }
          return tokenString;
        }
        var external = {
          startState: function() {
            return {
              tokenize: tokenBase,
              scopes: [],
              lastToken: null,
              leavingExpr: false,
              isDefinition: false,
              nestedArrays: 0,
              nestedComments: 0,
              nestedGenerators: 0,
              nestedParameters: 0,
              firstParenPos: -1
            };
          },
          token: function(stream, state) {
            var style = state.tokenize(stream, state);
            var current = stream.current();
            if (current && style) {
              state.lastToken = current;
            }
            return style;
          },
          indent: function(state, textAfter) {
            var delta = 0;
            if (textAfter === "]" || textAfter === ")" || /^end\b/.test(textAfter) || /^else/.test(textAfter) || /^catch\b/.test(textAfter) || /^elseif\b/.test(textAfter) || /^finally/.test(textAfter)) {
              delta = -1;
            }
            return (state.scopes.length + delta) * config.indentUnit;
          },
          electricInput: /\b(end|else|catch|finally)\b/,
          blockCommentStart: "#=",
          blockCommentEnd: "=#",
          lineComment: "#",
          closeBrackets: '()[]{}""',
          fold: "indent"
        };
        return external;
      });
      CodeMirror2.defineMIME("text/x-julia", "julia");
    });
  }
});

// mode/livescript/livescript.js
var require_livescript = __commonJS({
  "mode/livescript/livescript.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("livescript", function() {
        var tokenBase = function(stream, state) {
          var next_rule = state.next || "start";
          if (next_rule) {
            state.next = state.next;
            var nr = Rules[next_rule];
            if (nr.splice) {
              for (var i$ = 0; i$ < nr.length; ++i$) {
                var r2 = nr[i$];
                if (r2.regex && stream.match(r2.regex)) {
                  state.next = r2.next || state.next;
                  return r2.token;
                }
              }
              stream.next();
              return "error";
            }
            if (stream.match(r2 = Rules[next_rule])) {
              if (r2.regex && stream.match(r2.regex)) {
                state.next = r2.next;
                return r2.token;
              } else {
                stream.next();
                return "error";
              }
            }
          }
          stream.next();
          return "error";
        };
        var external = {
          startState: function() {
            return {
              next: "start",
              lastToken: { style: null, indent: 0, content: "" }
            };
          },
          token: function(stream, state) {
            while (stream.pos == stream.start)
              var style = tokenBase(stream, state);
            state.lastToken = {
              style,
              indent: stream.indentation(),
              content: stream.current()
            };
            return style.replace(/\./g, " ");
          },
          indent: function(state) {
            var indentation = state.lastToken.indent;
            if (state.lastToken.content.match(indenter)) {
              indentation += 2;
            }
            return indentation;
          }
        };
        return external;
      });
      var identifier = "(?![\\d\\s])[$\\w\\xAA-\\uFFDC](?:(?!\\s)[$\\w\\xAA-\\uFFDC]|-[A-Za-z])*";
      var indenter = RegExp("(?:[({[=:]|[-~]>|\\b(?:e(?:lse|xport)|d(?:o|efault)|t(?:ry|hen)|finally|import(?:\\s*all)?|const|var|let|new|catch(?:\\s*" + identifier + ")?))\\s*$");
      var keywordend = "(?![$\\w]|-[A-Za-z]|\\s*:(?![:=]))";
      var stringfill = {
        token: "string",
        regex: ".+"
      };
      var Rules = {
        start: [
          {
            token: "comment.doc",
            regex: "/\\*",
            next: "comment"
          },
          {
            token: "comment",
            regex: "#.*"
          },
          {
            token: "keyword",
            regex: "(?:t(?:h(?:is|row|en)|ry|ypeof!?)|c(?:on(?:tinue|st)|a(?:se|tch)|lass)|i(?:n(?:stanceof)?|mp(?:ort(?:\\s+all)?|lements)|[fs])|d(?:e(?:fault|lete|bugger)|o)|f(?:or(?:\\s+own)?|inally|unction)|s(?:uper|witch)|e(?:lse|x(?:tends|port)|val)|a(?:nd|rguments)|n(?:ew|ot)|un(?:less|til)|w(?:hile|ith)|o[fr]|return|break|let|var|loop)" + keywordend
          },
          {
            token: "constant.language",
            regex: "(?:true|false|yes|no|on|off|null|void|undefined)" + keywordend
          },
          {
            token: "invalid.illegal",
            regex: "(?:p(?:ackage|r(?:ivate|otected)|ublic)|i(?:mplements|nterface)|enum|static|yield)" + keywordend
          },
          {
            token: "language.support.class",
            regex: "(?:R(?:e(?:gExp|ferenceError)|angeError)|S(?:tring|yntaxError)|E(?:rror|valError)|Array|Boolean|Date|Function|Number|Object|TypeError|URIError)" + keywordend
          },
          {
            token: "language.support.function",
            regex: "(?:is(?:NaN|Finite)|parse(?:Int|Float)|Math|JSON|(?:en|de)codeURI(?:Component)?)" + keywordend
          },
          {
            token: "variable.language",
            regex: "(?:t(?:hat|il|o)|f(?:rom|allthrough)|it|by|e)" + keywordend
          },
          {
            token: "identifier",
            regex: identifier + "\\s*:(?![:=])"
          },
          {
            token: "variable",
            regex: identifier
          },
          {
            token: "keyword.operator",
            regex: "(?:\\.{3}|\\s+\\?)"
          },
          {
            token: "keyword.variable",
            regex: "(?:@+|::|\\.\\.)",
            next: "key"
          },
          {
            token: "keyword.operator",
            regex: "\\.\\s*",
            next: "key"
          },
          {
            token: "string",
            regex: "\\\\\\S[^\\s,;)}\\]]*"
          },
          {
            token: "string.doc",
            regex: "'''",
            next: "qdoc"
          },
          {
            token: "string.doc",
            regex: '"""',
            next: "qqdoc"
          },
          {
            token: "string",
            regex: "'",
            next: "qstring"
          },
          {
            token: "string",
            regex: '"',
            next: "qqstring"
          },
          {
            token: "string",
            regex: "`",
            next: "js"
          },
          {
            token: "string",
            regex: "<\\[",
            next: "words"
          },
          {
            token: "string.regex",
            regex: "//",
            next: "heregex"
          },
          {
            token: "string.regex",
            regex: "\\/(?:[^[\\/\\n\\\\]*(?:(?:\\\\.|\\[[^\\]\\n\\\\]*(?:\\\\.[^\\]\\n\\\\]*)*\\])[^[\\/\\n\\\\]*)*)\\/[gimy$]{0,4}",
            next: "key"
          },
          {
            token: "constant.numeric",
            regex: "(?:0x[\\da-fA-F][\\da-fA-F_]*|(?:[2-9]|[12]\\d|3[0-6])r[\\da-zA-Z][\\da-zA-Z_]*|(?:\\d[\\d_]*(?:\\.\\d[\\d_]*)?|\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[\\w$]*)"
          },
          {
            token: "lparen",
            regex: "[({[]"
          },
          {
            token: "rparen",
            regex: "[)}\\]]",
            next: "key"
          },
          {
            token: "keyword.operator",
            regex: "\\S+"
          },
          {
            token: "text",
            regex: "\\s+"
          }
        ],
        heregex: [
          {
            token: "string.regex",
            regex: ".*?//[gimy$?]{0,4}",
            next: "start"
          },
          {
            token: "string.regex",
            regex: "\\s*#{"
          },
          {
            token: "comment.regex",
            regex: "\\s+(?:#.*)?"
          },
          {
            token: "string.regex",
            regex: "\\S+"
          }
        ],
        key: [
          {
            token: "keyword.operator",
            regex: "[.?@!]+"
          },
          {
            token: "identifier",
            regex: identifier,
            next: "start"
          },
          {
            token: "text",
            regex: "",
            next: "start"
          }
        ],
        comment: [
          {
            token: "comment.doc",
            regex: ".*?\\*/",
            next: "start"
          },
          {
            token: "comment.doc",
            regex: ".+"
          }
        ],
        qdoc: [
          {
            token: "string",
            regex: ".*?'''",
            next: "key"
          },
          stringfill
        ],
        qqdoc: [
          {
            token: "string",
            regex: '.*?"""',
            next: "key"
          },
          stringfill
        ],
        qstring: [
          {
            token: "string",
            regex: "[^\\\\']*(?:\\\\.[^\\\\']*)*'",
            next: "key"
          },
          stringfill
        ],
        qqstring: [
          {
            token: "string",
            regex: '[^\\\\"]*(?:\\\\.[^\\\\"]*)*"',
            next: "key"
          },
          stringfill
        ],
        js: [
          {
            token: "string",
            regex: "[^\\\\`]*(?:\\\\.[^\\\\`]*)*`",
            next: "key"
          },
          stringfill
        ],
        words: [
          {
            token: "string",
            regex: ".*?\\]>",
            next: "key"
          },
          stringfill
        ]
      };
      for (var idx in Rules) {
        var r = Rules[idx];
        if (r.splice) {
          for (var i = 0, len = r.length; i < len; ++i) {
            var rr = r[i];
            if (typeof rr.regex === "string") {
              Rules[idx][i].regex = new RegExp("^" + rr.regex);
            }
          }
        } else if (typeof rr.regex === "string") {
          Rules[idx].regex = new RegExp("^" + r.regex);
        }
      }
      CodeMirror2.defineMIME("text/x-livescript", "livescript");
    });
  }
});

// mode/lua/lua.js
var require_lua = __commonJS({
  "mode/lua/lua.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("lua", function(config, parserConfig) {
        var indentUnit = config.indentUnit;
        function prefixRE(words) {
          return new RegExp("^(?:" + words.join("|") + ")", "i");
        }
        function wordRE(words) {
          return new RegExp("^(?:" + words.join("|") + ")$", "i");
        }
        var specials = wordRE(parserConfig.specials || []);
        var builtins = wordRE([
          "_G",
          "_VERSION",
          "assert",
          "collectgarbage",
          "dofile",
          "error",
          "getfenv",
          "getmetatable",
          "ipairs",
          "load",
          "loadfile",
          "loadstring",
          "module",
          "next",
          "pairs",
          "pcall",
          "print",
          "rawequal",
          "rawget",
          "rawset",
          "require",
          "select",
          "setfenv",
          "setmetatable",
          "tonumber",
          "tostring",
          "type",
          "unpack",
          "xpcall",
          "coroutine.create",
          "coroutine.resume",
          "coroutine.running",
          "coroutine.status",
          "coroutine.wrap",
          "coroutine.yield",
          "debug.debug",
          "debug.getfenv",
          "debug.gethook",
          "debug.getinfo",
          "debug.getlocal",
          "debug.getmetatable",
          "debug.getregistry",
          "debug.getupvalue",
          "debug.setfenv",
          "debug.sethook",
          "debug.setlocal",
          "debug.setmetatable",
          "debug.setupvalue",
          "debug.traceback",
          "close",
          "flush",
          "lines",
          "read",
          "seek",
          "setvbuf",
          "write",
          "io.close",
          "io.flush",
          "io.input",
          "io.lines",
          "io.open",
          "io.output",
          "io.popen",
          "io.read",
          "io.stderr",
          "io.stdin",
          "io.stdout",
          "io.tmpfile",
          "io.type",
          "io.write",
          "math.abs",
          "math.acos",
          "math.asin",
          "math.atan",
          "math.atan2",
          "math.ceil",
          "math.cos",
          "math.cosh",
          "math.deg",
          "math.exp",
          "math.floor",
          "math.fmod",
          "math.frexp",
          "math.huge",
          "math.ldexp",
          "math.log",
          "math.log10",
          "math.max",
          "math.min",
          "math.modf",
          "math.pi",
          "math.pow",
          "math.rad",
          "math.random",
          "math.randomseed",
          "math.sin",
          "math.sinh",
          "math.sqrt",
          "math.tan",
          "math.tanh",
          "os.clock",
          "os.date",
          "os.difftime",
          "os.execute",
          "os.exit",
          "os.getenv",
          "os.remove",
          "os.rename",
          "os.setlocale",
          "os.time",
          "os.tmpname",
          "package.cpath",
          "package.loaded",
          "package.loaders",
          "package.loadlib",
          "package.path",
          "package.preload",
          "package.seeall",
          "string.byte",
          "string.char",
          "string.dump",
          "string.find",
          "string.format",
          "string.gmatch",
          "string.gsub",
          "string.len",
          "string.lower",
          "string.match",
          "string.rep",
          "string.reverse",
          "string.sub",
          "string.upper",
          "table.concat",
          "table.insert",
          "table.maxn",
          "table.remove",
          "table.sort"
        ]);
        var keywords = wordRE([
          "and",
          "break",
          "elseif",
          "false",
          "nil",
          "not",
          "or",
          "return",
          "true",
          "function",
          "end",
          "if",
          "then",
          "else",
          "do",
          "while",
          "repeat",
          "until",
          "for",
          "in",
          "local"
        ]);
        var indentTokens = wordRE(["function", "if", "repeat", "do", "\\(", "{"]);
        var dedentTokens = wordRE(["end", "until", "\\)", "}"]);
        var dedentPartial = prefixRE(["end", "until", "\\)", "}", "else", "elseif"]);
        function readBracket(stream) {
          var level = 0;
          while (stream.eat("="))
            ++level;
          stream.eat("[");
          return level;
        }
        function normal(stream, state) {
          var ch = stream.next();
          if (ch == "-" && stream.eat("-")) {
            if (stream.eat("[") && stream.eat("["))
              return (state.cur = bracketed(readBracket(stream), "comment"))(stream, state);
            stream.skipToEnd();
            return "comment";
          }
          if (ch == '"' || ch == "'")
            return (state.cur = string(ch))(stream, state);
          if (ch == "[" && /[\[=]/.test(stream.peek()))
            return (state.cur = bracketed(readBracket(stream), "string"))(stream, state);
          if (/\d/.test(ch)) {
            stream.eatWhile(/[\w.%]/);
            return "number";
          }
          if (/[\w_]/.test(ch)) {
            stream.eatWhile(/[\w\\\-_.]/);
            return "variable";
          }
          return null;
        }
        function bracketed(level, style) {
          return function(stream, state) {
            var curlev = null, ch;
            while ((ch = stream.next()) != null) {
              if (curlev == null) {
                if (ch == "]")
                  curlev = 0;
              } else if (ch == "=")
                ++curlev;
              else if (ch == "]" && curlev == level) {
                state.cur = normal;
                break;
              } else
                curlev = null;
            }
            return style;
          };
        }
        function string(quote) {
          return function(stream, state) {
            var escaped = false, ch;
            while ((ch = stream.next()) != null) {
              if (ch == quote && !escaped)
                break;
              escaped = !escaped && ch == "\\";
            }
            if (!escaped)
              state.cur = normal;
            return "string";
          };
        }
        return {
          startState: function(basecol) {
            return { basecol: basecol || 0, indentDepth: 0, cur: normal };
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            var style = state.cur(stream, state);
            var word = stream.current();
            if (style == "variable") {
              if (keywords.test(word))
                style = "keyword";
              else if (builtins.test(word))
                style = "builtin";
              else if (specials.test(word))
                style = "variable-2";
            }
            if (style != "comment" && style != "string") {
              if (indentTokens.test(word))
                ++state.indentDepth;
              else if (dedentTokens.test(word))
                --state.indentDepth;
            }
            return style;
          },
          indent: function(state, textAfter) {
            var closing = dedentPartial.test(textAfter);
            return state.basecol + indentUnit * (state.indentDepth - (closing ? 1 : 0));
          },
          lineComment: "--",
          blockCommentStart: "--[[",
          blockCommentEnd: "]]"
        };
      });
      CodeMirror2.defineMIME("text/x-lua", "lua");
    });
  }
});

// mode/mathematica/mathematica.js
var require_mathematica = __commonJS({
  "mode/mathematica/mathematica.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("mathematica", function(_config, _parserConfig) {
        var Identifier = "[a-zA-Z\\$][a-zA-Z0-9\\$]*";
        var pBase = "(?:\\d+)";
        var pFloat = "(?:\\.\\d+|\\d+\\.\\d*|\\d+)";
        var pFloatBase = "(?:\\.\\w+|\\w+\\.\\w*|\\w+)";
        var pPrecision = "(?:`(?:`?" + pFloat + ")?)";
        var reBaseForm = new RegExp("(?:" + pBase + "(?:\\^\\^" + pFloatBase + pPrecision + "?(?:\\*\\^[+-]?\\d+)?))");
        var reFloatForm = new RegExp("(?:" + pFloat + pPrecision + "?(?:\\*\\^[+-]?\\d+)?)");
        var reIdInContext = new RegExp("(?:`?)(?:" + Identifier + ")(?:`(?:" + Identifier + "))*(?:`?)");
        function tokenBase(stream, state) {
          var ch;
          ch = stream.next();
          if (ch === '"') {
            state.tokenize = tokenString;
            return state.tokenize(stream, state);
          }
          if (ch === "(") {
            if (stream.eat("*")) {
              state.commentLevel++;
              state.tokenize = tokenComment;
              return state.tokenize(stream, state);
            }
          }
          stream.backUp(1);
          if (stream.match(reBaseForm, true, false)) {
            return "number";
          }
          if (stream.match(reFloatForm, true, false)) {
            return "number";
          }
          if (stream.match(/(?:In|Out)\[[0-9]*\]/, true, false)) {
            return "atom";
          }
          if (stream.match(/([a-zA-Z\$][a-zA-Z0-9\$]*(?:`[a-zA-Z0-9\$]+)*::usage)/, true, false)) {
            return "meta";
          }
          if (stream.match(/([a-zA-Z\$][a-zA-Z0-9\$]*(?:`[a-zA-Z0-9\$]+)*::[a-zA-Z\$][a-zA-Z0-9\$]*):?/, true, false)) {
            return "string-2";
          }
          if (stream.match(/([a-zA-Z\$][a-zA-Z0-9\$]*\s*:)(?:(?:[a-zA-Z\$][a-zA-Z0-9\$]*)|(?:[^:=>~@\^\&\*\)\[\]'\?,\|])).*/, true, false)) {
            return "variable-2";
          }
          if (stream.match(/[a-zA-Z\$][a-zA-Z0-9\$]*_+[a-zA-Z\$][a-zA-Z0-9\$]*/, true, false)) {
            return "variable-2";
          }
          if (stream.match(/[a-zA-Z\$][a-zA-Z0-9\$]*_+/, true, false)) {
            return "variable-2";
          }
          if (stream.match(/_+[a-zA-Z\$][a-zA-Z0-9\$]*/, true, false)) {
            return "variable-2";
          }
          if (stream.match(/\\\[[a-zA-Z\$][a-zA-Z0-9\$]*\]/, true, false)) {
            return "variable-3";
          }
          if (stream.match(/(?:\[|\]|{|}|\(|\))/, true, false)) {
            return "bracket";
          }
          if (stream.match(/(?:#[a-zA-Z\$][a-zA-Z0-9\$]*|#+[0-9]?)/, true, false)) {
            return "variable-2";
          }
          if (stream.match(reIdInContext, true, false)) {
            return "keyword";
          }
          if (stream.match(/(?:\\|\+|\-|\*|\/|,|;|\.|:|@|~|=|>|<|&|\||_|`|'|\^|\?|!|%)/, true, false)) {
            return "operator";
          }
          stream.next();
          return "error";
        }
        function tokenString(stream, state) {
          var next, end = false, escaped = false;
          while ((next = stream.next()) != null) {
            if (next === '"' && !escaped) {
              end = true;
              break;
            }
            escaped = !escaped && next === "\\";
          }
          if (end && !escaped) {
            state.tokenize = tokenBase;
          }
          return "string";
        }
        ;
        function tokenComment(stream, state) {
          var prev, next;
          while (state.commentLevel > 0 && (next = stream.next()) != null) {
            if (prev === "(" && next === "*")
              state.commentLevel++;
            if (prev === "*" && next === ")")
              state.commentLevel--;
            prev = next;
          }
          if (state.commentLevel <= 0) {
            state.tokenize = tokenBase;
          }
          return "comment";
        }
        return {
          startState: function() {
            return { tokenize: tokenBase, commentLevel: 0 };
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            return state.tokenize(stream, state);
          },
          blockCommentStart: "(*",
          blockCommentEnd: "*)"
        };
      });
      CodeMirror2.defineMIME("text/x-mathematica", {
        name: "mathematica"
      });
    });
  }
});

// mode/mbox/mbox.js
var require_mbox = __commonJS({
  "mode/mbox/mbox.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      var rfc2822 = [
        "From",
        "Sender",
        "Reply-To",
        "To",
        "Cc",
        "Bcc",
        "Message-ID",
        "In-Reply-To",
        "References",
        "Resent-From",
        "Resent-Sender",
        "Resent-To",
        "Resent-Cc",
        "Resent-Bcc",
        "Resent-Message-ID",
        "Return-Path",
        "Received"
      ];
      var rfc2822NoEmail = [
        "Date",
        "Subject",
        "Comments",
        "Keywords",
        "Resent-Date"
      ];
      CodeMirror2.registerHelper("hintWords", "mbox", rfc2822.concat(rfc2822NoEmail));
      var whitespace = /^[ \t]/;
      var separator = /^From /;
      var rfc2822Header = new RegExp("^(" + rfc2822.join("|") + "): ");
      var rfc2822HeaderNoEmail = new RegExp("^(" + rfc2822NoEmail.join("|") + "): ");
      var header = /^[^:]+:/;
      var email = /^[^ ]+@[^ ]+/;
      var untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;
      var bracketedEmail = /^<.*?>/;
      var untilBracketedEmail = /^.*?(?=<.*>)/;
      function styleForHeader(header2) {
        if (header2 === "Subject")
          return "header";
        return "string";
      }
      function readToken(stream, state) {
        if (stream.sol()) {
          state.inSeparator = false;
          if (state.inHeader && stream.match(whitespace)) {
            return null;
          } else {
            state.inHeader = false;
            state.header = null;
          }
          if (stream.match(separator)) {
            state.inHeaders = true;
            state.inSeparator = true;
            return "atom";
          }
          var match;
          var emailPermitted = false;
          if ((match = stream.match(rfc2822HeaderNoEmail)) || (emailPermitted = true) && (match = stream.match(rfc2822Header))) {
            state.inHeaders = true;
            state.inHeader = true;
            state.emailPermitted = emailPermitted;
            state.header = match[1];
            return "atom";
          }
          if (state.inHeaders && (match = stream.match(header))) {
            state.inHeader = true;
            state.emailPermitted = true;
            state.header = match[1];
            return "atom";
          }
          state.inHeaders = false;
          stream.skipToEnd();
          return null;
        }
        if (state.inSeparator) {
          if (stream.match(email))
            return "link";
          if (stream.match(untilEmail))
            return "atom";
          stream.skipToEnd();
          return "atom";
        }
        if (state.inHeader) {
          var style = styleForHeader(state.header);
          if (state.emailPermitted) {
            if (stream.match(bracketedEmail))
              return style + " link";
            if (stream.match(untilBracketedEmail))
              return style;
          }
          stream.skipToEnd();
          return style;
        }
        stream.skipToEnd();
        return null;
      }
      ;
      CodeMirror2.defineMode("mbox", function() {
        return {
          startState: function() {
            return {
              // Is in a mbox separator
              inSeparator: false,
              // Is in a mail header
              inHeader: false,
              // If bracketed email is permitted. Only applicable when inHeader
              emailPermitted: false,
              // Name of current header
              header: null,
              // Is in a region of mail headers
              inHeaders: false
            };
          },
          token: readToken,
          blankLine: function(state) {
            state.inHeaders = state.inSeparator = state.inHeader = false;
          }
        };
      });
      CodeMirror2.defineMIME("application/mbox", "mbox");
    });
  }
});

// mode/mirc/mirc.js
var require_mirc = __commonJS({
  "mode/mirc/mirc.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMIME("text/mirc", "mirc");
      CodeMirror2.defineMode("mirc", function() {
        function parseWords(str) {
          var obj = {}, words = str.split(" ");
          for (var i = 0; i < words.length; ++i)
            obj[words[i]] = true;
          return obj;
        }
        var specials = parseWords("$! $$ $& $? $+ $abook $abs $active $activecid $activewid $address $addtok $agent $agentname $agentstat $agentver $alias $and $anick $ansi2mirc $aop $appactive $appstate $asc $asctime $asin $atan $avoice $away $awaymsg $awaytime $banmask $base $bfind $binoff $biton $bnick $bvar $bytes $calc $cb $cd $ceil $chan $chanmodes $chantypes $chat $chr $cid $clevel $click $cmdbox $cmdline $cnick $color $com $comcall $comchan $comerr $compact $compress $comval $cos $count $cr $crc $creq $crlf $ctime $ctimer $ctrlenter $date $day $daylight $dbuh $dbuw $dccignore $dccport $dde $ddename $debug $decode $decompress $deltok $devent $dialog $did $didreg $didtok $didwm $disk $dlevel $dll $dllcall $dname $dns $duration $ebeeps $editbox $emailaddr $encode $error $eval $event $exist $feof $ferr $fgetc $file $filename $filtered $finddir $finddirn $findfile $findfilen $findtok $fline $floor $fopen $fread $fserve $fulladdress $fulldate $fullname $fullscreen $get $getdir $getdot $gettok $gmt $group $halted $hash $height $hfind $hget $highlight $hnick $hotline $hotlinepos $ial $ialchan $ibl $idle $iel $ifmatch $ignore $iif $iil $inelipse $ini $inmidi $inpaste $inpoly $input $inrect $inroundrect $insong $instok $int $inwave $ip $isalias $isbit $isdde $isdir $isfile $isid $islower $istok $isupper $keychar $keyrpt $keyval $knick $lactive $lactivecid $lactivewid $left $len $level $lf $line $lines $link $lock $lock $locked $log $logstamp $logstampfmt $longfn $longip $lower $ltimer $maddress $mask $matchkey $matchtok $md5 $me $menu $menubar $menucontext $menutype $mid $middir $mircdir $mircexe $mircini $mklogfn $mnick $mode $modefirst $modelast $modespl $mouse $msfile $network $newnick $nick $nofile $nopath $noqt $not $notags $notify $null $numeric $numok $oline $onpoly $opnick $or $ord $os $passivedcc $pic $play $pnick $port $portable $portfree $pos $prefix $prop $protect $puttok $qt $query $rand $r $rawmsg $read $readomo $readn $regex $regml $regsub $regsubex $remove $remtok $replace $replacex $reptok $result $rgb $right $round $scid $scon $script $scriptdir $scriptline $sdir $send $server $serverip $sfile $sha1 $shortfn $show $signal $sin $site $sline $snick $snicks $snotify $sock $sockbr $sockerr $sockname $sorttok $sound $sqrt $ssl $sreq $sslready $status $strip $str $stripped $syle $submenu $switchbar $tan $target $ticks $time $timer $timestamp $timestampfmt $timezone $tip $titlebar $toolbar $treebar $trust $ulevel $ulist $upper $uptime $url $usermode $v1 $v2 $var $vcmd $vcmdstat $vcmdver $version $vnick $vol $wid $width $wildsite $wildtok $window $wrap $xor");
        var keywords = parseWords("abook ajinvite alias aline ame amsg anick aop auser autojoin avoice away background ban bcopy beep bread break breplace bset btrunc bunset bwrite channel clear clearall cline clipboard close cnick color comclose comopen comreg continue copy creq ctcpreply ctcps dcc dccserver dde ddeserver debug dec describe dialog did didtok disable disconnect dlevel dline dll dns dqwindow drawcopy drawdot drawfill drawline drawpic drawrect drawreplace drawrot drawsave drawscroll drawtext ebeeps echo editbox emailaddr enable events exit fclose filter findtext finger firewall flash flist flood flush flushini font fopen fseek fsend fserve fullname fwrite ghide gload gmove gopts goto gplay gpoint gqreq groups gshow gsize gstop gtalk gunload hadd halt haltdef hdec hdel help hfree hinc hload hmake hop hsave ial ialclear ialmark identd if ignore iline inc invite iuser join kick linesep links list load loadbuf localinfo log mdi me menubar mkdir mnick mode msg nick noop notice notify omsg onotice part partall pdcc perform play playctrl pop protect pvoice qme qmsg query queryn quit raw reload remini remote remove rename renwin reseterror resetidle return rlevel rline rmdir run ruser save savebuf saveini say scid scon server set showmirc signam sline sockaccept sockclose socklist socklisten sockmark sockopen sockpause sockread sockrename sockudp sockwrite sound speak splay sreq strip switchbar timer timestamp titlebar tnick tokenize toolbar topic tray treebar ulist unload unset unsetall updatenl url uwho var vcadd vcmd vcrem vol while whois window winhelp write writeint if isalnum isalpha isaop isavoice isban ischan ishop isignore isin isincs isletter islower isnotify isnum ison isop isprotect isreg isupper isvoice iswm iswmcs elseif else goto menu nicklist status title icon size option text edit button check radio box scroll list combo link tab item");
        var functions = parseWords("if elseif else and not or eq ne in ni for foreach while switch");
        var isOperatorChar = /[+\-*&%=<>!?^\/\|]/;
        function chain(stream, state, f) {
          state.tokenize = f;
          return f(stream, state);
        }
        function tokenBase(stream, state) {
          var beforeParams = state.beforeParams;
          state.beforeParams = false;
          var ch = stream.next();
          if (/[\[\]{}\(\),\.]/.test(ch)) {
            if (ch == "(" && beforeParams)
              state.inParams = true;
            else if (ch == ")")
              state.inParams = false;
            return null;
          } else if (/\d/.test(ch)) {
            stream.eatWhile(/[\w\.]/);
            return "number";
          } else if (ch == "\\") {
            stream.eat("\\");
            stream.eat(/./);
            return "number";
          } else if (ch == "/" && stream.eat("*")) {
            return chain(stream, state, tokenComment);
          } else if (ch == ";" && stream.match(/ *\( *\(/)) {
            return chain(stream, state, tokenUnparsed);
          } else if (ch == ";" && !state.inParams) {
            stream.skipToEnd();
            return "comment";
          } else if (ch == '"') {
            stream.eat(/"/);
            return "keyword";
          } else if (ch == "$") {
            stream.eatWhile(/[$_a-z0-9A-Z\.:]/);
            if (specials && specials.propertyIsEnumerable(stream.current().toLowerCase())) {
              return "keyword";
            } else {
              state.beforeParams = true;
              return "builtin";
            }
          } else if (ch == "%") {
            stream.eatWhile(/[^,\s()]/);
            state.beforeParams = true;
            return "string";
          } else if (isOperatorChar.test(ch)) {
            stream.eatWhile(isOperatorChar);
            return "operator";
          } else {
            stream.eatWhile(/[\w\$_{}]/);
            var word = stream.current().toLowerCase();
            if (keywords && keywords.propertyIsEnumerable(word))
              return "keyword";
            if (functions && functions.propertyIsEnumerable(word)) {
              state.beforeParams = true;
              return "keyword";
            }
            return null;
          }
        }
        function tokenComment(stream, state) {
          var maybeEnd = false, ch;
          while (ch = stream.next()) {
            if (ch == "/" && maybeEnd) {
              state.tokenize = tokenBase;
              break;
            }
            maybeEnd = ch == "*";
          }
          return "comment";
        }
        function tokenUnparsed(stream, state) {
          var maybeEnd = 0, ch;
          while (ch = stream.next()) {
            if (ch == ";" && maybeEnd == 2) {
              state.tokenize = tokenBase;
              break;
            }
            if (ch == ")")
              maybeEnd++;
            else if (ch != " ")
              maybeEnd = 0;
          }
          return "meta";
        }
        return {
          startState: function() {
            return {
              tokenize: tokenBase,
              beforeParams: false,
              inParams: false
            };
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            return state.tokenize(stream, state);
          }
        };
      });
    });
  }
});

// mode/mllike/mllike.js
var require_mllike = __commonJS({
  "mode/mllike/mllike.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("mllike", function(_config, parserConfig) {
        var words = {
          "as": "keyword",
          "do": "keyword",
          "else": "keyword",
          "end": "keyword",
          "exception": "keyword",
          "fun": "keyword",
          "functor": "keyword",
          "if": "keyword",
          "in": "keyword",
          "include": "keyword",
          "let": "keyword",
          "of": "keyword",
          "open": "keyword",
          "rec": "keyword",
          "struct": "keyword",
          "then": "keyword",
          "type": "keyword",
          "val": "keyword",
          "while": "keyword",
          "with": "keyword"
        };
        var extraWords = parserConfig.extraWords || {};
        for (var prop in extraWords) {
          if (extraWords.hasOwnProperty(prop)) {
            words[prop] = parserConfig.extraWords[prop];
          }
        }
        var hintWords = [];
        for (var k in words) {
          hintWords.push(k);
        }
        CodeMirror2.registerHelper("hintWords", "mllike", hintWords);
        function tokenBase(stream, state) {
          var ch = stream.next();
          if (ch === '"') {
            state.tokenize = tokenString;
            return state.tokenize(stream, state);
          }
          if (ch === "{") {
            if (stream.eat("|")) {
              state.longString = true;
              state.tokenize = tokenLongString;
              return state.tokenize(stream, state);
            }
          }
          if (ch === "(") {
            if (stream.eat("*")) {
              state.commentLevel++;
              state.tokenize = tokenComment;
              return state.tokenize(stream, state);
            }
          }
          if (ch === "~" || ch === "?") {
            stream.eatWhile(/\w/);
            return "variable-2";
          }
          if (ch === "`") {
            stream.eatWhile(/\w/);
            return "quote";
          }
          if (ch === "/" && parserConfig.slashComments && stream.eat("/")) {
            stream.skipToEnd();
            return "comment";
          }
          if (/\d/.test(ch)) {
            if (ch === "0" && stream.eat(/[bB]/)) {
              stream.eatWhile(/[01]/);
            }
            if (ch === "0" && stream.eat(/[xX]/)) {
              stream.eatWhile(/[0-9a-fA-F]/);
            }
            if (ch === "0" && stream.eat(/[oO]/)) {
              stream.eatWhile(/[0-7]/);
            } else {
              stream.eatWhile(/[\d_]/);
              if (stream.eat(".")) {
                stream.eatWhile(/[\d]/);
              }
              if (stream.eat(/[eE]/)) {
                stream.eatWhile(/[\d\-+]/);
              }
            }
            return "number";
          }
          if (/[+\-*&%=<>!?|@\.~:]/.test(ch)) {
            return "operator";
          }
          if (/[\w\xa1-\uffff]/.test(ch)) {
            stream.eatWhile(/[\w\xa1-\uffff]/);
            var cur = stream.current();
            return words.hasOwnProperty(cur) ? words[cur] : "variable";
          }
          return null;
        }
        function tokenString(stream, state) {
          var next, end = false, escaped = false;
          while ((next = stream.next()) != null) {
            if (next === '"' && !escaped) {
              end = true;
              break;
            }
            escaped = !escaped && next === "\\";
          }
          if (end && !escaped) {
            state.tokenize = tokenBase;
          }
          return "string";
        }
        ;
        function tokenComment(stream, state) {
          var prev, next;
          while (state.commentLevel > 0 && (next = stream.next()) != null) {
            if (prev === "(" && next === "*")
              state.commentLevel++;
            if (prev === "*" && next === ")")
              state.commentLevel--;
            prev = next;
          }
          if (state.commentLevel <= 0) {
            state.tokenize = tokenBase;
          }
          return "comment";
        }
        function tokenLongString(stream, state) {
          var prev, next;
          while (state.longString && (next = stream.next()) != null) {
            if (prev === "|" && next === "}")
              state.longString = false;
            prev = next;
          }
          if (!state.longString) {
            state.tokenize = tokenBase;
          }
          return "string";
        }
        return {
          startState: function() {
            return { tokenize: tokenBase, commentLevel: 0, longString: false };
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            return state.tokenize(stream, state);
          },
          blockCommentStart: "(*",
          blockCommentEnd: "*)",
          lineComment: parserConfig.slashComments ? "//" : null
        };
      });
      CodeMirror2.defineMIME("text/x-ocaml", {
        name: "mllike",
        extraWords: {
          "and": "keyword",
          "assert": "keyword",
          "begin": "keyword",
          "class": "keyword",
          "constraint": "keyword",
          "done": "keyword",
          "downto": "keyword",
          "external": "keyword",
          "function": "keyword",
          "initializer": "keyword",
          "lazy": "keyword",
          "match": "keyword",
          "method": "keyword",
          "module": "keyword",
          "mutable": "keyword",
          "new": "keyword",
          "nonrec": "keyword",
          "object": "keyword",
          "private": "keyword",
          "sig": "keyword",
          "to": "keyword",
          "try": "keyword",
          "value": "keyword",
          "virtual": "keyword",
          "when": "keyword",
          // builtins
          "raise": "builtin",
          "failwith": "builtin",
          "true": "builtin",
          "false": "builtin",
          // Pervasives builtins
          "asr": "builtin",
          "land": "builtin",
          "lor": "builtin",
          "lsl": "builtin",
          "lsr": "builtin",
          "lxor": "builtin",
          "mod": "builtin",
          "or": "builtin",
          // More Pervasives
          "raise_notrace": "builtin",
          "trace": "builtin",
          "exit": "builtin",
          "print_string": "builtin",
          "print_endline": "builtin",
          "int": "type",
          "float": "type",
          "bool": "type",
          "char": "type",
          "string": "type",
          "unit": "type",
          // Modules
          "List": "builtin"
        }
      });
      CodeMirror2.defineMIME("text/x-fsharp", {
        name: "mllike",
        extraWords: {
          "abstract": "keyword",
          "assert": "keyword",
          "base": "keyword",
          "begin": "keyword",
          "class": "keyword",
          "default": "keyword",
          "delegate": "keyword",
          "do!": "keyword",
          "done": "keyword",
          "downcast": "keyword",
          "downto": "keyword",
          "elif": "keyword",
          "extern": "keyword",
          "finally": "keyword",
          "for": "keyword",
          "function": "keyword",
          "global": "keyword",
          "inherit": "keyword",
          "inline": "keyword",
          "interface": "keyword",
          "internal": "keyword",
          "lazy": "keyword",
          "let!": "keyword",
          "match": "keyword",
          "member": "keyword",
          "module": "keyword",
          "mutable": "keyword",
          "namespace": "keyword",
          "new": "keyword",
          "null": "keyword",
          "override": "keyword",
          "private": "keyword",
          "public": "keyword",
          "return!": "keyword",
          "return": "keyword",
          "select": "keyword",
          "static": "keyword",
          "to": "keyword",
          "try": "keyword",
          "upcast": "keyword",
          "use!": "keyword",
          "use": "keyword",
          "void": "keyword",
          "when": "keyword",
          "yield!": "keyword",
          "yield": "keyword",
          // Reserved words
          "atomic": "keyword",
          "break": "keyword",
          "checked": "keyword",
          "component": "keyword",
          "const": "keyword",
          "constraint": "keyword",
          "constructor": "keyword",
          "continue": "keyword",
          "eager": "keyword",
          "event": "keyword",
          "external": "keyword",
          "fixed": "keyword",
          "method": "keyword",
          "mixin": "keyword",
          "object": "keyword",
          "parallel": "keyword",
          "process": "keyword",
          "protected": "keyword",
          "pure": "keyword",
          "sealed": "keyword",
          "tailcall": "keyword",
          "trait": "keyword",
          "virtual": "keyword",
          "volatile": "keyword",
          // builtins
          "List": "builtin",
          "Seq": "builtin",
          "Map": "builtin",
          "Set": "builtin",
          "Option": "builtin",
          "int": "builtin",
          "string": "builtin",
          "not": "builtin",
          "true": "builtin",
          "false": "builtin",
          "raise": "builtin",
          "failwith": "builtin"
        },
        slashComments: true
      });
      CodeMirror2.defineMIME("text/x-sml", {
        name: "mllike",
        extraWords: {
          "abstype": "keyword",
          "and": "keyword",
          "andalso": "keyword",
          "case": "keyword",
          "datatype": "keyword",
          "fn": "keyword",
          "handle": "keyword",
          "infix": "keyword",
          "infixr": "keyword",
          "local": "keyword",
          "nonfix": "keyword",
          "op": "keyword",
          "orelse": "keyword",
          "raise": "keyword",
          "withtype": "keyword",
          "eqtype": "keyword",
          "sharing": "keyword",
          "sig": "keyword",
          "signature": "keyword",
          "structure": "keyword",
          "where": "keyword",
          "true": "keyword",
          "false": "keyword",
          // types
          "int": "builtin",
          "real": "builtin",
          "string": "builtin",
          "char": "builtin",
          "bool": "builtin"
        },
        slashComments: true
      });
    });
  }
});

// mode/modelica/modelica.js
var require_modelica = __commonJS({
  "mode/modelica/modelica.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("modelica", function(config, parserConfig) {
        var indentUnit = config.indentUnit;
        var keywords = parserConfig.keywords || {};
        var builtin = parserConfig.builtin || {};
        var atoms = parserConfig.atoms || {};
        var isSingleOperatorChar = /[;=\(:\),{}.*<>+\-\/^\[\]]/;
        var isDoubleOperatorChar = /(:=|<=|>=|==|<>|\.\+|\.\-|\.\*|\.\/|\.\^)/;
        var isDigit = /[0-9]/;
        var isNonDigit = /[_a-zA-Z]/;
        function tokenLineComment(stream, state) {
          stream.skipToEnd();
          state.tokenize = null;
          return "comment";
        }
        function tokenBlockComment(stream, state) {
          var maybeEnd = false, ch;
          while (ch = stream.next()) {
            if (maybeEnd && ch == "/") {
              state.tokenize = null;
              break;
            }
            maybeEnd = ch == "*";
          }
          return "comment";
        }
        function tokenString(stream, state) {
          var escaped = false, ch;
          while ((ch = stream.next()) != null) {
            if (ch == '"' && !escaped) {
              state.tokenize = null;
              state.sol = false;
              break;
            }
            escaped = !escaped && ch == "\\";
          }
          return "string";
        }
        function tokenIdent(stream, state) {
          stream.eatWhile(isDigit);
          while (stream.eat(isDigit) || stream.eat(isNonDigit)) {
          }
          var cur = stream.current();
          if (state.sol && (cur == "package" || cur == "model" || cur == "when" || cur == "connector"))
            state.level++;
          else if (state.sol && cur == "end" && state.level > 0)
            state.level--;
          state.tokenize = null;
          state.sol = false;
          if (keywords.propertyIsEnumerable(cur))
            return "keyword";
          else if (builtin.propertyIsEnumerable(cur))
            return "builtin";
          else if (atoms.propertyIsEnumerable(cur))
            return "atom";
          else
            return "variable";
        }
        function tokenQIdent(stream, state) {
          while (stream.eat(/[^']/)) {
          }
          state.tokenize = null;
          state.sol = false;
          if (stream.eat("'"))
            return "variable";
          else
            return "error";
        }
        function tokenUnsignedNuber(stream, state) {
          stream.eatWhile(isDigit);
          if (stream.eat(".")) {
            stream.eatWhile(isDigit);
          }
          if (stream.eat("e") || stream.eat("E")) {
            if (!stream.eat("-"))
              stream.eat("+");
            stream.eatWhile(isDigit);
          }
          state.tokenize = null;
          state.sol = false;
          return "number";
        }
        return {
          startState: function() {
            return {
              tokenize: null,
              level: 0,
              sol: true
            };
          },
          token: function(stream, state) {
            if (state.tokenize != null) {
              return state.tokenize(stream, state);
            }
            if (stream.sol()) {
              state.sol = true;
            }
            if (stream.eatSpace()) {
              state.tokenize = null;
              return null;
            }
            var ch = stream.next();
            if (ch == "/" && stream.eat("/")) {
              state.tokenize = tokenLineComment;
            } else if (ch == "/" && stream.eat("*")) {
              state.tokenize = tokenBlockComment;
            } else if (isDoubleOperatorChar.test(ch + stream.peek())) {
              stream.next();
              state.tokenize = null;
              return "operator";
            } else if (isSingleOperatorChar.test(ch)) {
              state.tokenize = null;
              return "operator";
            } else if (isNonDigit.test(ch)) {
              state.tokenize = tokenIdent;
            } else if (ch == "'" && stream.peek() && stream.peek() != "'") {
              state.tokenize = tokenQIdent;
            } else if (ch == '"') {
              state.tokenize = tokenString;
            } else if (isDigit.test(ch)) {
              state.tokenize = tokenUnsignedNuber;
            } else {
              state.tokenize = null;
              return "error";
            }
            return state.tokenize(stream, state);
          },
          indent: function(state, textAfter) {
            if (state.tokenize != null)
              return CodeMirror2.Pass;
            var level = state.level;
            if (/(algorithm)/.test(textAfter))
              level--;
            if (/(equation)/.test(textAfter))
              level--;
            if (/(initial algorithm)/.test(textAfter))
              level--;
            if (/(initial equation)/.test(textAfter))
              level--;
            if (/(end)/.test(textAfter))
              level--;
            if (level > 0)
              return indentUnit * level;
            else
              return 0;
          },
          blockCommentStart: "/*",
          blockCommentEnd: "*/",
          lineComment: "//"
        };
      });
      function words(str) {
        var obj = {}, words2 = str.split(" ");
        for (var i = 0; i < words2.length; ++i)
          obj[words2[i]] = true;
        return obj;
      }
      var modelicaKeywords = "algorithm and annotation assert block break class connect connector constant constrainedby der discrete each else elseif elsewhen encapsulated end enumeration equation expandable extends external false final flow for function if import impure in initial inner input loop model not operator or outer output package parameter partial protected public pure record redeclare replaceable return stream then true type when while within";
      var modelicaBuiltin = "abs acos actualStream asin atan atan2 cardinality ceil cos cosh delay div edge exp floor getInstanceName homotopy inStream integer log log10 mod pre reinit rem semiLinear sign sin sinh spatialDistribution sqrt tan tanh";
      var modelicaAtoms = "Real Boolean Integer String";
      function def(mimes, mode) {
        if (typeof mimes == "string")
          mimes = [mimes];
        var words2 = [];
        function add(obj) {
          if (obj) {
            for (var prop in obj)
              if (obj.hasOwnProperty(prop))
                words2.push(prop);
          }
        }
        add(mode.keywords);
        add(mode.builtin);
        add(mode.atoms);
        if (words2.length) {
          mode.helperType = mimes[0];
          CodeMirror2.registerHelper("hintWords", mimes[0], words2);
        }
        for (var i = 0; i < mimes.length; ++i)
          CodeMirror2.defineMIME(mimes[i], mode);
      }
      def(["text/x-modelica"], {
        name: "modelica",
        keywords: words(modelicaKeywords),
        builtin: words(modelicaBuiltin),
        atoms: words(modelicaAtoms)
      });
    });
  }
});

// mode/mscgen/mscgen.js
var require_mscgen = __commonJS({
  "mode/mscgen/mscgen.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      var languages = {
        mscgen: {
          "keywords": ["msc"],
          "options": ["hscale", "width", "arcgradient", "wordwraparcs"],
          "constants": ["true", "false", "on", "off"],
          "attributes": ["label", "idurl", "id", "url", "linecolor", "linecolour", "textcolor", "textcolour", "textbgcolor", "textbgcolour", "arclinecolor", "arclinecolour", "arctextcolor", "arctextcolour", "arctextbgcolor", "arctextbgcolour", "arcskip"],
          "brackets": ["\\{", "\\}"],
          // [ and  ] are brackets too, but these get handled in with lists
          "arcsWords": ["note", "abox", "rbox", "box"],
          "arcsOthers": ["\\|\\|\\|", "\\.\\.\\.", "---", "--", "<->", "==", "<<=>>", "<=>", "\\.\\.", "<<>>", "::", "<:>", "->", "=>>", "=>", ">>", ":>", "<-", "<<=", "<=", "<<", "<:", "x-", "-x"],
          "singlecomment": ["//", "#"],
          "operators": ["="]
        },
        xu: {
          "keywords": ["msc", "xu"],
          "options": ["hscale", "width", "arcgradient", "wordwraparcs", "wordwrapentities", "watermark"],
          "constants": ["true", "false", "on", "off", "auto"],
          "attributes": ["label", "idurl", "id", "url", "linecolor", "linecolour", "textcolor", "textcolour", "textbgcolor", "textbgcolour", "arclinecolor", "arclinecolour", "arctextcolor", "arctextcolour", "arctextbgcolor", "arctextbgcolour", "arcskip", "title", "deactivate", "activate", "activation"],
          "brackets": ["\\{", "\\}"],
          // [ and  ] are brackets too, but these get handled in with lists
          "arcsWords": ["note", "abox", "rbox", "box", "alt", "else", "opt", "break", "par", "seq", "strict", "neg", "critical", "ignore", "consider", "assert", "loop", "ref", "exc"],
          "arcsOthers": ["\\|\\|\\|", "\\.\\.\\.", "---", "--", "<->", "==", "<<=>>", "<=>", "\\.\\.", "<<>>", "::", "<:>", "->", "=>>", "=>", ">>", ":>", "<-", "<<=", "<=", "<<", "<:", "x-", "-x"],
          "singlecomment": ["//", "#"],
          "operators": ["="]
        },
        msgenny: {
          "keywords": null,
          "options": ["hscale", "width", "arcgradient", "wordwraparcs", "wordwrapentities", "watermark"],
          "constants": ["true", "false", "on", "off", "auto"],
          "attributes": null,
          "brackets": ["\\{", "\\}"],
          "arcsWords": ["note", "abox", "rbox", "box", "alt", "else", "opt", "break", "par", "seq", "strict", "neg", "critical", "ignore", "consider", "assert", "loop", "ref", "exc"],
          "arcsOthers": ["\\|\\|\\|", "\\.\\.\\.", "---", "--", "<->", "==", "<<=>>", "<=>", "\\.\\.", "<<>>", "::", "<:>", "->", "=>>", "=>", ">>", ":>", "<-", "<<=", "<=", "<<", "<:", "x-", "-x"],
          "singlecomment": ["//", "#"],
          "operators": ["="]
        }
      };
      CodeMirror2.defineMode("mscgen", function(_, modeConfig) {
        var language = languages[modeConfig && modeConfig.language || "mscgen"];
        return {
          startState: startStateFn,
          copyState: copyStateFn,
          token: produceTokenFunction(language),
          lineComment: "#",
          blockCommentStart: "/*",
          blockCommentEnd: "*/"
        };
      });
      CodeMirror2.defineMIME("text/x-mscgen", "mscgen");
      CodeMirror2.defineMIME("text/x-xu", { name: "mscgen", language: "xu" });
      CodeMirror2.defineMIME("text/x-msgenny", { name: "mscgen", language: "msgenny" });
      function wordRegexpBoundary(pWords) {
        return new RegExp("\\b(" + pWords.join("|") + ")\\b", "i");
      }
      function wordRegexp(pWords) {
        return new RegExp("(" + pWords.join("|") + ")", "i");
      }
      function startStateFn() {
        return {
          inComment: false,
          inString: false,
          inAttributeList: false,
          inScript: false
        };
      }
      function copyStateFn(pState) {
        return {
          inComment: pState.inComment,
          inString: pState.inString,
          inAttributeList: pState.inAttributeList,
          inScript: pState.inScript
        };
      }
      function produceTokenFunction(pConfig) {
        return function(pStream, pState) {
          if (pStream.match(wordRegexp(pConfig.brackets), true, true)) {
            return "bracket";
          }
          if (!pState.inComment) {
            if (pStream.match(/\/\*[^\*\/]*/, true, true)) {
              pState.inComment = true;
              return "comment";
            }
            if (pStream.match(wordRegexp(pConfig.singlecomment), true, true)) {
              pStream.skipToEnd();
              return "comment";
            }
          }
          if (pState.inComment) {
            if (pStream.match(/[^\*\/]*\*\//, true, true))
              pState.inComment = false;
            else
              pStream.skipToEnd();
            return "comment";
          }
          if (!pState.inString && pStream.match(/\"(\\\"|[^\"])*/, true, true)) {
            pState.inString = true;
            return "string";
          }
          if (pState.inString) {
            if (pStream.match(/[^\"]*\"/, true, true))
              pState.inString = false;
            else
              pStream.skipToEnd();
            return "string";
          }
          if (!!pConfig.keywords && pStream.match(wordRegexpBoundary(pConfig.keywords), true, true))
            return "keyword";
          if (pStream.match(wordRegexpBoundary(pConfig.options), true, true))
            return "keyword";
          if (pStream.match(wordRegexpBoundary(pConfig.arcsWords), true, true))
            return "keyword";
          if (pStream.match(wordRegexp(pConfig.arcsOthers), true, true))
            return "keyword";
          if (!!pConfig.operators && pStream.match(wordRegexp(pConfig.operators), true, true))
            return "operator";
          if (!!pConfig.constants && pStream.match(wordRegexp(pConfig.constants), true, true))
            return "variable";
          if (!pConfig.inAttributeList && !!pConfig.attributes && pStream.match(/\[/, true, true)) {
            pConfig.inAttributeList = true;
            return "bracket";
          }
          if (pConfig.inAttributeList) {
            if (pConfig.attributes !== null && pStream.match(wordRegexpBoundary(pConfig.attributes), true, true)) {
              return "attribute";
            }
            if (pStream.match(/]/, true, true)) {
              pConfig.inAttributeList = false;
              return "bracket";
            }
          }
          pStream.next();
          return "base";
        };
      }
    });
  }
});

// mode/mumps/mumps.js
var require_mumps = __commonJS({
  "mode/mumps/mumps.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("mumps", function() {
        function wordRegexp(words) {
          return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
        }
        var singleOperators = new RegExp("^[\\+\\-\\*/&#!_?\\\\<>=\\'\\[\\]]");
        var doubleOperators = new RegExp("^(('=)|(<=)|(>=)|('>)|('<)|([[)|(]])|(^$))");
        var singleDelimiters = new RegExp("^[\\.,:]");
        var brackets = new RegExp("[()]");
        var identifiers = new RegExp("^[%A-Za-z][A-Za-z0-9]*");
        var commandKeywords = ["break", "close", "do", "else", "for", "goto", "halt", "hang", "if", "job", "kill", "lock", "merge", "new", "open", "quit", "read", "set", "tcommit", "trollback", "tstart", "use", "view", "write", "xecute", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "q", "r", "s", "tc", "tro", "ts", "u", "v", "w", "x"];
        var intrinsicFuncsWords = ["\\$ascii", "\\$char", "\\$data", "\\$ecode", "\\$estack", "\\$etrap", "\\$extract", "\\$find", "\\$fnumber", "\\$get", "\\$horolog", "\\$io", "\\$increment", "\\$job", "\\$justify", "\\$length", "\\$name", "\\$next", "\\$order", "\\$piece", "\\$qlength", "\\$qsubscript", "\\$query", "\\$quit", "\\$random", "\\$reverse", "\\$select", "\\$stack", "\\$test", "\\$text", "\\$translate", "\\$view", "\\$x", "\\$y", "\\$a", "\\$c", "\\$d", "\\$e", "\\$ec", "\\$es", "\\$et", "\\$f", "\\$fn", "\\$g", "\\$h", "\\$i", "\\$j", "\\$l", "\\$n", "\\$na", "\\$o", "\\$p", "\\$q", "\\$ql", "\\$qs", "\\$r", "\\$re", "\\$s", "\\$st", "\\$t", "\\$tr", "\\$v", "\\$z"];
        var intrinsicFuncs = wordRegexp(intrinsicFuncsWords);
        var command = wordRegexp(commandKeywords);
        function tokenBase(stream, state) {
          if (stream.sol()) {
            state.label = true;
            state.commandMode = 0;
          }
          var ch = stream.peek();
          if (ch == " " || ch == "	") {
            state.label = false;
            if (state.commandMode == 0)
              state.commandMode = 1;
            else if (state.commandMode < 0 || state.commandMode == 2)
              state.commandMode = 0;
          } else if (ch != "." && state.commandMode > 0) {
            if (ch == ":")
              state.commandMode = -1;
            else
              state.commandMode = 2;
          }
          if (ch === "(" || ch === "	")
            state.label = false;
          if (ch === ";") {
            stream.skipToEnd();
            return "comment";
          }
          if (stream.match(/^[-+]?\d+(\.\d+)?([eE][-+]?\d+)?/))
            return "number";
          if (ch == '"') {
            if (stream.skipTo('"')) {
              stream.next();
              return "string";
            } else {
              stream.skipToEnd();
              return "error";
            }
          }
          if (stream.match(doubleOperators) || stream.match(singleOperators))
            return "operator";
          if (stream.match(singleDelimiters))
            return null;
          if (brackets.test(ch)) {
            stream.next();
            return "bracket";
          }
          if (state.commandMode > 0 && stream.match(command))
            return "variable-2";
          if (stream.match(intrinsicFuncs))
            return "builtin";
          if (stream.match(identifiers))
            return "variable";
          if (ch === "$" || ch === "^") {
            stream.next();
            return "builtin";
          }
          if (ch === "@") {
            stream.next();
            return "string-2";
          }
          if (/[\w%]/.test(ch)) {
            stream.eatWhile(/[\w%]/);
            return "variable";
          }
          stream.next();
          return "error";
        }
        return {
          startState: function() {
            return {
              label: false,
              commandMode: 0
            };
          },
          token: function(stream, state) {
            var style = tokenBase(stream, state);
            if (state.label)
              return "tag";
            return style;
          }
        };
      });
      CodeMirror2.defineMIME("text/x-mumps", "mumps");
    });
  }
});

// mode/nginx/nginx.js
var require_nginx = __commonJS({
  "mode/nginx/nginx.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("nginx", function(config) {
        function words(str) {
          var obj = {}, words2 = str.split(" ");
          for (var i = 0; i < words2.length; ++i)
            obj[words2[i]] = true;
          return obj;
        }
        var keywords = words(
          /* ngxDirectiveControl */
          "break return rewrite set accept_mutex accept_mutex_delay access_log add_after_body add_before_body add_header addition_types aio alias allow ancient_browser ancient_browser_value auth_basic auth_basic_user_file auth_http auth_http_header auth_http_timeout autoindex autoindex_exact_size autoindex_localtime charset charset_types client_body_buffer_size client_body_in_file_only client_body_in_single_buffer client_body_temp_path client_body_timeout client_header_buffer_size client_header_timeout client_max_body_size connection_pool_size create_full_put_path daemon dav_access dav_methods debug_connection debug_points default_type degradation degrade deny devpoll_changes devpoll_events directio directio_alignment empty_gif env epoll_events error_log eventport_events expires fastcgi_bind fastcgi_buffer_size fastcgi_buffers fastcgi_busy_buffers_size fastcgi_cache fastcgi_cache_key fastcgi_cache_methods fastcgi_cache_min_uses fastcgi_cache_path fastcgi_cache_use_stale fastcgi_cache_valid fastcgi_catch_stderr fastcgi_connect_timeout fastcgi_hide_header fastcgi_ignore_client_abort fastcgi_ignore_headers fastcgi_index fastcgi_intercept_errors fastcgi_max_temp_file_size fastcgi_next_upstream fastcgi_param fastcgi_pass_header fastcgi_pass_request_body fastcgi_pass_request_headers fastcgi_read_timeout fastcgi_send_lowat fastcgi_send_timeout fastcgi_split_path_info fastcgi_store fastcgi_store_access fastcgi_temp_file_write_size fastcgi_temp_path fastcgi_upstream_fail_timeout fastcgi_upstream_max_fails flv geoip_city geoip_country google_perftools_profiles gzip gzip_buffers gzip_comp_level gzip_disable gzip_hash gzip_http_version gzip_min_length gzip_no_buffer gzip_proxied gzip_static gzip_types gzip_vary gzip_window if_modified_since ignore_invalid_headers image_filter image_filter_buffer image_filter_jpeg_quality image_filter_transparency imap_auth imap_capabilities imap_client_buffer index ip_hash keepalive_requests keepalive_timeout kqueue_changes kqueue_events large_client_header_buffers limit_conn limit_conn_log_level limit_rate limit_rate_after limit_req limit_req_log_level limit_req_zone limit_zone lingering_time lingering_timeout lock_file log_format log_not_found log_subrequest map_hash_bucket_size map_hash_max_size master_process memcached_bind memcached_buffer_size memcached_connect_timeout memcached_next_upstream memcached_read_timeout memcached_send_timeout memcached_upstream_fail_timeout memcached_upstream_max_fails merge_slashes min_delete_depth modern_browser modern_browser_value msie_padding msie_refresh multi_accept open_file_cache open_file_cache_errors open_file_cache_events open_file_cache_min_uses open_file_cache_valid open_log_file_cache output_buffers override_charset perl perl_modules perl_require perl_set pid pop3_auth pop3_capabilities port_in_redirect postpone_gzipping postpone_output protocol proxy proxy_bind proxy_buffer proxy_buffer_size proxy_buffering proxy_buffers proxy_busy_buffers_size proxy_cache proxy_cache_key proxy_cache_methods proxy_cache_min_uses proxy_cache_path proxy_cache_use_stale proxy_cache_valid proxy_connect_timeout proxy_headers_hash_bucket_size proxy_headers_hash_max_size proxy_hide_header proxy_ignore_client_abort proxy_ignore_headers proxy_intercept_errors proxy_max_temp_file_size proxy_method proxy_next_upstream proxy_pass_error_message proxy_pass_header proxy_pass_request_body proxy_pass_request_headers proxy_read_timeout proxy_redirect proxy_send_lowat proxy_send_timeout proxy_set_body proxy_set_header proxy_ssl_session_reuse proxy_store proxy_store_access proxy_temp_file_write_size proxy_temp_path proxy_timeout proxy_upstream_fail_timeout proxy_upstream_max_fails random_index read_ahead real_ip_header recursive_error_pages request_pool_size reset_timedout_connection resolver resolver_timeout rewrite_log rtsig_overflow_events rtsig_overflow_test rtsig_overflow_threshold rtsig_signo satisfy secure_link_secret send_lowat send_timeout sendfile sendfile_max_chunk server_name_in_redirect server_names_hash_bucket_size server_names_hash_max_size server_tokens set_real_ip_from smtp_auth smtp_capabilities smtp_client_buffer smtp_greeting_delay so_keepalive source_charset ssi ssi_ignore_recycled_buffers ssi_min_file_chunk ssi_silent_errors ssi_types ssi_value_length ssl ssl_certificate ssl_certificate_key ssl_ciphers ssl_client_certificate ssl_crl ssl_dhparam ssl_engine ssl_prefer_server_ciphers ssl_protocols ssl_session_cache ssl_session_timeout ssl_verify_client ssl_verify_depth starttls stub_status sub_filter sub_filter_once sub_filter_types tcp_nodelay tcp_nopush thread_stack_size timeout timer_resolution types_hash_bucket_size types_hash_max_size underscores_in_headers uninitialized_variable_warn use user userid userid_domain userid_expires userid_mark userid_name userid_p3p userid_path userid_service valid_referers variables_hash_bucket_size variables_hash_max_size worker_connections worker_cpu_affinity worker_priority worker_processes worker_rlimit_core worker_rlimit_nofile worker_rlimit_sigpending worker_threads working_directory xclient xml_entities xslt_stylesheet xslt_typesdrew@li229-23"
        );
        var keywords_block = words(
          /* ngxDirectiveBlock */
          "http mail events server types location upstream charset_map limit_except if geo map"
        );
        var keywords_important = words(
          /* ngxDirectiveImportant */
          "include root server server_name listen internal proxy_pass memcached_pass fastcgi_pass try_files"
        );
        var indentUnit = config.indentUnit, type;
        function ret(style, tp) {
          type = tp;
          return style;
        }
        function tokenBase(stream, state) {
          stream.eatWhile(/[\w\$_]/);
          var cur = stream.current();
          if (keywords.propertyIsEnumerable(cur)) {
            return "keyword";
          } else if (keywords_block.propertyIsEnumerable(cur)) {
            return "variable-2";
          } else if (keywords_important.propertyIsEnumerable(cur)) {
            return "string-2";
          }
          var ch = stream.next();
          if (ch == "@") {
            stream.eatWhile(/[\w\\\-]/);
            return ret("meta", stream.current());
          } else if (ch == "/" && stream.eat("*")) {
            state.tokenize = tokenCComment;
            return tokenCComment(stream, state);
          } else if (ch == "<" && stream.eat("!")) {
            state.tokenize = tokenSGMLComment;
            return tokenSGMLComment(stream, state);
          } else if (ch == "=")
            ret(null, "compare");
          else if ((ch == "~" || ch == "|") && stream.eat("="))
            return ret(null, "compare");
          else if (ch == '"' || ch == "'") {
            state.tokenize = tokenString(ch);
            return state.tokenize(stream, state);
          } else if (ch == "#") {
            stream.skipToEnd();
            return ret("comment", "comment");
          } else if (ch == "!") {
            stream.match(/^\s*\w*/);
            return ret("keyword", "important");
          } else if (/\d/.test(ch)) {
            stream.eatWhile(/[\w.%]/);
            return ret("number", "unit");
          } else if (/[,.+>*\/]/.test(ch)) {
            return ret(null, "select-op");
          } else if (/[;{}:\[\]]/.test(ch)) {
            return ret(null, ch);
          } else {
            stream.eatWhile(/[\w\\\-]/);
            return ret("variable", "variable");
          }
        }
        function tokenCComment(stream, state) {
          var maybeEnd = false, ch;
          while ((ch = stream.next()) != null) {
            if (maybeEnd && ch == "/") {
              state.tokenize = tokenBase;
              break;
            }
            maybeEnd = ch == "*";
          }
          return ret("comment", "comment");
        }
        function tokenSGMLComment(stream, state) {
          var dashes = 0, ch;
          while ((ch = stream.next()) != null) {
            if (dashes >= 2 && ch == ">") {
              state.tokenize = tokenBase;
              break;
            }
            dashes = ch == "-" ? dashes + 1 : 0;
          }
          return ret("comment", "comment");
        }
        function tokenString(quote) {
          return function(stream, state) {
            var escaped = false, ch;
            while ((ch = stream.next()) != null) {
              if (ch == quote && !escaped)
                break;
              escaped = !escaped && ch == "\\";
            }
            if (!escaped)
              state.tokenize = tokenBase;
            return ret("string", "string");
          };
        }
        return {
          startState: function(base) {
            return {
              tokenize: tokenBase,
              baseIndent: base || 0,
              stack: []
            };
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            type = null;
            var style = state.tokenize(stream, state);
            var context = state.stack[state.stack.length - 1];
            if (type == "hash" && context == "rule")
              style = "atom";
            else if (style == "variable") {
              if (context == "rule")
                style = "number";
              else if (!context || context == "@media{")
                style = "tag";
            }
            if (context == "rule" && /^[\{\};]$/.test(type))
              state.stack.pop();
            if (type == "{") {
              if (context == "@media")
                state.stack[state.stack.length - 1] = "@media{";
              else
                state.stack.push("{");
            } else if (type == "}")
              state.stack.pop();
            else if (type == "@media")
              state.stack.push("@media");
            else if (context == "{" && type != "comment")
              state.stack.push("rule");
            return style;
          },
          indent: function(state, textAfter) {
            var n = state.stack.length;
            if (/^\}/.test(textAfter))
              n -= state.stack[state.stack.length - 1] == "rule" ? 2 : 1;
            return state.baseIndent + n * indentUnit;
          },
          electricChars: "}"
        };
      });
      CodeMirror2.defineMIME("text/x-nginx-conf", "nginx");
    });
  }
});

// mode/nsis/nsis.js
var require_nsis = __commonJS({
  "mode/nsis/nsis.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror(), require_simple());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror", "../../addon/mode/simple"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineSimpleMode("nsis", {
        start: [
          // Numbers
          { regex: /(?:[+-]?)(?:0x[\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\d+.?\d*)/, token: "number" },
          // Strings
          { regex: /"(?:[^\\"]|\\.)*"?/, token: "string" },
          { regex: /'(?:[^\\']|\\.)*'?/, token: "string" },
          { regex: /`(?:[^\\`]|\\.)*`?/, token: "string" },
          // Compile Time Commands
          { regex: /^\s*(?:\!(include|addincludedir|addplugindir|appendfile|cd|delfile|echo|error|execute|packhdr|pragma|finalize|getdllversion|gettlbversion|system|tempfile|warning|verbose|define|undef|insertmacro|macro|macroend|makensis|searchparse|searchreplace))\b/, token: "keyword" },
          // Conditional Compilation
          { regex: /^\s*(?:\!(if(?:n?def)?|ifmacron?def|macro))\b/, token: "keyword", indent: true },
          { regex: /^\s*(?:\!(else|endif|macroend))\b/, token: "keyword", dedent: true },
          // Runtime Commands
          { regex: /^\s*(?:Abort|AddBrandingImage|AddSize|AllowRootDirInstall|AllowSkipFiles|AutoCloseWindow|BGFont|BGGradient|BrandingText|BringToFront|Call|CallInstDLL|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|CRCCheck|CreateDirectory|CreateFont|CreateShortCut|Delete|DeleteINISec|DeleteINIStr|DeleteRegKey|DeleteRegValue|DetailPrint|DetailsButtonText|DirText|DirVar|DirVerify|EnableWindow|EnumRegKey|EnumRegValue|Exch|Exec|ExecShell|ExecShellWait|ExecWait|ExpandEnvStrings|File|FileBufSize|FileClose|FileErrorText|FileOpen|FileRead|FileReadByte|FileReadUTF16LE|FileReadWord|FileWriteUTF16LE|FileSeek|FileWrite|FileWriteByte|FileWriteWord|FindClose|FindFirst|FindNext|FindWindow|FlushINI|GetCurInstType|GetCurrentAddress|GetDlgItem|GetDLLVersion|GetDLLVersionLocal|GetErrorLevel|GetFileTime|GetFileTimeLocal|GetFullPathName|GetFunctionAddress|GetInstDirError|GetKnownFolderPath|GetLabelAddress|GetTempFileName|Goto|HideWindow|Icon|IfAbort|IfErrors|IfFileExists|IfRebootFlag|IfRtlLanguage|IfShellVarContextAll|IfSilent|InitPluginsDir|InstallButtonText|InstallColors|InstallDir|InstallDirRegKey|InstProgressFlags|InstType|InstTypeGetText|InstTypeSetText|Int64Cmp|Int64CmpU|Int64Fmt|IntCmp|IntCmpU|IntFmt|IntOp|IntPtrCmp|IntPtrCmpU|IntPtrOp|IsWindow|LangString|LicenseBkColor|LicenseData|LicenseForceSelection|LicenseLangString|LicenseText|LoadAndSetImage|LoadLanguageFile|LockWindow|LogSet|LogText|ManifestDPIAware|ManifestLongPathAware|ManifestMaxVersionTested|ManifestSupportedOS|MessageBox|MiscButtonText|Name|Nop|OutFile|Page|PageCallbacks|PEAddResource|PEDllCharacteristics|PERemoveResource|PESubsysVer|Pop|Push|Quit|ReadEnvStr|ReadINIStr|ReadRegDWORD|ReadRegStr|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|RMDir|SearchPath|SectionGetFlags|SectionGetInstTypes|SectionGetSize|SectionGetText|SectionIn|SectionSetFlags|SectionSetInstTypes|SectionSetSize|SectionSetText|SendMessage|SetAutoClose|SetBrandingImage|SetCompress|SetCompressor|SetCompressorDictSize|SetCtlColors|SetCurInstType|SetDatablockOptimize|SetDateSave|SetDetailsPrint|SetDetailsView|SetErrorLevel|SetErrors|SetFileAttributes|SetFont|SetOutPath|SetOverwrite|SetRebootFlag|SetRegView|SetShellVarContext|SetSilent|ShowInstDetails|ShowUninstDetails|ShowWindow|SilentInstall|SilentUnInstall|Sleep|SpaceTexts|StrCmp|StrCmpS|StrCpy|StrLen|SubCaption|Unicode|UninstallButtonText|UninstallCaption|UninstallIcon|UninstallSubCaption|UninstallText|UninstPage|UnRegDLL|Var|VIAddVersionKey|VIFileVersion|VIProductVersion|WindowIcon|WriteINIStr|WriteRegBin|WriteRegDWORD|WriteRegExpandStr|WriteRegMultiStr|WriteRegNone|WriteRegStr|WriteUninstaller|XPStyle)\b/, token: "keyword" },
          { regex: /^\s*(?:Function|PageEx|Section(?:Group)?)\b/, token: "keyword", indent: true },
          { regex: /^\s*(?:(Function|PageEx|Section(?:Group)?)End)\b/, token: "keyword", dedent: true },
          // Command Options
          { regex: /\b(?:ARCHIVE|FILE_ATTRIBUTE_ARCHIVE|FILE_ATTRIBUTE_HIDDEN|FILE_ATTRIBUTE_NORMAL|FILE_ATTRIBUTE_OFFLINE|FILE_ATTRIBUTE_READONLY|FILE_ATTRIBUTE_SYSTEM|FILE_ATTRIBUTE_TEMPORARY|HIDDEN|HKCC|HKCR(32|64)?|HKCU(32|64)?|HKDD|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_DYN_DATA|HKEY_LOCAL_MACHINE|HKEY_PERFORMANCE_DATA|HKEY_USERS|HKLM(32|64)?|HKPD|HKU|IDABORT|IDCANCEL|IDD_DIR|IDD_INST|IDD_INSTFILES|IDD_LICENSE|IDD_SELCOM|IDD_UNINST|IDD_VERIFY|IDIGNORE|IDNO|IDOK|IDRETRY|IDYES|MB_ABORTRETRYIGNORE|MB_DEFBUTTON1|MB_DEFBUTTON2|MB_DEFBUTTON3|MB_DEFBUTTON4|MB_ICONEXCLAMATION|MB_ICONINFORMATION|MB_ICONQUESTION|MB_ICONSTOP|MB_OK|MB_OKCANCEL|MB_RETRYCANCEL|MB_RIGHT|MB_RTLREADING|MB_SETFOREGROUND|MB_TOPMOST|MB_USERICON|MB_YESNO|MB_YESNOCANCEL|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SW_HIDE|SW_SHOWDEFAULT|SW_SHOWMAXIMIZED|SW_SHOWMINIMIZED|SW_SHOWNORMAL|SYSTEM|TEMPORARY)\b/, token: "atom" },
          { regex: /\b(?:admin|all|auto|both|bottom|bzip2|components|current|custom|directory|false|force|hide|highest|ifdiff|ifnewer|instfiles|lastused|leave|left|license|listonly|lzma|nevershow|none|normal|notset|off|on|right|show|silent|silentlog|textonly|top|true|try|un\.components|un\.custom|un\.directory|un\.instfiles|un\.license|uninstConfirm|user|Win10|Win7|Win8|WinVista|zlib)\b/, token: "builtin" },
          // LogicLib.nsh
          { regex: /\$\{(?:And(?:If(?:Not)?|Unless)|Break|Case(?:Else)?|Continue|Default|Do(?:Until|While)?|Else(?:If(?:Not)?|Unless)?|End(?:If|Select|Switch)|Exit(?:Do|For|While)|For(?:Each)?|If(?:Cmd|Not(?:Then)?|Then)?|Loop(?:Until|While)?|Or(?:If(?:Not)?|Unless)|Select|Switch|Unless|While)\}/, token: "variable-2", indent: true },
          // FileFunc.nsh
          { regex: /\$\{(?:BannerTrimPath|DirState|DriveSpace|Get(BaseName|Drives|ExeName|ExePath|FileAttributes|FileExt|FileName|FileVersion|Options|OptionsS|Parameters|Parent|Root|Size|Time)|Locate|RefreshShellIcons)\}/, token: "variable-2", dedent: true },
          // Memento.nsh
          { regex: /\$\{(?:Memento(?:Section(?:Done|End|Restore|Save)?|UnselectedSection))\}/, token: "variable-2", dedent: true },
          // TextFunc.nsh
          { regex: /\$\{(?:Config(?:Read|ReadS|Write|WriteS)|File(?:Join|ReadFromEnd|Recode)|Line(?:Find|Read|Sum)|Text(?:Compare|CompareS)|TrimNewLines)\}/, token: "variable-2", dedent: true },
          // WinVer.nsh
          { regex: /\$\{(?:(?:At(?:Least|Most)|Is)(?:ServicePack|Win(?:7|8|10|95|98|200(?:0|3|8(?:R2)?)|ME|NT4|Vista|XP))|Is(?:NT|Server))\}/, token: "variable", dedent: true },
          // WordFunc.nsh
          { regex: /\$\{(?:StrFilterS?|Version(?:Compare|Convert)|Word(?:AddS?|Find(?:(?:2|3)X)?S?|InsertS?|ReplaceS?))\}/, token: "variable-2", dedent: true },
          // x64.nsh
          { regex: /\$\{(?:RunningX64)\}/, token: "variable", dedent: true },
          { regex: /\$\{(?:Disable|Enable)X64FSRedirection\}/, token: "variable-2", dedent: true },
          // Line Comment
          { regex: /(#|;).*/, token: "comment" },
          // Block Comment
          { regex: /\/\*/, token: "comment", next: "comment" },
          // Operator
          { regex: /[-+\/*=<>!]+/, token: "operator" },
          // Variable
          { regex: /\$\w+/, token: "variable" },
          // Constant
          { regex: /\${[\w\.:-]+}/, token: "variable-2" },
          // Language String
          { regex: /\$\([\w\.:-]+\)/, token: "variable-3" }
        ],
        comment: [
          { regex: /.*?\*\//, token: "comment", next: "start" },
          { regex: /.*/, token: "comment" }
        ],
        meta: {
          electricInput: /^\s*((Function|PageEx|Section|Section(Group)?)End|(\!(endif|macroend))|\$\{(End(If|Unless|While)|Loop(Until)|Next)\})$/,
          blockCommentStart: "/*",
          blockCommentEnd: "*/",
          lineComment: ["#", ";"]
        }
      });
      CodeMirror2.defineMIME("text/x-nsis", "nsis");
    });
  }
});

// mode/ntriples/ntriples.js
var require_ntriples = __commonJS({
  "mode/ntriples/ntriples.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("ntriples", function() {
        var Location = {
          PRE_SUBJECT: 0,
          WRITING_SUB_URI: 1,
          WRITING_BNODE_URI: 2,
          PRE_PRED: 3,
          WRITING_PRED_URI: 4,
          PRE_OBJ: 5,
          WRITING_OBJ_URI: 6,
          WRITING_OBJ_BNODE: 7,
          WRITING_OBJ_LITERAL: 8,
          WRITING_LIT_LANG: 9,
          WRITING_LIT_TYPE: 10,
          POST_OBJ: 11,
          ERROR: 12
        };
        function transitState(currState, c) {
          var currLocation = currState.location;
          var ret;
          if (currLocation == Location.PRE_SUBJECT && c == "<")
            ret = Location.WRITING_SUB_URI;
          else if (currLocation == Location.PRE_SUBJECT && c == "_")
            ret = Location.WRITING_BNODE_URI;
          else if (currLocation == Location.PRE_PRED && c == "<")
            ret = Location.WRITING_PRED_URI;
          else if (currLocation == Location.PRE_OBJ && c == "<")
            ret = Location.WRITING_OBJ_URI;
          else if (currLocation == Location.PRE_OBJ && c == "_")
            ret = Location.WRITING_OBJ_BNODE;
          else if (currLocation == Location.PRE_OBJ && c == '"')
            ret = Location.WRITING_OBJ_LITERAL;
          else if (currLocation == Location.WRITING_SUB_URI && c == ">")
            ret = Location.PRE_PRED;
          else if (currLocation == Location.WRITING_BNODE_URI && c == " ")
            ret = Location.PRE_PRED;
          else if (currLocation == Location.WRITING_PRED_URI && c == ">")
            ret = Location.PRE_OBJ;
          else if (currLocation == Location.WRITING_OBJ_URI && c == ">")
            ret = Location.POST_OBJ;
          else if (currLocation == Location.WRITING_OBJ_BNODE && c == " ")
            ret = Location.POST_OBJ;
          else if (currLocation == Location.WRITING_OBJ_LITERAL && c == '"')
            ret = Location.POST_OBJ;
          else if (currLocation == Location.WRITING_LIT_LANG && c == " ")
            ret = Location.POST_OBJ;
          else if (currLocation == Location.WRITING_LIT_TYPE && c == ">")
            ret = Location.POST_OBJ;
          else if (currLocation == Location.WRITING_OBJ_LITERAL && c == "@")
            ret = Location.WRITING_LIT_LANG;
          else if (currLocation == Location.WRITING_OBJ_LITERAL && c == "^")
            ret = Location.WRITING_LIT_TYPE;
          else if (c == " " && (currLocation == Location.PRE_SUBJECT || currLocation == Location.PRE_PRED || currLocation == Location.PRE_OBJ || currLocation == Location.POST_OBJ))
            ret = currLocation;
          else if (currLocation == Location.POST_OBJ && c == ".")
            ret = Location.PRE_SUBJECT;
          else
            ret = Location.ERROR;
          currState.location = ret;
        }
        return {
          startState: function() {
            return {
              location: Location.PRE_SUBJECT,
              uris: [],
              anchors: [],
              bnodes: [],
              langs: [],
              types: []
            };
          },
          token: function(stream, state) {
            var ch = stream.next();
            if (ch == "<") {
              transitState(state, ch);
              var parsedURI = "";
              stream.eatWhile(function(c) {
                if (c != "#" && c != ">") {
                  parsedURI += c;
                  return true;
                }
                return false;
              });
              state.uris.push(parsedURI);
              if (stream.match("#", false))
                return "variable";
              stream.next();
              transitState(state, ">");
              return "variable";
            }
            if (ch == "#") {
              var parsedAnchor = "";
              stream.eatWhile(function(c) {
                if (c != ">" && c != " ") {
                  parsedAnchor += c;
                  return true;
                }
                return false;
              });
              state.anchors.push(parsedAnchor);
              return "variable-2";
            }
            if (ch == ">") {
              transitState(state, ">");
              return "variable";
            }
            if (ch == "_") {
              transitState(state, ch);
              var parsedBNode = "";
              stream.eatWhile(function(c) {
                if (c != " ") {
                  parsedBNode += c;
                  return true;
                }
                return false;
              });
              state.bnodes.push(parsedBNode);
              stream.next();
              transitState(state, " ");
              return "builtin";
            }
            if (ch == '"') {
              transitState(state, ch);
              stream.eatWhile(function(c) {
                return c != '"';
              });
              stream.next();
              if (stream.peek() != "@" && stream.peek() != "^") {
                transitState(state, '"');
              }
              return "string";
            }
            if (ch == "@") {
              transitState(state, "@");
              var parsedLang = "";
              stream.eatWhile(function(c) {
                if (c != " ") {
                  parsedLang += c;
                  return true;
                }
                return false;
              });
              state.langs.push(parsedLang);
              stream.next();
              transitState(state, " ");
              return "string-2";
            }
            if (ch == "^") {
              stream.next();
              transitState(state, "^");
              var parsedType = "";
              stream.eatWhile(function(c) {
                if (c != ">") {
                  parsedType += c;
                  return true;
                }
                return false;
              });
              state.types.push(parsedType);
              stream.next();
              transitState(state, ">");
              return "variable";
            }
            if (ch == " ") {
              transitState(state, ch);
            }
            if (ch == ".") {
              transitState(state, ch);
            }
          }
        };
      });
      CodeMirror2.defineMIME("application/n-triples", "ntriples");
      CodeMirror2.defineMIME("application/n-quads", "ntriples");
      CodeMirror2.defineMIME("text/n-triples", "ntriples");
    });
  }
});

// mode/octave/octave.js
var require_octave = __commonJS({
  "mode/octave/octave.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("octave", function() {
        function wordRegexp(words) {
          return new RegExp("^((" + words.join(")|(") + "))\\b");
        }
        var singleOperators = new RegExp("^[\\+\\-\\*/&|\\^~<>!@'\\\\]");
        var singleDelimiters = new RegExp("^[\\(\\[\\{\\},:=;\\.]");
        var doubleOperators = new RegExp("^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\.[\\+\\-\\*/\\^\\\\]))");
        var doubleDelimiters = new RegExp("^((!=)|(\\+=)|(\\-=)|(\\*=)|(/=)|(&=)|(\\|=)|(\\^=))");
        var tripleDelimiters = new RegExp("^((>>=)|(<<=))");
        var expressionEnd = new RegExp("^[\\]\\)]");
        var identifiers = new RegExp("^[_A-Za-z\xA1-\uFFFF][_A-Za-z0-9\xA1-\uFFFF]*");
        var builtins = wordRegexp([
          "error",
          "eval",
          "function",
          "abs",
          "acos",
          "atan",
          "asin",
          "cos",
          "cosh",
          "exp",
          "log",
          "prod",
          "sum",
          "log10",
          "max",
          "min",
          "sign",
          "sin",
          "sinh",
          "sqrt",
          "tan",
          "reshape",
          "break",
          "zeros",
          "default",
          "margin",
          "round",
          "ones",
          "rand",
          "syn",
          "ceil",
          "floor",
          "size",
          "clear",
          "zeros",
          "eye",
          "mean",
          "std",
          "cov",
          "det",
          "eig",
          "inv",
          "norm",
          "rank",
          "trace",
          "expm",
          "logm",
          "sqrtm",
          "linspace",
          "plot",
          "title",
          "xlabel",
          "ylabel",
          "legend",
          "text",
          "grid",
          "meshgrid",
          "mesh",
          "num2str",
          "fft",
          "ifft",
          "arrayfun",
          "cellfun",
          "input",
          "fliplr",
          "flipud",
          "ismember"
        ]);
        var keywords = wordRegexp([
          "return",
          "case",
          "switch",
          "else",
          "elseif",
          "end",
          "endif",
          "endfunction",
          "if",
          "otherwise",
          "do",
          "for",
          "while",
          "try",
          "catch",
          "classdef",
          "properties",
          "events",
          "methods",
          "global",
          "persistent",
          "endfor",
          "endwhile",
          "printf",
          "sprintf",
          "disp",
          "until",
          "continue",
          "pkg"
        ]);
        function tokenTranspose(stream, state) {
          if (!stream.sol() && stream.peek() === "'") {
            stream.next();
            state.tokenize = tokenBase;
            return "operator";
          }
          state.tokenize = tokenBase;
          return tokenBase(stream, state);
        }
        function tokenComment(stream, state) {
          if (stream.match(/^.*%}/)) {
            state.tokenize = tokenBase;
            return "comment";
          }
          ;
          stream.skipToEnd();
          return "comment";
        }
        function tokenBase(stream, state) {
          if (stream.eatSpace())
            return null;
          if (stream.match("%{")) {
            state.tokenize = tokenComment;
            stream.skipToEnd();
            return "comment";
          }
          if (stream.match(/^[%#]/)) {
            stream.skipToEnd();
            return "comment";
          }
          if (stream.match(/^[0-9\.+-]/, false)) {
            if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {
              stream.tokenize = tokenBase;
              return "number";
            }
            ;
            if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?[ij]?/)) {
              return "number";
            }
            ;
            if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?[ij]?/)) {
              return "number";
            }
            ;
          }
          if (stream.match(wordRegexp(["nan", "NaN", "inf", "Inf"]))) {
            return "number";
          }
          ;
          var m = stream.match(/^"(?:[^"]|"")*("|$)/) || stream.match(/^'(?:[^']|'')*('|$)/);
          if (m) {
            return m[1] ? "string" : "string error";
          }
          if (stream.match(keywords)) {
            return "keyword";
          }
          ;
          if (stream.match(builtins)) {
            return "builtin";
          }
          ;
          if (stream.match(identifiers)) {
            return "variable";
          }
          ;
          if (stream.match(singleOperators) || stream.match(doubleOperators)) {
            return "operator";
          }
          ;
          if (stream.match(singleDelimiters) || stream.match(doubleDelimiters) || stream.match(tripleDelimiters)) {
            return null;
          }
          ;
          if (stream.match(expressionEnd)) {
            state.tokenize = tokenTranspose;
            return null;
          }
          ;
          stream.next();
          return "error";
        }
        ;
        return {
          startState: function() {
            return {
              tokenize: tokenBase
            };
          },
          token: function(stream, state) {
            var style = state.tokenize(stream, state);
            if (style === "number" || style === "variable") {
              state.tokenize = tokenTranspose;
            }
            return style;
          },
          lineComment: "%",
          fold: "indent"
        };
      });
      CodeMirror2.defineMIME("text/x-octave", "octave");
    });
  }
});

// mode/oz/oz.js
var require_oz = __commonJS({
  "mode/oz/oz.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("oz", function(conf) {
        function wordRegexp(words) {
          return new RegExp("^((" + words.join(")|(") + "))\\b");
        }
        var singleOperators = /[\^@!\|<>#~\.\*\-\+\\/,=]/;
        var doubleOperators = /(<-)|(:=)|(=<)|(>=)|(<=)|(<:)|(>:)|(=:)|(\\=)|(\\=:)|(!!)|(==)|(::)/;
        var tripleOperators = /(:::)|(\.\.\.)|(=<:)|(>=:)/;
        var middle = [
          "in",
          "then",
          "else",
          "of",
          "elseof",
          "elsecase",
          "elseif",
          "catch",
          "finally",
          "with",
          "require",
          "prepare",
          "import",
          "export",
          "define",
          "do"
        ];
        var end = ["end"];
        var atoms = wordRegexp(["true", "false", "nil", "unit"]);
        var commonKeywords = wordRegexp([
          "andthen",
          "at",
          "attr",
          "declare",
          "feat",
          "from",
          "lex",
          "mod",
          "div",
          "mode",
          "orelse",
          "parser",
          "prod",
          "prop",
          "scanner",
          "self",
          "syn",
          "token"
        ]);
        var openingKeywords = wordRegexp([
          "local",
          "proc",
          "fun",
          "case",
          "class",
          "if",
          "cond",
          "or",
          "dis",
          "choice",
          "not",
          "thread",
          "try",
          "raise",
          "lock",
          "for",
          "suchthat",
          "meth",
          "functor"
        ]);
        var middleKeywords = wordRegexp(middle);
        var endKeywords = wordRegexp(end);
        function tokenBase(stream, state) {
          if (stream.eatSpace()) {
            return null;
          }
          if (stream.match(/[{}]/)) {
            return "bracket";
          }
          if (stream.match(/(\[])/)) {
            return "keyword";
          }
          if (stream.match(tripleOperators) || stream.match(doubleOperators)) {
            return "operator";
          }
          if (stream.match(atoms)) {
            return "atom";
          }
          var matched = stream.match(openingKeywords);
          if (matched) {
            if (!state.doInCurrentLine)
              state.currentIndent++;
            else
              state.doInCurrentLine = false;
            if (matched[0] == "proc" || matched[0] == "fun")
              state.tokenize = tokenFunProc;
            else if (matched[0] == "class")
              state.tokenize = tokenClass;
            else if (matched[0] == "meth")
              state.tokenize = tokenMeth;
            return "keyword";
          }
          if (stream.match(middleKeywords) || stream.match(commonKeywords)) {
            return "keyword";
          }
          if (stream.match(endKeywords)) {
            state.currentIndent--;
            return "keyword";
          }
          var ch = stream.next();
          if (ch == '"' || ch == "'") {
            state.tokenize = tokenString(ch);
            return state.tokenize(stream, state);
          }
          if (/[~\d]/.test(ch)) {
            if (ch == "~") {
              if (!/^[0-9]/.test(stream.peek()))
                return null;
              else if (stream.next() == "0" && stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^[0-9]*(\.[0-9]+)?([eE][~+]?[0-9]+)?/))
                return "number";
            }
            if (ch == "0" && stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^[0-9]*(\.[0-9]+)?([eE][~+]?[0-9]+)?/))
              return "number";
            return null;
          }
          if (ch == "%") {
            stream.skipToEnd();
            return "comment";
          } else if (ch == "/") {
            if (stream.eat("*")) {
              state.tokenize = tokenComment;
              return tokenComment(stream, state);
            }
          }
          if (singleOperators.test(ch)) {
            return "operator";
          }
          stream.eatWhile(/\w/);
          return "variable";
        }
        function tokenClass(stream, state) {
          if (stream.eatSpace()) {
            return null;
          }
          stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)/);
          state.tokenize = tokenBase;
          return "variable-3";
        }
        function tokenMeth(stream, state) {
          if (stream.eatSpace()) {
            return null;
          }
          stream.match(/([a-zA-Z][A-Za-z0-9_]*)|(`.+`)/);
          state.tokenize = tokenBase;
          return "def";
        }
        function tokenFunProc(stream, state) {
          if (stream.eatSpace()) {
            return null;
          }
          if (!state.hasPassedFirstStage && stream.eat("{")) {
            state.hasPassedFirstStage = true;
            return "bracket";
          } else if (state.hasPassedFirstStage) {
            stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)|\$/);
            state.hasPassedFirstStage = false;
            state.tokenize = tokenBase;
            return "def";
          } else {
            state.tokenize = tokenBase;
            return null;
          }
        }
        function tokenComment(stream, state) {
          var maybeEnd = false, ch;
          while (ch = stream.next()) {
            if (ch == "/" && maybeEnd) {
              state.tokenize = tokenBase;
              break;
            }
            maybeEnd = ch == "*";
          }
          return "comment";
        }
        function tokenString(quote) {
          return function(stream, state) {
            var escaped = false, next, end2 = false;
            while ((next = stream.next()) != null) {
              if (next == quote && !escaped) {
                end2 = true;
                break;
              }
              escaped = !escaped && next == "\\";
            }
            if (end2 || !escaped)
              state.tokenize = tokenBase;
            return "string";
          };
        }
        function buildElectricInputRegEx() {
          var allClosings = middle.concat(end);
          return new RegExp("[\\[\\]]|(" + allClosings.join("|") + ")$");
        }
        return {
          startState: function() {
            return {
              tokenize: tokenBase,
              currentIndent: 0,
              doInCurrentLine: false,
              hasPassedFirstStage: false
            };
          },
          token: function(stream, state) {
            if (stream.sol())
              state.doInCurrentLine = 0;
            return state.tokenize(stream, state);
          },
          indent: function(state, textAfter) {
            var trueText = textAfter.replace(/^\s+|\s+$/g, "");
            if (trueText.match(endKeywords) || trueText.match(middleKeywords) || trueText.match(/(\[])/))
              return conf.indentUnit * (state.currentIndent - 1);
            if (state.currentIndent < 0)
              return 0;
            return state.currentIndent * conf.indentUnit;
          },
          fold: "indent",
          electricInput: buildElectricInputRegEx(),
          lineComment: "%",
          blockCommentStart: "/*",
          blockCommentEnd: "*/"
        };
      });
      CodeMirror2.defineMIME("text/x-oz", "oz");
    });
  }
});

// mode/pascal/pascal.js
var require_pascal = __commonJS({
  "mode/pascal/pascal.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("pascal", function() {
        function words(str) {
          var obj = {}, words2 = str.split(" ");
          for (var i = 0; i < words2.length; ++i)
            obj[words2[i]] = true;
          return obj;
        }
        var keywords = words(
          "absolute and array asm begin case const constructor destructor div do downto else end file for function goto if implementation in inherited inline interface label mod nil not object of operator or packed procedure program record reintroduce repeat self set shl shr string then to type unit until uses var while with xor as class dispinterface except exports finalization finally initialization inline is library on out packed property raise resourcestring threadvar try absolute abstract alias assembler bitpacked break cdecl continue cppdecl cvar default deprecated dynamic enumerator experimental export external far far16 forward generic helper implements index interrupt iocheck local message name near nodefault noreturn nostackframe oldfpccall otherwise overload override pascal platform private protected public published read register reintroduce result safecall saveregisters softfloat specialize static stdcall stored strict unaligned unimplemented varargs virtual write"
        );
        var atoms = { "null": true };
        var isOperatorChar = /[+\-*&%=<>!?|\/]/;
        function tokenBase(stream, state) {
          var ch = stream.next();
          if (ch == "#" && state.startOfLine) {
            stream.skipToEnd();
            return "meta";
          }
          if (ch == '"' || ch == "'") {
            state.tokenize = tokenString(ch);
            return state.tokenize(stream, state);
          }
          if (ch == "(" && stream.eat("*")) {
            state.tokenize = tokenComment;
            return tokenComment(stream, state);
          }
          if (ch == "{") {
            state.tokenize = tokenCommentBraces;
            return tokenCommentBraces(stream, state);
          }
          if (/[\[\]\(\),;\:\.]/.test(ch)) {
            return null;
          }
          if (/\d/.test(ch)) {
            stream.eatWhile(/[\w\.]/);
            return "number";
          }
          if (ch == "/") {
            if (stream.eat("/")) {
              stream.skipToEnd();
              return "comment";
            }
          }
          if (isOperatorChar.test(ch)) {
            stream.eatWhile(isOperatorChar);
            return "operator";
          }
          stream.eatWhile(/[\w\$_]/);
          var cur = stream.current();
          if (keywords.propertyIsEnumerable(cur))
            return "keyword";
          if (atoms.propertyIsEnumerable(cur))
            return "atom";
          return "variable";
        }
        function tokenString(quote) {
          return function(stream, state) {
            var escaped = false, next, end = false;
            while ((next = stream.next()) != null) {
              if (next == quote && !escaped) {
                end = true;
                break;
              }
              escaped = !escaped && next == "\\";
            }
            if (end || !escaped)
              state.tokenize = null;
            return "string";
          };
        }
        function tokenComment(stream, state) {
          var maybeEnd = false, ch;
          while (ch = stream.next()) {
            if (ch == ")" && maybeEnd) {
              state.tokenize = null;
              break;
            }
            maybeEnd = ch == "*";
          }
          return "comment";
        }
        function tokenCommentBraces(stream, state) {
          var ch;
          while (ch = stream.next()) {
            if (ch == "}") {
              state.tokenize = null;
              break;
            }
          }
          return "comment";
        }
        return {
          startState: function() {
            return { tokenize: null };
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            var style = (state.tokenize || tokenBase)(stream, state);
            if (style == "comment" || style == "meta")
              return style;
            return style;
          },
          electricChars: "{}"
        };
      });
      CodeMirror2.defineMIME("text/x-pascal", "pascal");
    });
  }
});

// mode/pegjs/pegjs.js
var require_pegjs = __commonJS({
  "mode/pegjs/pegjs.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror(), require_javascript());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror", "../javascript/javascript"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("pegjs", function(config) {
        var jsMode = CodeMirror2.getMode(config, "javascript");
        function identifier(stream) {
          return stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/);
        }
        return {
          startState: function() {
            return {
              inString: false,
              stringType: null,
              inComment: false,
              inCharacterClass: false,
              braced: 0,
              lhs: true,
              localState: null
            };
          },
          token: function(stream, state) {
            if (stream) {
              if (!state.inString && !state.inComment && (stream.peek() == '"' || stream.peek() == "'")) {
                state.stringType = stream.peek();
                stream.next();
                state.inString = true;
              }
            }
            if (!state.inString && !state.inComment && stream.match(/^\/\*/)) {
              state.inComment = true;
            }
            if (state.inString) {
              while (state.inString && !stream.eol()) {
                if (stream.peek() === state.stringType) {
                  stream.next();
                  state.inString = false;
                } else if (stream.peek() === "\\") {
                  stream.next();
                  stream.next();
                } else {
                  stream.match(/^.[^\\\"\']*/);
                }
              }
              return state.lhs ? "property string" : "string";
            } else if (state.inComment) {
              while (state.inComment && !stream.eol()) {
                if (stream.match(/\*\//)) {
                  state.inComment = false;
                } else {
                  stream.match(/^.[^\*]*/);
                }
              }
              return "comment";
            } else if (state.inCharacterClass) {
              while (state.inCharacterClass && !stream.eol()) {
                if (!(stream.match(/^[^\]\\]+/) || stream.match(/^\\./))) {
                  state.inCharacterClass = false;
                }
              }
            } else if (stream.peek() === "[") {
              stream.next();
              state.inCharacterClass = true;
              return "bracket";
            } else if (stream.match(/^\/\//)) {
              stream.skipToEnd();
              return "comment";
            } else if (state.braced || stream.peek() === "{") {
              if (state.localState === null) {
                state.localState = CodeMirror2.startState(jsMode);
              }
              var token = jsMode.token(stream, state.localState);
              var text = stream.current();
              if (!token) {
                for (var i = 0; i < text.length; i++) {
                  if (text[i] === "{") {
                    state.braced++;
                  } else if (text[i] === "}") {
                    state.braced--;
                  }
                }
                ;
              }
              return token;
            } else if (identifier(stream)) {
              if (stream.peek() === ":") {
                return "variable";
              }
              return "variable-2";
            } else if (["[", "]", "(", ")"].indexOf(stream.peek()) != -1) {
              stream.next();
              return "bracket";
            } else if (!stream.eatSpace()) {
              stream.next();
            }
            return null;
          }
        };
      }, "javascript");
    });
  }
});

// mode/perl/perl.js
var require_perl = __commonJS({
  "mode/perl/perl.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("perl", function() {
        var PERL = {
          //   null - magic touch
          //   1 - keyword
          //   2 - def
          //   3 - atom
          //   4 - operator
          //   5 - variable-2 (predefined)
          //   [x,y] - x=1,2,3; y=must be defined if x{...}
          //      PERL operators
          "->": 4,
          "++": 4,
          "--": 4,
          "**": 4,
          //   ! ~ \ and unary + and -
          "=~": 4,
          "!~": 4,
          "*": 4,
          "/": 4,
          "%": 4,
          "x": 4,
          "+": 4,
          "-": 4,
          ".": 4,
          "<<": 4,
          ">>": 4,
          //   named unary operators
          "<": 4,
          ">": 4,
          "<=": 4,
          ">=": 4,
          "lt": 4,
          "gt": 4,
          "le": 4,
          "ge": 4,
          "==": 4,
          "!=": 4,
          "<=>": 4,
          "eq": 4,
          "ne": 4,
          "cmp": 4,
          "~~": 4,
          "&": 4,
          "|": 4,
          "^": 4,
          "&&": 4,
          "||": 4,
          "//": 4,
          "..": 4,
          "...": 4,
          "?": 4,
          ":": 4,
          "=": 4,
          "+=": 4,
          "-=": 4,
          "*=": 4,
          //   etc. ???
          ",": 4,
          "=>": 4,
          "::": 4,
          //   list operators (rightward)
          "not": 4,
          "and": 4,
          "or": 4,
          "xor": 4,
          //      PERL predefined variables (I know, what this is a paranoid idea, but may be needed for people, who learn PERL, and for me as well, ...and may be for you?;)
          "BEGIN": [5, 1],
          "END": [5, 1],
          "PRINT": [5, 1],
          "PRINTF": [5, 1],
          "GETC": [5, 1],
          "READ": [5, 1],
          "READLINE": [5, 1],
          "DESTROY": [5, 1],
          "TIE": [5, 1],
          "TIEHANDLE": [5, 1],
          "UNTIE": [5, 1],
          "STDIN": 5,
          "STDIN_TOP": 5,
          "STDOUT": 5,
          "STDOUT_TOP": 5,
          "STDERR": 5,
          "STDERR_TOP": 5,
          "$ARG": 5,
          "$_": 5,
          "@ARG": 5,
          "@_": 5,
          "$LIST_SEPARATOR": 5,
          '$"': 5,
          "$PROCESS_ID": 5,
          "$PID": 5,
          "$$": 5,
          "$REAL_GROUP_ID": 5,
          "$GID": 5,
          "$(": 5,
          "$EFFECTIVE_GROUP_ID": 5,
          "$EGID": 5,
          "$)": 5,
          "$PROGRAM_NAME": 5,
          "$0": 5,
          "$SUBSCRIPT_SEPARATOR": 5,
          "$SUBSEP": 5,
          "$;": 5,
          "$REAL_USER_ID": 5,
          "$UID": 5,
          "$<": 5,
          "$EFFECTIVE_USER_ID": 5,
          "$EUID": 5,
          "$>": 5,
          "$a": 5,
          "$b": 5,
          "$COMPILING": 5,
          "$^C": 5,
          "$DEBUGGING": 5,
          "$^D": 5,
          "${^ENCODING}": 5,
          "$ENV": 5,
          "%ENV": 5,
          "$SYSTEM_FD_MAX": 5,
          "$^F": 5,
          "@F": 5,
          "${^GLOBAL_PHASE}": 5,
          "$^H": 5,
          "%^H": 5,
          "@INC": 5,
          "%INC": 5,
          "$INPLACE_EDIT": 5,
          "$^I": 5,
          "$^M": 5,
          "$OSNAME": 5,
          "$^O": 5,
          "${^OPEN}": 5,
          "$PERLDB": 5,
          "$^P": 5,
          "$SIG": 5,
          "%SIG": 5,
          "$BASETIME": 5,
          "$^T": 5,
          "${^TAINT}": 5,
          "${^UNICODE}": 5,
          "${^UTF8CACHE}": 5,
          "${^UTF8LOCALE}": 5,
          "$PERL_VERSION": 5,
          "$^V": 5,
          "${^WIN32_SLOPPY_STAT}": 5,
          "$EXECUTABLE_NAME": 5,
          "$^X": 5,
          "$1": 5,
          // - regexp $1, $2...
          "$MATCH": 5,
          "$&": 5,
          "${^MATCH}": 5,
          "$PREMATCH": 5,
          "$`": 5,
          "${^PREMATCH}": 5,
          "$POSTMATCH": 5,
          "$'": 5,
          "${^POSTMATCH}": 5,
          "$LAST_PAREN_MATCH": 5,
          "$+": 5,
          "$LAST_SUBMATCH_RESULT": 5,
          "$^N": 5,
          "@LAST_MATCH_END": 5,
          "@+": 5,
          "%LAST_PAREN_MATCH": 5,
          "%+": 5,
          "@LAST_MATCH_START": 5,
          "@-": 5,
          "%LAST_MATCH_START": 5,
          "%-": 5,
          "$LAST_REGEXP_CODE_RESULT": 5,
          "$^R": 5,
          "${^RE_DEBUG_FLAGS}": 5,
          "${^RE_TRIE_MAXBUF}": 5,
          "$ARGV": 5,
          "@ARGV": 5,
          "ARGV": 5,
          "ARGVOUT": 5,
          "$OUTPUT_FIELD_SEPARATOR": 5,
          "$OFS": 5,
          "$,": 5,
          "$INPUT_LINE_NUMBER": 5,
          "$NR": 5,
          "$.": 5,
          "$INPUT_RECORD_SEPARATOR": 5,
          "$RS": 5,
          "$/": 5,
          "$OUTPUT_RECORD_SEPARATOR": 5,
          "$ORS": 5,
          "$\\": 5,
          "$OUTPUT_AUTOFLUSH": 5,
          "$|": 5,
          "$ACCUMULATOR": 5,
          "$^A": 5,
          "$FORMAT_FORMFEED": 5,
          "$^L": 5,
          "$FORMAT_PAGE_NUMBER": 5,
          "$%": 5,
          "$FORMAT_LINES_LEFT": 5,
          "$-": 5,
          "$FORMAT_LINE_BREAK_CHARACTERS": 5,
          "$:": 5,
          "$FORMAT_LINES_PER_PAGE": 5,
          "$=": 5,
          "$FORMAT_TOP_NAME": 5,
          "$^": 5,
          "$FORMAT_NAME": 5,
          "$~": 5,
          "${^CHILD_ERROR_NATIVE}": 5,
          "$EXTENDED_OS_ERROR": 5,
          "$^E": 5,
          "$EXCEPTIONS_BEING_CAUGHT": 5,
          "$^S": 5,
          "$WARNING": 5,
          "$^W": 5,
          "${^WARNING_BITS}": 5,
          "$OS_ERROR": 5,
          "$ERRNO": 5,
          "$!": 5,
          "%OS_ERROR": 5,
          "%ERRNO": 5,
          "%!": 5,
          "$CHILD_ERROR": 5,
          "$?": 5,
          "$EVAL_ERROR": 5,
          "$@": 5,
          "$OFMT": 5,
          "$#": 5,
          "$*": 5,
          "$ARRAY_BASE": 5,
          "$[": 5,
          "$OLD_PERL_VERSION": 5,
          "$]": 5,
          //      PERL blocks
          "if": [1, 1],
          elsif: [1, 1],
          "else": [1, 1],
          "while": [1, 1],
          unless: [1, 1],
          "for": [1, 1],
          foreach: [1, 1],
          //      PERL functions
          "abs": 1,
          // - absolute value function
          accept: 1,
          // - accept an incoming socket connect
          alarm: 1,
          // - schedule a SIGALRM
          "atan2": 1,
          // - arctangent of Y/X in the range -PI to PI
          bind: 1,
          // - binds an address to a socket
          binmode: 1,
          // - prepare binary files for I/O
          bless: 1,
          // - create an object
          bootstrap: 1,
          //
          "break": 1,
          // - break out of a "given" block
          caller: 1,
          // - get context of the current subroutine call
          chdir: 1,
          // - change your current working directory
          chmod: 1,
          // - changes the permissions on a list of files
          chomp: 1,
          // - remove a trailing record separator from a string
          chop: 1,
          // - remove the last character from a string
          chown: 1,
          // - change the ownership on a list of files
          chr: 1,
          // - get character this number represents
          chroot: 1,
          // - make directory new root for path lookups
          close: 1,
          // - close file (or pipe or socket) handle
          closedir: 1,
          // - close directory handle
          connect: 1,
          // - connect to a remote socket
          "continue": [1, 1],
          // - optional trailing block in a while or foreach
          "cos": 1,
          // - cosine function
          crypt: 1,
          // - one-way passwd-style encryption
          dbmclose: 1,
          // - breaks binding on a tied dbm file
          dbmopen: 1,
          // - create binding on a tied dbm file
          "default": 1,
          //
          defined: 1,
          // - test whether a value, variable, or function is defined
          "delete": 1,
          // - deletes a value from a hash
          die: 1,
          // - raise an exception or bail out
          "do": 1,
          // - turn a BLOCK into a TERM
          dump: 1,
          // - create an immediate core dump
          each: 1,
          // - retrieve the next key/value pair from a hash
          endgrent: 1,
          // - be done using group file
          endhostent: 1,
          // - be done using hosts file
          endnetent: 1,
          // - be done using networks file
          endprotoent: 1,
          // - be done using protocols file
          endpwent: 1,
          // - be done using passwd file
          endservent: 1,
          // - be done using services file
          eof: 1,
          // - test a filehandle for its end
          "eval": 1,
          // - catch exceptions or compile and run code
          "exec": 1,
          // - abandon this program to run another
          exists: 1,
          // - test whether a hash key is present
          exit: 1,
          // - terminate this program
          "exp": 1,
          // - raise I to a power
          fcntl: 1,
          // - file control system call
          fileno: 1,
          // - return file descriptor from filehandle
          flock: 1,
          // - lock an entire file with an advisory lock
          fork: 1,
          // - create a new process just like this one
          format: 1,
          // - declare a picture format with use by the write() function
          formline: 1,
          // - internal function used for formats
          getc: 1,
          // - get the next character from the filehandle
          getgrent: 1,
          // - get next group record
          getgrgid: 1,
          // - get group record given group user ID
          getgrnam: 1,
          // - get group record given group name
          gethostbyaddr: 1,
          // - get host record given its address
          gethostbyname: 1,
          // - get host record given name
          gethostent: 1,
          // - get next hosts record
          getlogin: 1,
          // - return who logged in at this tty
          getnetbyaddr: 1,
          // - get network record given its address
          getnetbyname: 1,
          // - get networks record given name
          getnetent: 1,
          // - get next networks record
          getpeername: 1,
          // - find the other end of a socket connection
          getpgrp: 1,
          // - get process group
          getppid: 1,
          // - get parent process ID
          getpriority: 1,
          // - get current nice value
          getprotobyname: 1,
          // - get protocol record given name
          getprotobynumber: 1,
          // - get protocol record numeric protocol
          getprotoent: 1,
          // - get next protocols record
          getpwent: 1,
          // - get next passwd record
          getpwnam: 1,
          // - get passwd record given user login name
          getpwuid: 1,
          // - get passwd record given user ID
          getservbyname: 1,
          // - get services record given its name
          getservbyport: 1,
          // - get services record given numeric port
          getservent: 1,
          // - get next services record
          getsockname: 1,
          // - retrieve the sockaddr for a given socket
          getsockopt: 1,
          // - get socket options on a given socket
          given: 1,
          //
          glob: 1,
          // - expand filenames using wildcards
          gmtime: 1,
          // - convert UNIX time into record or string using Greenwich time
          "goto": 1,
          // - create spaghetti code
          grep: 1,
          // - locate elements in a list test true against a given criterion
          hex: 1,
          // - convert a string to a hexadecimal number
          "import": 1,
          // - patch a module's namespace into your own
          index: 1,
          // - find a substring within a string
          "int": 1,
          // - get the integer portion of a number
          ioctl: 1,
          // - system-dependent device control system call
          "join": 1,
          // - join a list into a string using a separator
          keys: 1,
          // - retrieve list of indices from a hash
          kill: 1,
          // - send a signal to a process or process group
          last: 1,
          // - exit a block prematurely
          lc: 1,
          // - return lower-case version of a string
          lcfirst: 1,
          // - return a string with just the next letter in lower case
          length: 1,
          // - return the number of bytes in a string
          "link": 1,
          // - create a hard link in the filesytem
          listen: 1,
          // - register your socket as a server
          local: 2,
          // - create a temporary value for a global variable (dynamic scoping)
          localtime: 1,
          // - convert UNIX time into record or string using local time
          lock: 1,
          // - get a thread lock on a variable, subroutine, or method
          "log": 1,
          // - retrieve the natural logarithm for a number
          lstat: 1,
          // - stat a symbolic link
          m: null,
          // - match a string with a regular expression pattern
          map: 1,
          // - apply a change to a list to get back a new list with the changes
          mkdir: 1,
          // - create a directory
          msgctl: 1,
          // - SysV IPC message control operations
          msgget: 1,
          // - get SysV IPC message queue
          msgrcv: 1,
          // - receive a SysV IPC message from a message queue
          msgsnd: 1,
          // - send a SysV IPC message to a message queue
          my: 2,
          // - declare and assign a local variable (lexical scoping)
          "new": 1,
          //
          next: 1,
          // - iterate a block prematurely
          no: 1,
          // - unimport some module symbols or semantics at compile time
          oct: 1,
          // - convert a string to an octal number
          open: 1,
          // - open a file, pipe, or descriptor
          opendir: 1,
          // - open a directory
          ord: 1,
          // - find a character's numeric representation
          our: 2,
          // - declare and assign a package variable (lexical scoping)
          pack: 1,
          // - convert a list into a binary representation
          "package": 1,
          // - declare a separate global namespace
          pipe: 1,
          // - open a pair of connected filehandles
          pop: 1,
          // - remove the last element from an array and return it
          pos: 1,
          // - find or set the offset for the last/next m//g search
          print: 1,
          // - output a list to a filehandle
          printf: 1,
          // - output a formatted list to a filehandle
          prototype: 1,
          // - get the prototype (if any) of a subroutine
          push: 1,
          // - append one or more elements to an array
          q: null,
          // - singly quote a string
          qq: null,
          // - doubly quote a string
          qr: null,
          // - Compile pattern
          quotemeta: null,
          // - quote regular expression magic characters
          qw: null,
          // - quote a list of words
          qx: null,
          // - backquote quote a string
          rand: 1,
          // - retrieve the next pseudorandom number
          read: 1,
          // - fixed-length buffered input from a filehandle
          readdir: 1,
          // - get a directory from a directory handle
          readline: 1,
          // - fetch a record from a file
          readlink: 1,
          // - determine where a symbolic link is pointing
          readpipe: 1,
          // - execute a system command and collect standard output
          recv: 1,
          // - receive a message over a Socket
          redo: 1,
          // - start this loop iteration over again
          ref: 1,
          // - find out the type of thing being referenced
          rename: 1,
          // - change a filename
          require: 1,
          // - load in external functions from a library at runtime
          reset: 1,
          // - clear all variables of a given name
          "return": 1,
          // - get out of a function early
          reverse: 1,
          // - flip a string or a list
          rewinddir: 1,
          // - reset directory handle
          rindex: 1,
          // - right-to-left substring search
          rmdir: 1,
          // - remove a directory
          s: null,
          // - replace a pattern with a string
          say: 1,
          // - print with newline
          scalar: 1,
          // - force a scalar context
          seek: 1,
          // - reposition file pointer for random-access I/O
          seekdir: 1,
          // - reposition directory pointer
          select: 1,
          // - reset default output or do I/O multiplexing
          semctl: 1,
          // - SysV semaphore control operations
          semget: 1,
          // - get set of SysV semaphores
          semop: 1,
          // - SysV semaphore operations
          send: 1,
          // - send a message over a socket
          setgrent: 1,
          // - prepare group file for use
          sethostent: 1,
          // - prepare hosts file for use
          setnetent: 1,
          // - prepare networks file for use
          setpgrp: 1,
          // - set the process group of a process
          setpriority: 1,
          // - set a process's nice value
          setprotoent: 1,
          // - prepare protocols file for use
          setpwent: 1,
          // - prepare passwd file for use
          setservent: 1,
          // - prepare services file for use
          setsockopt: 1,
          // - set some socket options
          shift: 1,
          // - remove the first element of an array, and return it
          shmctl: 1,
          // - SysV shared memory operations
          shmget: 1,
          // - get SysV shared memory segment identifier
          shmread: 1,
          // - read SysV shared memory
          shmwrite: 1,
          // - write SysV shared memory
          shutdown: 1,
          // - close down just half of a socket connection
          "sin": 1,
          // - return the sine of a number
          sleep: 1,
          // - block for some number of seconds
          socket: 1,
          // - create a socket
          socketpair: 1,
          // - create a pair of sockets
          "sort": 1,
          // - sort a list of values
          splice: 1,
          // - add or remove elements anywhere in an array
          "split": 1,
          // - split up a string using a regexp delimiter
          sprintf: 1,
          // - formatted print into a string
          "sqrt": 1,
          // - square root function
          srand: 1,
          // - seed the random number generator
          stat: 1,
          // - get a file's status information
          state: 1,
          // - declare and assign a state variable (persistent lexical scoping)
          study: 1,
          // - optimize input data for repeated searches
          "sub": 1,
          // - declare a subroutine, possibly anonymously
          "substr": 1,
          // - get or alter a portion of a stirng
          symlink: 1,
          // - create a symbolic link to a file
          syscall: 1,
          // - execute an arbitrary system call
          sysopen: 1,
          // - open a file, pipe, or descriptor
          sysread: 1,
          // - fixed-length unbuffered input from a filehandle
          sysseek: 1,
          // - position I/O pointer on handle used with sysread and syswrite
          system: 1,
          // - run a separate program
          syswrite: 1,
          // - fixed-length unbuffered output to a filehandle
          tell: 1,
          // - get current seekpointer on a filehandle
          telldir: 1,
          // - get current seekpointer on a directory handle
          tie: 1,
          // - bind a variable to an object class
          tied: 1,
          // - get a reference to the object underlying a tied variable
          time: 1,
          // - return number of seconds since 1970
          times: 1,
          // - return elapsed time for self and child processes
          tr: null,
          // - transliterate a string
          truncate: 1,
          // - shorten a file
          uc: 1,
          // - return upper-case version of a string
          ucfirst: 1,
          // - return a string with just the next letter in upper case
          umask: 1,
          // - set file creation mode mask
          undef: 1,
          // - remove a variable or function definition
          unlink: 1,
          // - remove one link to a file
          unpack: 1,
          // - convert binary structure into normal perl variables
          unshift: 1,
          // - prepend more elements to the beginning of a list
          untie: 1,
          // - break a tie binding to a variable
          use: 1,
          // - load in a module at compile time
          utime: 1,
          // - set a file's last access and modify times
          values: 1,
          // - return a list of the values in a hash
          vec: 1,
          // - test or set particular bits in a string
          wait: 1,
          // - wait for any child process to die
          waitpid: 1,
          // - wait for a particular child process to die
          wantarray: 1,
          // - get void vs scalar vs list context of current subroutine call
          warn: 1,
          // - print debugging info
          when: 1,
          //
          write: 1,
          // - print a picture record
          y: null
        };
        var RXstyle = "string-2";
        var RXmodifiers = /[goseximacplud]/;
        function tokenChain(stream, state, chain, style, tail) {
          state.chain = null;
          state.style = null;
          state.tail = null;
          state.tokenize = function(stream2, state2) {
            var e = false, c, i = 0;
            while (c = stream2.next()) {
              if (c === chain[i] && !e) {
                if (chain[++i] !== void 0) {
                  state2.chain = chain[i];
                  state2.style = style;
                  state2.tail = tail;
                } else if (tail)
                  stream2.eatWhile(tail);
                state2.tokenize = tokenPerl;
                return style;
              }
              e = !e && c == "\\";
            }
            return style;
          };
          return state.tokenize(stream, state);
        }
        function tokenSOMETHING(stream, state, string) {
          state.tokenize = function(stream2, state2) {
            if (stream2.string == string)
              state2.tokenize = tokenPerl;
            stream2.skipToEnd();
            return "string";
          };
          return state.tokenize(stream, state);
        }
        function tokenPerl(stream, state) {
          if (stream.eatSpace())
            return null;
          if (state.chain)
            return tokenChain(stream, state, state.chain, state.style, state.tail);
          if (stream.match(/^\-?[\d\.]/, false)) {
            if (stream.match(/^(\-?(\d*\.\d+(e[+-]?\d+)?|\d+\.\d*)|0x[\da-fA-F]+|0b[01]+|\d+(e[+-]?\d+)?)/))
              return "number";
          }
          if (stream.match(/^<<(?=\w)/)) {
            stream.eatWhile(/\w/);
            return tokenSOMETHING(stream, state, stream.current().substr(2));
          }
          if (stream.sol() && stream.match(/^\=item(?!\w)/)) {
            return tokenSOMETHING(stream, state, "=cut");
          }
          var ch = stream.next();
          if (ch == '"' || ch == "'") {
            if (prefix(stream, 3) == "<<" + ch) {
              var p = stream.pos;
              stream.eatWhile(/\w/);
              var n = stream.current().substr(1);
              if (n && stream.eat(ch))
                return tokenSOMETHING(stream, state, n);
              stream.pos = p;
            }
            return tokenChain(stream, state, [ch], "string");
          }
          if (ch == "q") {
            var c = look(stream, -2);
            if (!(c && /\w/.test(c))) {
              c = look(stream, 0);
              if (c == "x") {
                c = look(stream, 1);
                if (c == "(") {
                  eatSuffix(stream, 2);
                  return tokenChain(stream, state, [")"], RXstyle, RXmodifiers);
                }
                if (c == "[") {
                  eatSuffix(stream, 2);
                  return tokenChain(stream, state, ["]"], RXstyle, RXmodifiers);
                }
                if (c == "{") {
                  eatSuffix(stream, 2);
                  return tokenChain(stream, state, ["}"], RXstyle, RXmodifiers);
                }
                if (c == "<") {
                  eatSuffix(stream, 2);
                  return tokenChain(stream, state, [">"], RXstyle, RXmodifiers);
                }
                if (/[\^'"!~\/]/.test(c)) {
                  eatSuffix(stream, 1);
                  return tokenChain(stream, state, [stream.eat(c)], RXstyle, RXmodifiers);
                }
              } else if (c == "q") {
                c = look(stream, 1);
                if (c == "(") {
                  eatSuffix(stream, 2);
                  return tokenChain(stream, state, [")"], "string");
                }
                if (c == "[") {
                  eatSuffix(stream, 2);
                  return tokenChain(stream, state, ["]"], "string");
                }
                if (c == "{") {
                  eatSuffix(stream, 2);
                  return tokenChain(stream, state, ["}"], "string");
                }
                if (c == "<") {
                  eatSuffix(stream, 2);
                  return tokenChain(stream, state, [">"], "string");
                }
                if (/[\^'"!~\/]/.test(c)) {
                  eatSuffix(stream, 1);
                  return tokenChain(stream, state, [stream.eat(c)], "string");
                }
              } else if (c == "w") {
                c = look(stream, 1);
                if (c == "(") {
                  eatSuffix(stream, 2);
                  return tokenChain(stream, state, [")"], "bracket");
                }
                if (c == "[") {
                  eatSuffix(stream, 2);
                  return tokenChain(stream, state, ["]"], "bracket");
                }
                if (c == "{") {
                  eatSuffix(stream, 2);
                  return tokenChain(stream, state, ["}"], "bracket");
                }
                if (c == "<") {
                  eatSuffix(stream, 2);
                  return tokenChain(stream, state, [">"], "bracket");
                }
                if (/[\^'"!~\/]/.test(c)) {
                  eatSuffix(stream, 1);
                  return tokenChain(stream, state, [stream.eat(c)], "bracket");
                }
              } else if (c == "r") {
                c = look(stream, 1);
                if (c == "(") {
                  eatSuffix(stream, 2);
                  return tokenChain(stream, state, [")"], RXstyle, RXmodifiers);
                }
                if (c == "[") {
                  eatSuffix(stream, 2);
                  return tokenChain(stream, state, ["]"], RXstyle, RXmodifiers);
                }
                if (c == "{") {
                  eatSuffix(stream, 2);
                  return tokenChain(stream, state, ["}"], RXstyle, RXmodifiers);
                }
                if (c == "<") {
                  eatSuffix(stream, 2);
                  return tokenChain(stream, state, [">"], RXstyle, RXmodifiers);
                }
                if (/[\^'"!~\/]/.test(c)) {
                  eatSuffix(stream, 1);
                  return tokenChain(stream, state, [stream.eat(c)], RXstyle, RXmodifiers);
                }
              } else if (/[\^'"!~\/(\[{<]/.test(c)) {
                if (c == "(") {
                  eatSuffix(stream, 1);
                  return tokenChain(stream, state, [")"], "string");
                }
                if (c == "[") {
                  eatSuffix(stream, 1);
                  return tokenChain(stream, state, ["]"], "string");
                }
                if (c == "{") {
                  eatSuffix(stream, 1);
                  return tokenChain(stream, state, ["}"], "string");
                }
                if (c == "<") {
                  eatSuffix(stream, 1);
                  return tokenChain(stream, state, [">"], "string");
                }
                if (/[\^'"!~\/]/.test(c)) {
                  return tokenChain(stream, state, [stream.eat(c)], "string");
                }
              }
            }
          }
          if (ch == "m") {
            var c = look(stream, -2);
            if (!(c && /\w/.test(c))) {
              c = stream.eat(/[(\[{<\^'"!~\/]/);
              if (c) {
                if (/[\^'"!~\/]/.test(c)) {
                  return tokenChain(stream, state, [c], RXstyle, RXmodifiers);
                }
                if (c == "(") {
                  return tokenChain(stream, state, [")"], RXstyle, RXmodifiers);
                }
                if (c == "[") {
                  return tokenChain(stream, state, ["]"], RXstyle, RXmodifiers);
                }
                if (c == "{") {
                  return tokenChain(stream, state, ["}"], RXstyle, RXmodifiers);
                }
                if (c == "<") {
                  return tokenChain(stream, state, [">"], RXstyle, RXmodifiers);
                }
              }
            }
          }
          if (ch == "s") {
            var c = /[\/>\]})\w]/.test(look(stream, -2));
            if (!c) {
              c = stream.eat(/[(\[{<\^'"!~\/]/);
              if (c) {
                if (c == "[")
                  return tokenChain(stream, state, ["]", "]"], RXstyle, RXmodifiers);
                if (c == "{")
                  return tokenChain(stream, state, ["}", "}"], RXstyle, RXmodifiers);
                if (c == "<")
                  return tokenChain(stream, state, [">", ">"], RXstyle, RXmodifiers);
                if (c == "(")
                  return tokenChain(stream, state, [")", ")"], RXstyle, RXmodifiers);
                return tokenChain(stream, state, [c, c], RXstyle, RXmodifiers);
              }
            }
          }
          if (ch == "y") {
            var c = /[\/>\]})\w]/.test(look(stream, -2));
            if (!c) {
              c = stream.eat(/[(\[{<\^'"!~\/]/);
              if (c) {
                if (c == "[")
                  return tokenChain(stream, state, ["]", "]"], RXstyle, RXmodifiers);
                if (c == "{")
                  return tokenChain(stream, state, ["}", "}"], RXstyle, RXmodifiers);
                if (c == "<")
                  return tokenChain(stream, state, [">", ">"], RXstyle, RXmodifiers);
                if (c == "(")
                  return tokenChain(stream, state, [")", ")"], RXstyle, RXmodifiers);
                return tokenChain(stream, state, [c, c], RXstyle, RXmodifiers);
              }
            }
          }
          if (ch == "t") {
            var c = /[\/>\]})\w]/.test(look(stream, -2));
            if (!c) {
              c = stream.eat("r");
              if (c) {
                c = stream.eat(/[(\[{<\^'"!~\/]/);
                if (c) {
                  if (c == "[")
                    return tokenChain(stream, state, ["]", "]"], RXstyle, RXmodifiers);
                  if (c == "{")
                    return tokenChain(stream, state, ["}", "}"], RXstyle, RXmodifiers);
                  if (c == "<")
                    return tokenChain(stream, state, [">", ">"], RXstyle, RXmodifiers);
                  if (c == "(")
                    return tokenChain(stream, state, [")", ")"], RXstyle, RXmodifiers);
                  return tokenChain(stream, state, [c, c], RXstyle, RXmodifiers);
                }
              }
            }
          }
          if (ch == "`") {
            return tokenChain(stream, state, [ch], "variable-2");
          }
          if (ch == "/") {
            if (!/~\s*$/.test(prefix(stream)))
              return "operator";
            else
              return tokenChain(stream, state, [ch], RXstyle, RXmodifiers);
          }
          if (ch == "$") {
            var p = stream.pos;
            if (stream.eatWhile(/\d/) || stream.eat("{") && stream.eatWhile(/\d/) && stream.eat("}"))
              return "variable-2";
            else
              stream.pos = p;
          }
          if (/[$@%]/.test(ch)) {
            var p = stream.pos;
            if (stream.eat("^") && stream.eat(/[A-Z]/) || !/[@$%&]/.test(look(stream, -2)) && stream.eat(/[=|\\\-#?@;:&`~\^!\[\]*'"$+.,\/<>()]/)) {
              var c = stream.current();
              if (PERL[c])
                return "variable-2";
            }
            stream.pos = p;
          }
          if (/[$@%&]/.test(ch)) {
            if (stream.eatWhile(/[\w$\[\]]/) || stream.eat("{") && stream.eatWhile(/[\w$\[\]]/) && stream.eat("}")) {
              var c = stream.current();
              if (PERL[c])
                return "variable-2";
              else
                return "variable";
            }
          }
          if (ch == "#") {
            if (look(stream, -2) != "$") {
              stream.skipToEnd();
              return "comment";
            }
          }
          if (/[:+\-\^*$&%@=<>!?|\/~\.]/.test(ch)) {
            var p = stream.pos;
            stream.eatWhile(/[:+\-\^*$&%@=<>!?|\/~\.]/);
            if (PERL[stream.current()])
              return "operator";
            else
              stream.pos = p;
          }
          if (ch == "_") {
            if (stream.pos == 1) {
              if (suffix(stream, 6) == "_END__") {
                return tokenChain(stream, state, ["\0"], "comment");
              } else if (suffix(stream, 7) == "_DATA__") {
                return tokenChain(stream, state, ["\0"], "variable-2");
              } else if (suffix(stream, 7) == "_C__") {
                return tokenChain(stream, state, ["\0"], "string");
              }
            }
          }
          if (/\w/.test(ch)) {
            var p = stream.pos;
            if (look(stream, -2) == "{" && (look(stream, 0) == "}" || stream.eatWhile(/\w/) && look(stream, 0) == "}"))
              return "string";
            else
              stream.pos = p;
          }
          if (/[A-Z]/.test(ch)) {
            var l = look(stream, -2);
            var p = stream.pos;
            stream.eatWhile(/[A-Z_]/);
            if (/[\da-z]/.test(look(stream, 0))) {
              stream.pos = p;
            } else {
              var c = PERL[stream.current()];
              if (!c)
                return "meta";
              if (c[1])
                c = c[0];
              if (l != ":") {
                if (c == 1)
                  return "keyword";
                else if (c == 2)
                  return "def";
                else if (c == 3)
                  return "atom";
                else if (c == 4)
                  return "operator";
                else if (c == 5)
                  return "variable-2";
                else
                  return "meta";
              } else
                return "meta";
            }
          }
          if (/[a-zA-Z_]/.test(ch)) {
            var l = look(stream, -2);
            stream.eatWhile(/\w/);
            var c = PERL[stream.current()];
            if (!c)
              return "meta";
            if (c[1])
              c = c[0];
            if (l != ":") {
              if (c == 1)
                return "keyword";
              else if (c == 2)
                return "def";
              else if (c == 3)
                return "atom";
              else if (c == 4)
                return "operator";
              else if (c == 5)
                return "variable-2";
              else
                return "meta";
            } else
              return "meta";
          }
          return null;
        }
        return {
          startState: function() {
            return {
              tokenize: tokenPerl,
              chain: null,
              style: null,
              tail: null
            };
          },
          token: function(stream, state) {
            return (state.tokenize || tokenPerl)(stream, state);
          },
          lineComment: "#"
        };
      });
      CodeMirror2.registerHelper("wordChars", "perl", /[\w$]/);
      CodeMirror2.defineMIME("text/x-perl", "perl");
      function look(stream, c) {
        return stream.string.charAt(stream.pos + (c || 0));
      }
      function prefix(stream, c) {
        if (c) {
          var x = stream.pos - c;
          return stream.string.substr(x >= 0 ? x : 0, c);
        } else {
          return stream.string.substr(0, stream.pos - 1);
        }
      }
      function suffix(stream, c) {
        var y = stream.string.length;
        var x = y - stream.pos + 1;
        return stream.string.substr(stream.pos, c && c < y ? c : x);
      }
      function eatSuffix(stream, c) {
        var x = stream.pos + c;
        var y;
        if (x <= 0)
          stream.pos = 0;
        else if (x >= (y = stream.string.length - 1))
          stream.pos = y;
        else
          stream.pos = x;
      }
    });
  }
});

// mode/php/php.js
var require_php = __commonJS({
  "mode/php/php.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror(), require_htmlmixed(), require_clike());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror", "../htmlmixed/htmlmixed", "../clike/clike"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      function keywords(str) {
        var obj = {}, words = str.split(" ");
        for (var i = 0; i < words.length; ++i)
          obj[words[i]] = true;
        return obj;
      }
      function matchSequence(list, end, escapes) {
        if (list.length == 0)
          return phpString(end);
        return function(stream, state) {
          var patterns = list[0];
          for (var i = 0; i < patterns.length; i++)
            if (stream.match(patterns[i][0])) {
              state.tokenize = matchSequence(list.slice(1), end);
              return patterns[i][1];
            }
          state.tokenize = phpString(end, escapes);
          return "string";
        };
      }
      function phpString(closing, escapes) {
        return function(stream, state) {
          return phpString_(stream, state, closing, escapes);
        };
      }
      function phpString_(stream, state, closing, escapes) {
        if (escapes !== false && stream.match("${", false) || stream.match("{$", false)) {
          state.tokenize = null;
          return "string";
        }
        if (escapes !== false && stream.match(/^\$[a-zA-Z_][a-zA-Z0-9_]*/)) {
          if (stream.match("[", false)) {
            state.tokenize = matchSequence([
              [["[", null]],
              [
                [/\d[\w\.]*/, "number"],
                [/\$[a-zA-Z_][a-zA-Z0-9_]*/, "variable-2"],
                [/[\w\$]+/, "variable"]
              ],
              [["]", null]]
            ], closing, escapes);
          }
          if (stream.match(/\-\>\w/, false)) {
            state.tokenize = matchSequence([
              [["->", null]],
              [[/[\w]+/, "variable"]]
            ], closing, escapes);
          }
          return "variable-2";
        }
        var escaped = false;
        while (!stream.eol() && (escaped || escapes === false || !stream.match("{$", false) && !stream.match(/^(\$[a-zA-Z_][a-zA-Z0-9_]*|\$\{)/, false))) {
          if (!escaped && stream.match(closing)) {
            state.tokenize = null;
            state.tokStack.pop();
            state.tokStack.pop();
            break;
          }
          escaped = stream.next() == "\\" && !escaped;
        }
        return "string";
      }
      var phpKeywords = "abstract and array as break case catch class clone const continue declare default do else elseif enddeclare endfor endforeach endif endswitch endwhile extends final for foreach function global goto if implements interface instanceof namespace new or private protected public static switch throw trait try use var while xor die echo empty exit eval include include_once isset list require require_once return print unset __halt_compiler self static parent yield insteadof finally";
      var phpAtoms = "true false null TRUE FALSE NULL __CLASS__ __DIR__ __FILE__ __LINE__ __METHOD__ __FUNCTION__ __NAMESPACE__ __TRAIT__";
      var phpBuiltin = "func_num_args func_get_arg func_get_args strlen strcmp strncmp strcasecmp strncasecmp each error_reporting define defined trigger_error user_error set_error_handler restore_error_handler get_declared_classes get_loaded_extensions extension_loaded get_extension_funcs debug_backtrace constant bin2hex hex2bin sleep usleep time mktime gmmktime strftime gmstrftime strtotime date gmdate getdate localtime checkdate flush wordwrap htmlspecialchars htmlentities html_entity_decode md5 md5_file crc32 getimagesize image_type_to_mime_type phpinfo phpversion phpcredits strnatcmp strnatcasecmp substr_count strspn strcspn strtok strtoupper strtolower strpos strrpos strrev hebrev hebrevc nl2br basename dirname pathinfo stripslashes stripcslashes strstr stristr strrchr str_shuffle str_word_count strcoll substr substr_replace quotemeta ucfirst ucwords strtr addslashes addcslashes rtrim str_replace str_repeat count_chars chunk_split trim ltrim strip_tags similar_text explode implode setlocale localeconv parse_str str_pad chop strchr sprintf printf vprintf vsprintf sscanf fscanf parse_url urlencode urldecode rawurlencode rawurldecode readlink linkinfo link unlink exec system escapeshellcmd escapeshellarg passthru shell_exec proc_open proc_close rand srand getrandmax mt_rand mt_srand mt_getrandmax base64_decode base64_encode abs ceil floor round is_finite is_nan is_infinite bindec hexdec octdec decbin decoct dechex base_convert number_format fmod ip2long long2ip getenv putenv getopt microtime gettimeofday getrusage uniqid quoted_printable_decode set_time_limit get_cfg_var magic_quotes_runtime set_magic_quotes_runtime get_magic_quotes_gpc get_magic_quotes_runtime import_request_variables error_log serialize unserialize memory_get_usage var_dump var_export debug_zval_dump print_r highlight_file show_source highlight_string ini_get ini_get_all ini_set ini_alter ini_restore get_include_path set_include_path restore_include_path setcookie header headers_sent connection_aborted connection_status ignore_user_abort parse_ini_file is_uploaded_file move_uploaded_file intval floatval doubleval strval gettype settype is_null is_resource is_bool is_long is_float is_int is_integer is_double is_real is_numeric is_string is_array is_object is_scalar ereg ereg_replace eregi eregi_replace split spliti join sql_regcase dl pclose popen readfile rewind rmdir umask fclose feof fgetc fgets fgetss fread fopen fpassthru ftruncate fstat fseek ftell fflush fwrite fputs mkdir rename copy tempnam tmpfile file file_get_contents file_put_contents stream_select stream_context_create stream_context_set_params stream_context_set_option stream_context_get_options stream_filter_prepend stream_filter_append fgetcsv flock get_meta_tags stream_set_write_buffer set_file_buffer set_socket_blocking stream_set_blocking socket_set_blocking stream_get_meta_data stream_register_wrapper stream_wrapper_register stream_set_timeout socket_set_timeout socket_get_status realpath fnmatch fsockopen pfsockopen pack unpack get_browser crypt opendir closedir chdir getcwd rewinddir readdir dir glob fileatime filectime filegroup fileinode filemtime fileowner fileperms filesize filetype file_exists is_writable is_writeable is_readable is_executable is_file is_dir is_link stat lstat chown touch clearstatcache mail ob_start ob_flush ob_clean ob_end_flush ob_end_clean ob_get_flush ob_get_clean ob_get_length ob_get_level ob_get_status ob_get_contents ob_implicit_flush ob_list_handlers ksort krsort natsort natcasesort asort arsort sort rsort usort uasort uksort shuffle array_walk count end prev next reset current key min max in_array array_search extract compact array_fill range array_multisort array_push array_pop array_shift array_unshift array_splice array_slice array_merge array_merge_recursive array_keys array_values array_count_values array_reverse array_reduce array_pad array_flip array_change_key_case array_rand array_unique array_intersect array_intersect_assoc array_diff array_diff_assoc array_sum array_filter array_map array_chunk array_key_exists array_intersect_key array_combine array_column pos sizeof key_exists assert assert_options version_compare ftok str_rot13 aggregate session_name session_module_name session_save_path session_id session_regenerate_id session_decode session_register session_unregister session_is_registered session_encode session_start session_destroy session_unset session_set_save_handler session_cache_limiter session_cache_expire session_set_cookie_params session_get_cookie_params session_write_close preg_match preg_match_all preg_replace preg_replace_callback preg_split preg_quote preg_grep overload ctype_alnum ctype_alpha ctype_cntrl ctype_digit ctype_lower ctype_graph ctype_print ctype_punct ctype_space ctype_upper ctype_xdigit virtual apache_request_headers apache_note apache_lookup_uri apache_child_terminate apache_setenv apache_response_headers apache_get_version getallheaders mysql_connect mysql_pconnect mysql_close mysql_select_db mysql_create_db mysql_drop_db mysql_query mysql_unbuffered_query mysql_db_query mysql_list_dbs mysql_list_tables mysql_list_fields mysql_list_processes mysql_error mysql_errno mysql_affected_rows mysql_insert_id mysql_result mysql_num_rows mysql_num_fields mysql_fetch_row mysql_fetch_array mysql_fetch_assoc mysql_fetch_object mysql_data_seek mysql_fetch_lengths mysql_fetch_field mysql_field_seek mysql_free_result mysql_field_name mysql_field_table mysql_field_len mysql_field_type mysql_field_flags mysql_escape_string mysql_real_escape_string mysql_stat mysql_thread_id mysql_client_encoding mysql_get_client_info mysql_get_host_info mysql_get_proto_info mysql_get_server_info mysql_info mysql mysql_fieldname mysql_fieldtable mysql_fieldlen mysql_fieldtype mysql_fieldflags mysql_selectdb mysql_createdb mysql_dropdb mysql_freeresult mysql_numfields mysql_numrows mysql_listdbs mysql_listtables mysql_listfields mysql_db_name mysql_dbname mysql_tablename mysql_table_name pg_connect pg_pconnect pg_close pg_connection_status pg_connection_busy pg_connection_reset pg_host pg_dbname pg_port pg_tty pg_options pg_ping pg_query pg_send_query pg_cancel_query pg_fetch_result pg_fetch_row pg_fetch_assoc pg_fetch_array pg_fetch_object pg_fetch_all pg_affected_rows pg_get_result pg_result_seek pg_result_status pg_free_result pg_last_oid pg_num_rows pg_num_fields pg_field_name pg_field_num pg_field_size pg_field_type pg_field_prtlen pg_field_is_null pg_get_notify pg_get_pid pg_result_error pg_last_error pg_last_notice pg_put_line pg_end_copy pg_copy_to pg_copy_from pg_trace pg_untrace pg_lo_create pg_lo_unlink pg_lo_open pg_lo_close pg_lo_read pg_lo_write pg_lo_read_all pg_lo_import pg_lo_export pg_lo_seek pg_lo_tell pg_escape_string pg_escape_bytea pg_unescape_bytea pg_client_encoding pg_set_client_encoding pg_meta_data pg_convert pg_insert pg_update pg_delete pg_select pg_exec pg_getlastoid pg_cmdtuples pg_errormessage pg_numrows pg_numfields pg_fieldname pg_fieldsize pg_fieldtype pg_fieldnum pg_fieldprtlen pg_fieldisnull pg_freeresult pg_result pg_loreadall pg_locreate pg_lounlink pg_loopen pg_loclose pg_loread pg_lowrite pg_loimport pg_loexport http_response_code get_declared_traits getimagesizefromstring socket_import_stream stream_set_chunk_size trait_exists header_register_callback class_uses session_status session_register_shutdown echo print global static exit array empty eval isset unset die include require include_once require_once json_decode json_encode json_last_error json_last_error_msg curl_close curl_copy_handle curl_errno curl_error curl_escape curl_exec curl_file_create curl_getinfo curl_init curl_multi_add_handle curl_multi_close curl_multi_exec curl_multi_getcontent curl_multi_info_read curl_multi_init curl_multi_remove_handle curl_multi_select curl_multi_setopt curl_multi_strerror curl_pause curl_reset curl_setopt_array curl_setopt curl_share_close curl_share_init curl_share_setopt curl_strerror curl_unescape curl_version mysqli_affected_rows mysqli_autocommit mysqli_change_user mysqli_character_set_name mysqli_close mysqli_commit mysqli_connect_errno mysqli_connect_error mysqli_connect mysqli_data_seek mysqli_debug mysqli_dump_debug_info mysqli_errno mysqli_error_list mysqli_error mysqli_fetch_all mysqli_fetch_array mysqli_fetch_assoc mysqli_fetch_field_direct mysqli_fetch_field mysqli_fetch_fields mysqli_fetch_lengths mysqli_fetch_object mysqli_fetch_row mysqli_field_count mysqli_field_seek mysqli_field_tell mysqli_free_result mysqli_get_charset mysqli_get_client_info mysqli_get_client_stats mysqli_get_client_version mysqli_get_connection_stats mysqli_get_host_info mysqli_get_proto_info mysqli_get_server_info mysqli_get_server_version mysqli_info mysqli_init mysqli_insert_id mysqli_kill mysqli_more_results mysqli_multi_query mysqli_next_result mysqli_num_fields mysqli_num_rows mysqli_options mysqli_ping mysqli_prepare mysqli_query mysqli_real_connect mysqli_real_escape_string mysqli_real_query mysqli_reap_async_query mysqli_refresh mysqli_rollback mysqli_select_db mysqli_set_charset mysqli_set_local_infile_default mysqli_set_local_infile_handler mysqli_sqlstate mysqli_ssl_set mysqli_stat mysqli_stmt_init mysqli_store_result mysqli_thread_id mysqli_thread_safe mysqli_use_result mysqli_warning_count";
      CodeMirror2.registerHelper("hintWords", "php", [phpKeywords, phpAtoms, phpBuiltin].join(" ").split(" "));
      CodeMirror2.registerHelper("wordChars", "php", /[\w$]/);
      var phpConfig = {
        name: "clike",
        helperType: "php",
        keywords: keywords(phpKeywords),
        blockKeywords: keywords("catch do else elseif for foreach if switch try while finally"),
        defKeywords: keywords("class function interface namespace trait"),
        atoms: keywords(phpAtoms),
        builtin: keywords(phpBuiltin),
        multiLineStrings: true,
        hooks: {
          "$": function(stream) {
            stream.eatWhile(/[\w\$_]/);
            return "variable-2";
          },
          "<": function(stream, state) {
            var before;
            if (before = stream.match(/<<\s*/)) {
              var quoted = stream.eat(/['"]/);
              stream.eatWhile(/[\w\.]/);
              var delim = stream.current().slice(before[0].length + (quoted ? 2 : 1));
              if (quoted)
                stream.eat(quoted);
              if (delim) {
                (state.tokStack || (state.tokStack = [])).push(delim, 0);
                state.tokenize = phpString(delim, quoted != "'");
                return "string";
              }
            }
            return false;
          },
          "#": function(stream) {
            while (!stream.eol() && !stream.match("?>", false))
              stream.next();
            return "comment";
          },
          "/": function(stream) {
            if (stream.eat("/")) {
              while (!stream.eol() && !stream.match("?>", false))
                stream.next();
              return "comment";
            }
            return false;
          },
          '"': function(_stream, state) {
            (state.tokStack || (state.tokStack = [])).push('"', 0);
            state.tokenize = phpString('"');
            return "string";
          },
          "{": function(_stream, state) {
            if (state.tokStack && state.tokStack.length)
              state.tokStack[state.tokStack.length - 1]++;
            return false;
          },
          "}": function(_stream, state) {
            if (state.tokStack && state.tokStack.length > 0 && !--state.tokStack[state.tokStack.length - 1]) {
              state.tokenize = phpString(state.tokStack[state.tokStack.length - 2]);
            }
            return false;
          }
        }
      };
      CodeMirror2.defineMode("php", function(config, parserConfig) {
        var htmlMode = CodeMirror2.getMode(config, parserConfig && parserConfig.htmlMode || "text/html");
        var phpMode = CodeMirror2.getMode(config, phpConfig);
        function dispatch(stream, state) {
          var isPHP = state.curMode == phpMode;
          if (stream.sol() && state.pending && state.pending != '"' && state.pending != "'")
            state.pending = null;
          if (!isPHP) {
            if (stream.match(/^<\?\w*/)) {
              state.curMode = phpMode;
              if (!state.php)
                state.php = CodeMirror2.startState(phpMode, htmlMode.indent(state.html, "", ""));
              state.curState = state.php;
              return "meta";
            }
            if (state.pending == '"' || state.pending == "'") {
              while (!stream.eol() && stream.next() != state.pending) {
              }
              var style = "string";
            } else if (state.pending && stream.pos < state.pending.end) {
              stream.pos = state.pending.end;
              var style = state.pending.style;
            } else {
              var style = htmlMode.token(stream, state.curState);
            }
            if (state.pending)
              state.pending = null;
            var cur = stream.current(), openPHP = cur.search(/<\?/), m;
            if (openPHP != -1) {
              if (style == "string" && (m = cur.match(/[\'\"]$/)) && !/\?>/.test(cur))
                state.pending = m[0];
              else
                state.pending = { end: stream.pos, style };
              stream.backUp(cur.length - openPHP);
            }
            return style;
          } else if (isPHP && state.php.tokenize == null && stream.match("?>")) {
            state.curMode = htmlMode;
            state.curState = state.html;
            if (!state.php.context.prev)
              state.php = null;
            return "meta";
          } else {
            return phpMode.token(stream, state.curState);
          }
        }
        return {
          startState: function() {
            var html = CodeMirror2.startState(htmlMode);
            var php = parserConfig.startOpen ? CodeMirror2.startState(phpMode) : null;
            return {
              html,
              php,
              curMode: parserConfig.startOpen ? phpMode : htmlMode,
              curState: parserConfig.startOpen ? php : html,
              pending: null
            };
          },
          copyState: function(state) {
            var html = state.html, htmlNew = CodeMirror2.copyState(htmlMode, html), php = state.php, phpNew = php && CodeMirror2.copyState(phpMode, php), cur;
            if (state.curMode == htmlMode)
              cur = htmlNew;
            else
              cur = phpNew;
            return {
              html: htmlNew,
              php: phpNew,
              curMode: state.curMode,
              curState: cur,
              pending: state.pending
            };
          },
          token: dispatch,
          indent: function(state, textAfter, line) {
            if (state.curMode != phpMode && /^\s*<\//.test(textAfter) || state.curMode == phpMode && /^\?>/.test(textAfter))
              return htmlMode.indent(state.html, textAfter, line);
            return state.curMode.indent(state.curState, textAfter, line);
          },
          blockCommentStart: "/*",
          blockCommentEnd: "*/",
          lineComment: "//",
          innerMode: function(state) {
            return { state: state.curState, mode: state.curMode };
          }
        };
      }, "htmlmixed", "clike");
      CodeMirror2.defineMIME("application/x-httpd-php", "php");
      CodeMirror2.defineMIME("application/x-httpd-php-open", { name: "php", startOpen: true });
      CodeMirror2.defineMIME("text/x-php", phpConfig);
    });
  }
});

// mode/pig/pig.js
var require_pig = __commonJS({
  "mode/pig/pig.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("pig", function(_config, parserConfig) {
        var keywords = parserConfig.keywords, builtins = parserConfig.builtins, types = parserConfig.types, multiLineStrings = parserConfig.multiLineStrings;
        var isOperatorChar = /[*+\-%<>=&?:\/!|]/;
        function chain(stream, state, f) {
          state.tokenize = f;
          return f(stream, state);
        }
        function tokenComment(stream, state) {
          var isEnd = false;
          var ch;
          while (ch = stream.next()) {
            if (ch == "/" && isEnd) {
              state.tokenize = tokenBase;
              break;
            }
            isEnd = ch == "*";
          }
          return "comment";
        }
        function tokenString(quote) {
          return function(stream, state) {
            var escaped = false, next, end = false;
            while ((next = stream.next()) != null) {
              if (next == quote && !escaped) {
                end = true;
                break;
              }
              escaped = !escaped && next == "\\";
            }
            if (end || !(escaped || multiLineStrings))
              state.tokenize = tokenBase;
            return "error";
          };
        }
        function tokenBase(stream, state) {
          var ch = stream.next();
          if (ch == '"' || ch == "'")
            return chain(stream, state, tokenString(ch));
          else if (/[\[\]{}\(\),;\.]/.test(ch))
            return null;
          else if (/\d/.test(ch)) {
            stream.eatWhile(/[\w\.]/);
            return "number";
          } else if (ch == "/") {
            if (stream.eat("*")) {
              return chain(stream, state, tokenComment);
            } else {
              stream.eatWhile(isOperatorChar);
              return "operator";
            }
          } else if (ch == "-") {
            if (stream.eat("-")) {
              stream.skipToEnd();
              return "comment";
            } else {
              stream.eatWhile(isOperatorChar);
              return "operator";
            }
          } else if (isOperatorChar.test(ch)) {
            stream.eatWhile(isOperatorChar);
            return "operator";
          } else {
            stream.eatWhile(/[\w\$_]/);
            if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {
              if (!stream.eat(")") && !stream.eat("."))
                return "keyword";
            }
            if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase()))
              return "variable-2";
            if (types && types.propertyIsEnumerable(stream.current().toUpperCase()))
              return "variable-3";
            return "variable";
          }
        }
        return {
          startState: function() {
            return {
              tokenize: tokenBase,
              startOfLine: true
            };
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            var style = state.tokenize(stream, state);
            return style;
          }
        };
      });
      (function() {
        function keywords(str) {
          var obj = {}, words = str.split(" ");
          for (var i = 0; i < words.length; ++i)
            obj[words[i]] = true;
          return obj;
        }
        var pBuiltins = "ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER ";
        var pKeywords = "VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE NEQ MATCHES TRUE FALSE DUMP";
        var pTypes = "BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP ";
        CodeMirror2.defineMIME("text/x-pig", {
          name: "pig",
          builtins: keywords(pBuiltins),
          keywords: keywords(pKeywords),
          types: keywords(pTypes)
        });
        CodeMirror2.registerHelper("hintWords", "pig", (pBuiltins + pTypes + pKeywords).split(" "));
      })();
    });
  }
});

// mode/powershell/powershell.js
var require_powershell = __commonJS({
  "mode/powershell/powershell.js"(exports, module2) {
    "use strict";
    (function(mod) {
      "use strict";
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(window.CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("powershell", function() {
        function buildRegexp(patterns, options) {
          options = options || {};
          var prefix = options.prefix !== void 0 ? options.prefix : "^";
          var suffix = options.suffix !== void 0 ? options.suffix : "\\b";
          for (var i = 0; i < patterns.length; i++) {
            if (patterns[i] instanceof RegExp) {
              patterns[i] = patterns[i].source;
            } else {
              patterns[i] = patterns[i].replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
            }
          }
          return new RegExp(prefix + "(" + patterns.join("|") + ")" + suffix, "i");
        }
        var notCharacterOrDash = "(?=[^A-Za-z\\d\\-_]|$)";
        var varNames = /[\w\-:]/;
        var keywords = buildRegexp([
          /begin|break|catch|continue|data|default|do|dynamicparam/,
          /else|elseif|end|exit|filter|finally|for|foreach|from|function|if|in/,
          /param|process|return|switch|throw|trap|try|until|where|while/
        ], { suffix: notCharacterOrDash });
        var punctuation = /[\[\]{},;`\\\.]|@[({]/;
        var wordOperators = buildRegexp([
          "f",
          /b?not/,
          /[ic]?split/,
          "join",
          /is(not)?/,
          "as",
          /[ic]?(eq|ne|[gl][te])/,
          /[ic]?(not)?(like|match|contains)/,
          /[ic]?replace/,
          /b?(and|or|xor)/
        ], { prefix: "-" });
        var symbolOperators = /[+\-*\/%]=|\+\+|--|\.\.|[+\-*&^%:=!|\/]|<(?!#)|(?!#)>/;
        var operators = buildRegexp([wordOperators, symbolOperators], { suffix: "" });
        var numbers = /^((0x[\da-f]+)|((\d+\.\d+|\d\.|\.\d+|\d+)(e[\+\-]?\d+)?))[ld]?([kmgtp]b)?/i;
        var identifiers = /^[A-Za-z\_][A-Za-z\-\_\d]*\b/;
        var symbolBuiltins = /[A-Z]:|%|\?/i;
        var namedBuiltins = buildRegexp([
          /Add-(Computer|Content|History|Member|PSSnapin|Type)/,
          /Checkpoint-Computer/,
          /Clear-(Content|EventLog|History|Host|Item(Property)?|Variable)/,
          /Compare-Object/,
          /Complete-Transaction/,
          /Connect-PSSession/,
          /ConvertFrom-(Csv|Json|SecureString|StringData)/,
          /Convert-Path/,
          /ConvertTo-(Csv|Html|Json|SecureString|Xml)/,
          /Copy-Item(Property)?/,
          /Debug-Process/,
          /Disable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/,
          /Disconnect-PSSession/,
          /Enable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/,
          /(Enter|Exit)-PSSession/,
          /Export-(Alias|Clixml|Console|Counter|Csv|FormatData|ModuleMember|PSSession)/,
          /ForEach-Object/,
          /Format-(Custom|List|Table|Wide)/,
          new RegExp("Get-(Acl|Alias|AuthenticodeSignature|ChildItem|Command|ComputerRestorePoint|Content|ControlPanelItem|Counter|Credential|Culture|Date|Event|EventLog|EventSubscriber|ExecutionPolicy|FormatData|Help|History|Host|HotFix|Item|ItemProperty|Job|Location|Member|Module|PfxCertificate|Process|PSBreakpoint|PSCallStack|PSDrive|PSProvider|PSSession|PSSessionConfiguration|PSSnapin|Random|Service|TraceSource|Transaction|TypeData|UICulture|Unique|Variable|Verb|WinEvent|WmiObject)"),
          /Group-Object/,
          /Import-(Alias|Clixml|Counter|Csv|LocalizedData|Module|PSSession)/,
          /ImportSystemModules/,
          /Invoke-(Command|Expression|History|Item|RestMethod|WebRequest|WmiMethod)/,
          /Join-Path/,
          /Limit-EventLog/,
          /Measure-(Command|Object)/,
          /Move-Item(Property)?/,
          new RegExp("New-(Alias|Event|EventLog|Item(Property)?|Module|ModuleManifest|Object|PSDrive|PSSession|PSSessionConfigurationFile|PSSessionOption|PSTransportOption|Service|TimeSpan|Variable|WebServiceProxy|WinEvent)"),
          /Out-(Default|File|GridView|Host|Null|Printer|String)/,
          /Pause/,
          /(Pop|Push)-Location/,
          /Read-Host/,
          /Receive-(Job|PSSession)/,
          /Register-(EngineEvent|ObjectEvent|PSSessionConfiguration|WmiEvent)/,
          /Remove-(Computer|Event|EventLog|Item(Property)?|Job|Module|PSBreakpoint|PSDrive|PSSession|PSSnapin|TypeData|Variable|WmiObject)/,
          /Rename-(Computer|Item(Property)?)/,
          /Reset-ComputerMachinePassword/,
          /Resolve-Path/,
          /Restart-(Computer|Service)/,
          /Restore-Computer/,
          /Resume-(Job|Service)/,
          /Save-Help/,
          /Select-(Object|String|Xml)/,
          /Send-MailMessage/,
          new RegExp("Set-(Acl|Alias|AuthenticodeSignature|Content|Date|ExecutionPolicy|Item(Property)?|Location|PSBreakpoint|PSDebug|PSSessionConfiguration|Service|StrictMode|TraceSource|Variable|WmiInstance)"),
          /Show-(Command|ControlPanelItem|EventLog)/,
          /Sort-Object/,
          /Split-Path/,
          /Start-(Job|Process|Service|Sleep|Transaction|Transcript)/,
          /Stop-(Computer|Job|Process|Service|Transcript)/,
          /Suspend-(Job|Service)/,
          /TabExpansion2/,
          /Tee-Object/,
          /Test-(ComputerSecureChannel|Connection|ModuleManifest|Path|PSSessionConfigurationFile)/,
          /Trace-Command/,
          /Unblock-File/,
          /Undo-Transaction/,
          /Unregister-(Event|PSSessionConfiguration)/,
          /Update-(FormatData|Help|List|TypeData)/,
          /Use-Transaction/,
          /Wait-(Event|Job|Process)/,
          /Where-Object/,
          /Write-(Debug|Error|EventLog|Host|Output|Progress|Verbose|Warning)/,
          /cd|help|mkdir|more|oss|prompt/,
          /ac|asnp|cat|cd|chdir|clc|clear|clhy|cli|clp|cls|clv|cnsn|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|dnsn|ebp/,
          /echo|epal|epcsv|epsn|erase|etsn|exsn|fc|fl|foreach|ft|fw|gal|gbp|gc|gci|gcm|gcs|gdr|ghy|gi|gjb|gl|gm|gmo|gp|gps/,
          /group|gsn|gsnp|gsv|gu|gv|gwmi|h|history|icm|iex|ihy|ii|ipal|ipcsv|ipmo|ipsn|irm|ise|iwmi|iwr|kill|lp|ls|man|md/,
          /measure|mi|mount|move|mp|mv|nal|ndr|ni|nmo|npssc|nsn|nv|ogv|oh|popd|ps|pushd|pwd|r|rbp|rcjb|rcsn|rd|rdr|ren|ri/,
          /rjb|rm|rmdir|rmo|rni|rnp|rp|rsn|rsnp|rujb|rv|rvpa|rwmi|sajb|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls/,
          /sort|sp|spjb|spps|spsv|start|sujb|sv|swmi|tee|trcm|type|where|wjb|write/
        ], { prefix: "", suffix: "" });
        var variableBuiltins = buildRegexp([
          /[$?^_]|Args|ConfirmPreference|ConsoleFileName|DebugPreference|Error|ErrorActionPreference|ErrorView|ExecutionContext/,
          /FormatEnumerationLimit|Home|Host|Input|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount/,
          /MaximumHistoryCount|MaximumVariableCount|MyInvocation|NestedPromptLevel|OutputEncoding|Pid|Profile|ProgressPreference/,
          /PSBoundParameters|PSCommandPath|PSCulture|PSDefaultParameterValues|PSEmailServer|PSHome|PSScriptRoot|PSSessionApplicationName/,
          /PSSessionConfigurationName|PSSessionOption|PSUICulture|PSVersionTable|Pwd|ShellId|StackTrace|VerbosePreference/,
          /WarningPreference|WhatIfPreference/,
          /Event|EventArgs|EventSubscriber|Sender/,
          /Matches|Ofs|ForEach|LastExitCode|PSCmdlet|PSItem|PSSenderInfo|This/,
          /true|false|null/
        ], { prefix: "\\$", suffix: "" });
        var builtins = buildRegexp([symbolBuiltins, namedBuiltins, variableBuiltins], { suffix: notCharacterOrDash });
        var grammar = {
          keyword: keywords,
          number: numbers,
          operator: operators,
          builtin: builtins,
          punctuation,
          identifier: identifiers
        };
        function tokenBase(stream, state) {
          var parent = state.returnStack[state.returnStack.length - 1];
          if (parent && parent.shouldReturnFrom(state)) {
            state.tokenize = parent.tokenize;
            state.returnStack.pop();
            return state.tokenize(stream, state);
          }
          if (stream.eatSpace()) {
            return null;
          }
          if (stream.eat("(")) {
            state.bracketNesting += 1;
            return "punctuation";
          }
          if (stream.eat(")")) {
            state.bracketNesting -= 1;
            return "punctuation";
          }
          for (var key in grammar) {
            if (stream.match(grammar[key])) {
              return key;
            }
          }
          var ch = stream.next();
          if (ch === "'") {
            return tokenSingleQuoteString(stream, state);
          }
          if (ch === "$") {
            return tokenVariable(stream, state);
          }
          if (ch === '"') {
            return tokenDoubleQuoteString(stream, state);
          }
          if (ch === "<" && stream.eat("#")) {
            state.tokenize = tokenComment;
            return tokenComment(stream, state);
          }
          if (ch === "#") {
            stream.skipToEnd();
            return "comment";
          }
          if (ch === "@") {
            var quoteMatch = stream.eat(/["']/);
            if (quoteMatch && stream.eol()) {
              state.tokenize = tokenMultiString;
              state.startQuote = quoteMatch[0];
              return tokenMultiString(stream, state);
            } else if (stream.eol()) {
              return "error";
            } else if (stream.peek().match(/[({]/)) {
              return "punctuation";
            } else if (stream.peek().match(varNames)) {
              return tokenVariable(stream, state);
            }
          }
          return "error";
        }
        function tokenSingleQuoteString(stream, state) {
          var ch;
          while ((ch = stream.peek()) != null) {
            stream.next();
            if (ch === "'" && !stream.eat("'")) {
              state.tokenize = tokenBase;
              return "string";
            }
          }
          return "error";
        }
        function tokenDoubleQuoteString(stream, state) {
          var ch;
          while ((ch = stream.peek()) != null) {
            if (ch === "$") {
              state.tokenize = tokenStringInterpolation;
              return "string";
            }
            stream.next();
            if (ch === "`") {
              stream.next();
              continue;
            }
            if (ch === '"' && !stream.eat('"')) {
              state.tokenize = tokenBase;
              return "string";
            }
          }
          return "error";
        }
        function tokenStringInterpolation(stream, state) {
          return tokenInterpolation(stream, state, tokenDoubleQuoteString);
        }
        function tokenMultiStringReturn(stream, state) {
          state.tokenize = tokenMultiString;
          state.startQuote = '"';
          return tokenMultiString(stream, state);
        }
        function tokenHereStringInterpolation(stream, state) {
          return tokenInterpolation(stream, state, tokenMultiStringReturn);
        }
        function tokenInterpolation(stream, state, parentTokenize) {
          if (stream.match("$(")) {
            var savedBracketNesting = state.bracketNesting;
            state.returnStack.push({
              /*jshint loopfunc:true */
              shouldReturnFrom: function(state2) {
                return state2.bracketNesting === savedBracketNesting;
              },
              tokenize: parentTokenize
            });
            state.tokenize = tokenBase;
            state.bracketNesting += 1;
            return "punctuation";
          } else {
            stream.next();
            state.returnStack.push({
              shouldReturnFrom: function() {
                return true;
              },
              tokenize: parentTokenize
            });
            state.tokenize = tokenVariable;
            return state.tokenize(stream, state);
          }
        }
        function tokenComment(stream, state) {
          var maybeEnd = false, ch;
          while ((ch = stream.next()) != null) {
            if (maybeEnd && ch == ">") {
              state.tokenize = tokenBase;
              break;
            }
            maybeEnd = ch === "#";
          }
          return "comment";
        }
        function tokenVariable(stream, state) {
          var ch = stream.peek();
          if (stream.eat("{")) {
            state.tokenize = tokenVariableWithBraces;
            return tokenVariableWithBraces(stream, state);
          } else if (ch != void 0 && ch.match(varNames)) {
            stream.eatWhile(varNames);
            state.tokenize = tokenBase;
            return "variable-2";
          } else {
            state.tokenize = tokenBase;
            return "error";
          }
        }
        function tokenVariableWithBraces(stream, state) {
          var ch;
          while ((ch = stream.next()) != null) {
            if (ch === "}") {
              state.tokenize = tokenBase;
              break;
            }
          }
          return "variable-2";
        }
        function tokenMultiString(stream, state) {
          var quote = state.startQuote;
          if (stream.sol() && stream.match(new RegExp(quote + "@"))) {
            state.tokenize = tokenBase;
          } else if (quote === '"') {
            while (!stream.eol()) {
              var ch = stream.peek();
              if (ch === "$") {
                state.tokenize = tokenHereStringInterpolation;
                return "string";
              }
              stream.next();
              if (ch === "`") {
                stream.next();
              }
            }
          } else {
            stream.skipToEnd();
          }
          return "string";
        }
        var external = {
          startState: function() {
            return {
              returnStack: [],
              bracketNesting: 0,
              tokenize: tokenBase
            };
          },
          token: function(stream, state) {
            return state.tokenize(stream, state);
          },
          blockCommentStart: "<#",
          blockCommentEnd: "#>",
          lineComment: "#",
          fold: "brace"
        };
        return external;
      });
      CodeMirror2.defineMIME("application/x-powershell", "powershell");
    });
  }
});

// mode/properties/properties.js
var require_properties = __commonJS({
  "mode/properties/properties.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("properties", function() {
        return {
          token: function(stream, state) {
            var sol = stream.sol() || state.afterSection;
            var eol = stream.eol();
            state.afterSection = false;
            if (sol) {
              if (state.nextMultiline) {
                state.inMultiline = true;
                state.nextMultiline = false;
              } else {
                state.position = "def";
              }
            }
            if (eol && !state.nextMultiline) {
              state.inMultiline = false;
              state.position = "def";
            }
            if (sol) {
              while (stream.eatSpace()) {
              }
            }
            var ch = stream.next();
            if (sol && (ch === "#" || ch === "!" || ch === ";")) {
              state.position = "comment";
              stream.skipToEnd();
              return "comment";
            } else if (sol && ch === "[") {
              state.afterSection = true;
              stream.skipTo("]");
              stream.eat("]");
              return "header";
            } else if (ch === "=" || ch === ":") {
              state.position = "quote";
              return null;
            } else if (ch === "\\" && state.position === "quote") {
              if (stream.eol()) {
                state.nextMultiline = true;
              }
            }
            return state.position;
          },
          startState: function() {
            return {
              position: "def",
              // Current position, "def", "quote" or "comment"
              nextMultiline: false,
              // Is the next line multiline value
              inMultiline: false,
              // Is the current line a multiline value
              afterSection: false
              // Did we just open a section
            };
          }
        };
      });
      CodeMirror2.defineMIME("text/x-properties", "properties");
      CodeMirror2.defineMIME("text/x-ini", "properties");
    });
  }
});

// mode/protobuf/protobuf.js
var require_protobuf = __commonJS({
  "mode/protobuf/protobuf.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      function wordRegexp(words) {
        return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
      }
      ;
      var keywordArray = [
        "package",
        "message",
        "import",
        "syntax",
        "required",
        "optional",
        "repeated",
        "reserved",
        "default",
        "extensions",
        "packed",
        "bool",
        "bytes",
        "double",
        "enum",
        "float",
        "string",
        "int32",
        "int64",
        "uint32",
        "uint64",
        "sint32",
        "sint64",
        "fixed32",
        "fixed64",
        "sfixed32",
        "sfixed64",
        "option",
        "service",
        "rpc",
        "returns"
      ];
      var keywords = wordRegexp(keywordArray);
      CodeMirror2.registerHelper("hintWords", "protobuf", keywordArray);
      var identifiers = new RegExp("^[_A-Za-z\xA1-\uFFFF][_A-Za-z0-9\xA1-\uFFFF]*");
      function tokenBase(stream) {
        if (stream.eatSpace())
          return null;
        if (stream.match("//")) {
          stream.skipToEnd();
          return "comment";
        }
        if (stream.match(/^[0-9\.+-]/, false)) {
          if (stream.match(/^[+-]?0x[0-9a-fA-F]+/))
            return "number";
          if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?/))
            return "number";
          if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?/))
            return "number";
        }
        if (stream.match(/^"([^"]|(""))*"/)) {
          return "string";
        }
        if (stream.match(/^'([^']|(''))*'/)) {
          return "string";
        }
        if (stream.match(keywords)) {
          return "keyword";
        }
        if (stream.match(identifiers)) {
          return "variable";
        }
        ;
        stream.next();
        return null;
      }
      ;
      CodeMirror2.defineMode("protobuf", function() {
        return {
          token: tokenBase,
          fold: "brace"
        };
      });
      CodeMirror2.defineMIME("text/x-protobuf", "protobuf");
    });
  }
});

// mode/pug/pug.js
var require_pug = __commonJS({
  "mode/pug/pug.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror(), require_javascript(), require_css(), require_htmlmixed());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror", "../javascript/javascript", "../css/css", "../htmlmixed/htmlmixed"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("pug", function(config) {
        var KEYWORD = "keyword";
        var DOCTYPE = "meta";
        var ID = "builtin";
        var CLASS = "qualifier";
        var ATTRS_NEST = {
          "{": "}",
          "(": ")",
          "[": "]"
        };
        var jsMode = CodeMirror2.getMode(config, "javascript");
        function State() {
          this.javaScriptLine = false;
          this.javaScriptLineExcludesColon = false;
          this.javaScriptArguments = false;
          this.javaScriptArgumentsDepth = 0;
          this.isInterpolating = false;
          this.interpolationNesting = 0;
          this.jsState = CodeMirror2.startState(jsMode);
          this.restOfLine = "";
          this.isIncludeFiltered = false;
          this.isEach = false;
          this.lastTag = "";
          this.scriptType = "";
          this.isAttrs = false;
          this.attrsNest = [];
          this.inAttributeName = true;
          this.attributeIsType = false;
          this.attrValue = "";
          this.indentOf = Infinity;
          this.indentToken = "";
          this.innerMode = null;
          this.innerState = null;
          this.innerModeForLine = false;
        }
        State.prototype.copy = function() {
          var res = new State();
          res.javaScriptLine = this.javaScriptLine;
          res.javaScriptLineExcludesColon = this.javaScriptLineExcludesColon;
          res.javaScriptArguments = this.javaScriptArguments;
          res.javaScriptArgumentsDepth = this.javaScriptArgumentsDepth;
          res.isInterpolating = this.isInterpolating;
          res.interpolationNesting = this.interpolationNesting;
          res.jsState = CodeMirror2.copyState(jsMode, this.jsState);
          res.innerMode = this.innerMode;
          if (this.innerMode && this.innerState) {
            res.innerState = CodeMirror2.copyState(this.innerMode, this.innerState);
          }
          res.restOfLine = this.restOfLine;
          res.isIncludeFiltered = this.isIncludeFiltered;
          res.isEach = this.isEach;
          res.lastTag = this.lastTag;
          res.scriptType = this.scriptType;
          res.isAttrs = this.isAttrs;
          res.attrsNest = this.attrsNest.slice();
          res.inAttributeName = this.inAttributeName;
          res.attributeIsType = this.attributeIsType;
          res.attrValue = this.attrValue;
          res.indentOf = this.indentOf;
          res.indentToken = this.indentToken;
          res.innerModeForLine = this.innerModeForLine;
          return res;
        };
        function javaScript(stream, state) {
          if (stream.sol()) {
            state.javaScriptLine = false;
            state.javaScriptLineExcludesColon = false;
          }
          if (state.javaScriptLine) {
            if (state.javaScriptLineExcludesColon && stream.peek() === ":") {
              state.javaScriptLine = false;
              state.javaScriptLineExcludesColon = false;
              return;
            }
            var tok = jsMode.token(stream, state.jsState);
            if (stream.eol())
              state.javaScriptLine = false;
            return tok || true;
          }
        }
        function javaScriptArguments(stream, state) {
          if (state.javaScriptArguments) {
            if (state.javaScriptArgumentsDepth === 0 && stream.peek() !== "(") {
              state.javaScriptArguments = false;
              return;
            }
            if (stream.peek() === "(") {
              state.javaScriptArgumentsDepth++;
            } else if (stream.peek() === ")") {
              state.javaScriptArgumentsDepth--;
            }
            if (state.javaScriptArgumentsDepth === 0) {
              state.javaScriptArguments = false;
              return;
            }
            var tok = jsMode.token(stream, state.jsState);
            return tok || true;
          }
        }
        function yieldStatement(stream) {
          if (stream.match(/^yield\b/)) {
            return "keyword";
          }
        }
        function doctype(stream) {
          if (stream.match(/^(?:doctype) *([^\n]+)?/)) {
            return DOCTYPE;
          }
        }
        function interpolation(stream, state) {
          if (stream.match("#{")) {
            state.isInterpolating = true;
            state.interpolationNesting = 0;
            return "punctuation";
          }
        }
        function interpolationContinued(stream, state) {
          if (state.isInterpolating) {
            if (stream.peek() === "}") {
              state.interpolationNesting--;
              if (state.interpolationNesting < 0) {
                stream.next();
                state.isInterpolating = false;
                return "punctuation";
              }
            } else if (stream.peek() === "{") {
              state.interpolationNesting++;
            }
            return jsMode.token(stream, state.jsState) || true;
          }
        }
        function caseStatement(stream, state) {
          if (stream.match(/^case\b/)) {
            state.javaScriptLine = true;
            return KEYWORD;
          }
        }
        function when(stream, state) {
          if (stream.match(/^when\b/)) {
            state.javaScriptLine = true;
            state.javaScriptLineExcludesColon = true;
            return KEYWORD;
          }
        }
        function defaultStatement(stream) {
          if (stream.match(/^default\b/)) {
            return KEYWORD;
          }
        }
        function extendsStatement(stream, state) {
          if (stream.match(/^extends?\b/)) {
            state.restOfLine = "string";
            return KEYWORD;
          }
        }
        function append(stream, state) {
          if (stream.match(/^append\b/)) {
            state.restOfLine = "variable";
            return KEYWORD;
          }
        }
        function prepend(stream, state) {
          if (stream.match(/^prepend\b/)) {
            state.restOfLine = "variable";
            return KEYWORD;
          }
        }
        function block(stream, state) {
          if (stream.match(/^block\b *(?:(prepend|append)\b)?/)) {
            state.restOfLine = "variable";
            return KEYWORD;
          }
        }
        function include(stream, state) {
          if (stream.match(/^include\b/)) {
            state.restOfLine = "string";
            return KEYWORD;
          }
        }
        function includeFiltered(stream, state) {
          if (stream.match(/^include:([a-zA-Z0-9\-]+)/, false) && stream.match("include")) {
            state.isIncludeFiltered = true;
            return KEYWORD;
          }
        }
        function includeFilteredContinued(stream, state) {
          if (state.isIncludeFiltered) {
            var tok = filter(stream, state);
            state.isIncludeFiltered = false;
            state.restOfLine = "string";
            return tok;
          }
        }
        function mixin(stream, state) {
          if (stream.match(/^mixin\b/)) {
            state.javaScriptLine = true;
            return KEYWORD;
          }
        }
        function call(stream, state) {
          if (stream.match(/^\+([-\w]+)/)) {
            if (!stream.match(/^\( *[-\w]+ *=/, false)) {
              state.javaScriptArguments = true;
              state.javaScriptArgumentsDepth = 0;
            }
            return "variable";
          }
          if (stream.match(/^\+#{/, false)) {
            stream.next();
            state.mixinCallAfter = true;
            return interpolation(stream, state);
          }
        }
        function callArguments(stream, state) {
          if (state.mixinCallAfter) {
            state.mixinCallAfter = false;
            if (!stream.match(/^\( *[-\w]+ *=/, false)) {
              state.javaScriptArguments = true;
              state.javaScriptArgumentsDepth = 0;
            }
            return true;
          }
        }
        function conditional(stream, state) {
          if (stream.match(/^(if|unless|else if|else)\b/)) {
            state.javaScriptLine = true;
            return KEYWORD;
          }
        }
        function each(stream, state) {
          if (stream.match(/^(- *)?(each|for)\b/)) {
            state.isEach = true;
            return KEYWORD;
          }
        }
        function eachContinued(stream, state) {
          if (state.isEach) {
            if (stream.match(/^ in\b/)) {
              state.javaScriptLine = true;
              state.isEach = false;
              return KEYWORD;
            } else if (stream.sol() || stream.eol()) {
              state.isEach = false;
            } else if (stream.next()) {
              while (!stream.match(/^ in\b/, false) && stream.next())
                ;
              return "variable";
            }
          }
        }
        function whileStatement(stream, state) {
          if (stream.match(/^while\b/)) {
            state.javaScriptLine = true;
            return KEYWORD;
          }
        }
        function tag(stream, state) {
          var captures;
          if (captures = stream.match(/^(\w(?:[-:\w]*\w)?)\/?/)) {
            state.lastTag = captures[1].toLowerCase();
            if (state.lastTag === "script") {
              state.scriptType = "application/javascript";
            }
            return "tag";
          }
        }
        function filter(stream, state) {
          if (stream.match(/^:([\w\-]+)/)) {
            var innerMode2;
            if (config && config.innerModes) {
              innerMode2 = config.innerModes(stream.current().substring(1));
            }
            if (!innerMode2) {
              innerMode2 = stream.current().substring(1);
            }
            if (typeof innerMode2 === "string") {
              innerMode2 = CodeMirror2.getMode(config, innerMode2);
            }
            setInnerMode(stream, state, innerMode2);
            return "atom";
          }
        }
        function code(stream, state) {
          if (stream.match(/^(!?=|-)/)) {
            state.javaScriptLine = true;
            return "punctuation";
          }
        }
        function id(stream) {
          if (stream.match(/^#([\w-]+)/)) {
            return ID;
          }
        }
        function className(stream) {
          if (stream.match(/^\.([\w-]+)/)) {
            return CLASS;
          }
        }
        function attrs(stream, state) {
          if (stream.peek() == "(") {
            stream.next();
            state.isAttrs = true;
            state.attrsNest = [];
            state.inAttributeName = true;
            state.attrValue = "";
            state.attributeIsType = false;
            return "punctuation";
          }
        }
        function attrsContinued(stream, state) {
          if (state.isAttrs) {
            if (ATTRS_NEST[stream.peek()]) {
              state.attrsNest.push(ATTRS_NEST[stream.peek()]);
            }
            if (state.attrsNest[state.attrsNest.length - 1] === stream.peek()) {
              state.attrsNest.pop();
            } else if (stream.eat(")")) {
              state.isAttrs = false;
              return "punctuation";
            }
            if (state.inAttributeName && stream.match(/^[^=,\)!]+/)) {
              if (stream.peek() === "=" || stream.peek() === "!") {
                state.inAttributeName = false;
                state.jsState = CodeMirror2.startState(jsMode);
                if (state.lastTag === "script" && stream.current().trim().toLowerCase() === "type") {
                  state.attributeIsType = true;
                } else {
                  state.attributeIsType = false;
                }
              }
              return "attribute";
            }
            var tok = jsMode.token(stream, state.jsState);
            if (state.attributeIsType && tok === "string") {
              state.scriptType = stream.current().toString();
            }
            if (state.attrsNest.length === 0 && (tok === "string" || tok === "variable" || tok === "keyword")) {
              try {
                Function("", "var x " + state.attrValue.replace(/,\s*$/, "").replace(/^!/, ""));
                state.inAttributeName = true;
                state.attrValue = "";
                stream.backUp(stream.current().length);
                return attrsContinued(stream, state);
              } catch (ex) {
              }
            }
            state.attrValue += stream.current();
            return tok || true;
          }
        }
        function attributesBlock(stream, state) {
          if (stream.match(/^&attributes\b/)) {
            state.javaScriptArguments = true;
            state.javaScriptArgumentsDepth = 0;
            return "keyword";
          }
        }
        function indent(stream) {
          if (stream.sol() && stream.eatSpace()) {
            return "indent";
          }
        }
        function comment(stream, state) {
          if (stream.match(/^ *\/\/(-)?([^\n]*)/)) {
            state.indentOf = stream.indentation();
            state.indentToken = "comment";
            return "comment";
          }
        }
        function colon(stream) {
          if (stream.match(/^: */)) {
            return "colon";
          }
        }
        function text(stream, state) {
          if (stream.match(/^(?:\| ?| )([^\n]+)/)) {
            return "string";
          }
          if (stream.match(/^(<[^\n]*)/, false)) {
            setInnerMode(stream, state, "htmlmixed");
            state.innerModeForLine = true;
            return innerMode(stream, state, true);
          }
        }
        function dot(stream, state) {
          if (stream.eat(".")) {
            var innerMode2 = null;
            if (state.lastTag === "script" && state.scriptType.toLowerCase().indexOf("javascript") != -1) {
              innerMode2 = state.scriptType.toLowerCase().replace(/"|'/g, "");
            } else if (state.lastTag === "style") {
              innerMode2 = "css";
            }
            setInnerMode(stream, state, innerMode2);
            return "dot";
          }
        }
        function fail(stream) {
          stream.next();
          return null;
        }
        function setInnerMode(stream, state, mode) {
          mode = CodeMirror2.mimeModes[mode] || mode;
          mode = config.innerModes ? config.innerModes(mode) || mode : mode;
          mode = CodeMirror2.mimeModes[mode] || mode;
          mode = CodeMirror2.getMode(config, mode);
          state.indentOf = stream.indentation();
          if (mode && mode.name !== "null") {
            state.innerMode = mode;
          } else {
            state.indentToken = "string";
          }
        }
        function innerMode(stream, state, force) {
          if (stream.indentation() > state.indentOf || state.innerModeForLine && !stream.sol() || force) {
            if (state.innerMode) {
              if (!state.innerState) {
                state.innerState = state.innerMode.startState ? CodeMirror2.startState(state.innerMode, stream.indentation()) : {};
              }
              return stream.hideFirstChars(state.indentOf + 2, function() {
                return state.innerMode.token(stream, state.innerState) || true;
              });
            } else {
              stream.skipToEnd();
              return state.indentToken;
            }
          } else if (stream.sol()) {
            state.indentOf = Infinity;
            state.indentToken = null;
            state.innerMode = null;
            state.innerState = null;
          }
        }
        function restOfLine(stream, state) {
          if (stream.sol()) {
            state.restOfLine = "";
          }
          if (state.restOfLine) {
            stream.skipToEnd();
            var tok = state.restOfLine;
            state.restOfLine = "";
            return tok;
          }
        }
        function startState() {
          return new State();
        }
        function copyState(state) {
          return state.copy();
        }
        function nextToken(stream, state) {
          var tok = innerMode(stream, state) || restOfLine(stream, state) || interpolationContinued(stream, state) || includeFilteredContinued(stream, state) || eachContinued(stream, state) || attrsContinued(stream, state) || javaScript(stream, state) || javaScriptArguments(stream, state) || callArguments(stream, state) || yieldStatement(stream) || doctype(stream) || interpolation(stream, state) || caseStatement(stream, state) || when(stream, state) || defaultStatement(stream) || extendsStatement(stream, state) || append(stream, state) || prepend(stream, state) || block(stream, state) || include(stream, state) || includeFiltered(stream, state) || mixin(stream, state) || call(stream, state) || conditional(stream, state) || each(stream, state) || whileStatement(stream, state) || tag(stream, state) || filter(stream, state) || code(stream, state) || id(stream) || className(stream) || attrs(stream, state) || attributesBlock(stream, state) || indent(stream) || text(stream, state) || comment(stream, state) || colon(stream) || dot(stream, state) || fail(stream);
          return tok === true ? null : tok;
        }
        return {
          startState,
          copyState,
          token: nextToken
        };
      }, "javascript", "css", "htmlmixed");
      CodeMirror2.defineMIME("text/x-pug", "pug");
      CodeMirror2.defineMIME("text/x-jade", "pug");
    });
  }
});

// mode/puppet/puppet.js
var require_puppet = __commonJS({
  "mode/puppet/puppet.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("puppet", function() {
        var words = {};
        var variable_regex = /({)?([a-z][a-z0-9_]*)?((::[a-z][a-z0-9_]*)*::)?[a-zA-Z0-9_]+(})?/;
        function define2(style, string) {
          var split = string.split(" ");
          for (var i = 0; i < split.length; i++) {
            words[split[i]] = style;
          }
        }
        define2("keyword", "class define site node include import inherits");
        define2("keyword", "case if else in and elsif default or");
        define2("atom", "false true running present absent file directory undef");
        define2("builtin", "action augeas burst chain computer cron destination dport exec file filebucket group host icmp iniface interface jump k5login limit log_level log_prefix macauthorization mailalias maillist mcx mount nagios_command nagios_contact nagios_contactgroup nagios_host nagios_hostdependency nagios_hostescalation nagios_hostextinfo nagios_hostgroup nagios_service nagios_servicedependency nagios_serviceescalation nagios_serviceextinfo nagios_servicegroup nagios_timeperiod name notify outiface package proto reject resources router schedule scheduled_task selboolean selmodule service source sport ssh_authorized_key sshkey stage state table tidy todest toports tosource user vlan yumrepo zfs zone zpool");
        function tokenString(stream, state) {
          var current, prev, found_var = false;
          while (!stream.eol() && (current = stream.next()) != state.pending) {
            if (current === "$" && prev != "\\" && state.pending == '"') {
              found_var = true;
              break;
            }
            prev = current;
          }
          if (found_var) {
            stream.backUp(1);
          }
          if (current == state.pending) {
            state.continueString = false;
          } else {
            state.continueString = true;
          }
          return "string";
        }
        function tokenize(stream, state) {
          var word = stream.match(/[\w]+/, false);
          var attribute = stream.match(/(\s+)?\w+\s+=>.*/, false);
          var resource = stream.match(/(\s+)?[\w:_]+(\s+)?{/, false);
          var special_resource = stream.match(/(\s+)?[@]{1,2}[\w:_]+(\s+)?{/, false);
          var ch = stream.next();
          if (ch === "$") {
            if (stream.match(variable_regex)) {
              return state.continueString ? "variable-2" : "variable";
            }
            return "error";
          }
          if (state.continueString) {
            stream.backUp(1);
            return tokenString(stream, state);
          }
          if (state.inDefinition) {
            if (stream.match(/(\s+)?[\w:_]+(\s+)?/)) {
              return "def";
            }
            stream.match(/\s+{/);
            state.inDefinition = false;
          }
          if (state.inInclude) {
            stream.match(/(\s+)?\S+(\s+)?/);
            state.inInclude = false;
            return "def";
          }
          if (stream.match(/(\s+)?\w+\(/)) {
            stream.backUp(1);
            return "def";
          }
          if (attribute) {
            stream.match(/(\s+)?\w+/);
            return "tag";
          }
          if (word && words.hasOwnProperty(word)) {
            stream.backUp(1);
            stream.match(/[\w]+/);
            if (stream.match(/\s+\S+\s+{/, false)) {
              state.inDefinition = true;
            }
            if (word == "include") {
              state.inInclude = true;
            }
            return words[word];
          }
          if (/(^|\s+)[A-Z][\w:_]+/.test(word)) {
            stream.backUp(1);
            stream.match(/(^|\s+)[A-Z][\w:_]+/);
            return "def";
          }
          if (resource) {
            stream.match(/(\s+)?[\w:_]+/);
            return "def";
          }
          if (special_resource) {
            stream.match(/(\s+)?[@]{1,2}/);
            return "special";
          }
          if (ch == "#") {
            stream.skipToEnd();
            return "comment";
          }
          if (ch == "'" || ch == '"') {
            state.pending = ch;
            return tokenString(stream, state);
          }
          if (ch == "{" || ch == "}") {
            return "bracket";
          }
          if (ch == "/") {
            stream.match(/.*?\//);
            return "variable-3";
          }
          if (ch.match(/[0-9]/)) {
            stream.eatWhile(/[0-9]+/);
            return "number";
          }
          if (ch == "=") {
            if (stream.peek() == ">") {
              stream.next();
            }
            return "operator";
          }
          stream.eatWhile(/[\w-]/);
          return null;
        }
        return {
          startState: function() {
            var state = {};
            state.inDefinition = false;
            state.inInclude = false;
            state.continueString = false;
            state.pending = false;
            return state;
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            return tokenize(stream, state);
          }
        };
      });
      CodeMirror2.defineMIME("text/x-puppet", "puppet");
    });
  }
});

// mode/python/python.js
var require_python = __commonJS({
  "mode/python/python.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      function wordRegexp(words2) {
        return new RegExp("^((" + words2.join(")|(") + "))\\b");
      }
      var wordOperators = wordRegexp(["and", "or", "not", "is"]);
      var commonKeywords = [
        "as",
        "assert",
        "break",
        "class",
        "continue",
        "def",
        "del",
        "elif",
        "else",
        "except",
        "finally",
        "for",
        "from",
        "global",
        "if",
        "import",
        "lambda",
        "pass",
        "raise",
        "return",
        "try",
        "while",
        "with",
        "yield",
        "in"
      ];
      var commonBuiltins = [
        "abs",
        "all",
        "any",
        "bin",
        "bool",
        "bytearray",
        "callable",
        "chr",
        "classmethod",
        "compile",
        "complex",
        "delattr",
        "dict",
        "dir",
        "divmod",
        "enumerate",
        "eval",
        "filter",
        "float",
        "format",
        "frozenset",
        "getattr",
        "globals",
        "hasattr",
        "hash",
        "help",
        "hex",
        "id",
        "input",
        "int",
        "isinstance",
        "issubclass",
        "iter",
        "len",
        "list",
        "locals",
        "map",
        "max",
        "memoryview",
        "min",
        "next",
        "object",
        "oct",
        "open",
        "ord",
        "pow",
        "property",
        "range",
        "repr",
        "reversed",
        "round",
        "set",
        "setattr",
        "slice",
        "sorted",
        "staticmethod",
        "str",
        "sum",
        "super",
        "tuple",
        "type",
        "vars",
        "zip",
        "__import__",
        "NotImplemented",
        "Ellipsis",
        "__debug__"
      ];
      CodeMirror2.registerHelper("hintWords", "python", commonKeywords.concat(commonBuiltins));
      function top(state) {
        return state.scopes[state.scopes.length - 1];
      }
      CodeMirror2.defineMode("python", function(conf, parserConf) {
        var ERRORCLASS = "error";
        var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\(\)\[\]\{\}@,:`=;\.\\]/;
        var operators = [
          parserConf.singleOperators,
          parserConf.doubleOperators,
          parserConf.doubleDelimiters,
          parserConf.tripleDelimiters,
          parserConf.operators || /^([-+*/%\/&|^]=?|[<>=]+|\/\/=?|\*\*=?|!=|[~!@]|\.\.\.)/
        ];
        for (var i = 0; i < operators.length; i++)
          if (!operators[i])
            operators.splice(i--, 1);
        var hangingIndent = parserConf.hangingIndent || conf.indentUnit;
        var myKeywords = commonKeywords, myBuiltins = commonBuiltins;
        if (parserConf.extra_keywords != void 0)
          myKeywords = myKeywords.concat(parserConf.extra_keywords);
        if (parserConf.extra_builtins != void 0)
          myBuiltins = myBuiltins.concat(parserConf.extra_builtins);
        var py3 = !(parserConf.version && Number(parserConf.version) < 3);
        if (py3) {
          var identifiers = parserConf.identifiers || /^[_A-Za-z\u00A1-\uFFFF][_A-Za-z0-9\u00A1-\uFFFF]*/;
          myKeywords = myKeywords.concat(["nonlocal", "False", "True", "None", "async", "await"]);
          myBuiltins = myBuiltins.concat(["ascii", "bytes", "exec", "print"]);
          var stringPrefixes = new RegExp(`^(([rbuf]|(br)|(fr))?('{3}|"{3}|['"]))`, "i");
        } else {
          var identifiers = parserConf.identifiers || /^[_A-Za-z][_A-Za-z0-9]*/;
          myKeywords = myKeywords.concat(["exec", "print"]);
          myBuiltins = myBuiltins.concat([
            "apply",
            "basestring",
            "buffer",
            "cmp",
            "coerce",
            "execfile",
            "file",
            "intern",
            "long",
            "raw_input",
            "reduce",
            "reload",
            "unichr",
            "unicode",
            "xrange",
            "False",
            "True",
            "None"
          ]);
          var stringPrefixes = new RegExp(`^(([rubf]|(ur)|(br))?('{3}|"{3}|['"]))`, "i");
        }
        var keywords = wordRegexp(myKeywords);
        var builtins = wordRegexp(myBuiltins);
        function tokenBase(stream, state) {
          var sol = stream.sol() && state.lastToken != "\\";
          if (sol)
            state.indent = stream.indentation();
          if (sol && top(state).type == "py") {
            var scopeOffset = top(state).offset;
            if (stream.eatSpace()) {
              var lineOffset = stream.indentation();
              if (lineOffset > scopeOffset)
                pushPyScope(state);
              else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != "#")
                state.errorToken = true;
              return null;
            } else {
              var style = tokenBaseInner(stream, state);
              if (scopeOffset > 0 && dedent(stream, state))
                style += " " + ERRORCLASS;
              return style;
            }
          }
          return tokenBaseInner(stream, state);
        }
        function tokenBaseInner(stream, state, inFormat) {
          if (stream.eatSpace())
            return null;
          if (!inFormat && stream.match(/^#.*/))
            return "comment";
          if (stream.match(/^[0-9\.]/, false)) {
            var floatLiteral = false;
            if (stream.match(/^[\d_]*\.\d+(e[\+\-]?\d+)?/i)) {
              floatLiteral = true;
            }
            if (stream.match(/^[\d_]+\.\d*/)) {
              floatLiteral = true;
            }
            if (stream.match(/^\.\d+/)) {
              floatLiteral = true;
            }
            if (floatLiteral) {
              stream.eat(/J/i);
              return "number";
            }
            var intLiteral = false;
            if (stream.match(/^0x[0-9a-f_]+/i))
              intLiteral = true;
            if (stream.match(/^0b[01_]+/i))
              intLiteral = true;
            if (stream.match(/^0o[0-7_]+/i))
              intLiteral = true;
            if (stream.match(/^[1-9][\d_]*(e[\+\-]?[\d_]+)?/)) {
              stream.eat(/J/i);
              intLiteral = true;
            }
            if (stream.match(/^0(?![\dx])/i))
              intLiteral = true;
            if (intLiteral) {
              stream.eat(/L/i);
              return "number";
            }
          }
          if (stream.match(stringPrefixes)) {
            var isFmtString = stream.current().toLowerCase().indexOf("f") !== -1;
            if (!isFmtString) {
              state.tokenize = tokenStringFactory(stream.current(), state.tokenize);
              return state.tokenize(stream, state);
            } else {
              state.tokenize = formatStringFactory(stream.current(), state.tokenize);
              return state.tokenize(stream, state);
            }
          }
          for (var i2 = 0; i2 < operators.length; i2++)
            if (stream.match(operators[i2]))
              return "operator";
          if (stream.match(delimiters))
            return "punctuation";
          if (state.lastToken == "." && stream.match(identifiers))
            return "property";
          if (stream.match(keywords) || stream.match(wordOperators))
            return "keyword";
          if (stream.match(builtins))
            return "builtin";
          if (stream.match(/^(self|cls)\b/))
            return "variable-2";
          if (stream.match(identifiers)) {
            if (state.lastToken == "def" || state.lastToken == "class")
              return "def";
            return "variable";
          }
          stream.next();
          return inFormat ? null : ERRORCLASS;
        }
        function formatStringFactory(delimiter, tokenOuter) {
          while ("rubf".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)
            delimiter = delimiter.substr(1);
          var singleline = delimiter.length == 1;
          var OUTCLASS = "string";
          function tokenNestedExpr(depth) {
            return function(stream, state) {
              var inner = tokenBaseInner(stream, state, true);
              if (inner == "punctuation") {
                if (stream.current() == "{") {
                  state.tokenize = tokenNestedExpr(depth + 1);
                } else if (stream.current() == "}") {
                  if (depth > 1)
                    state.tokenize = tokenNestedExpr(depth - 1);
                  else
                    state.tokenize = tokenString;
                }
              }
              return inner;
            };
          }
          function tokenString(stream, state) {
            while (!stream.eol()) {
              stream.eatWhile(/[^'"\{\}\\]/);
              if (stream.eat("\\")) {
                stream.next();
                if (singleline && stream.eol())
                  return OUTCLASS;
              } else if (stream.match(delimiter)) {
                state.tokenize = tokenOuter;
                return OUTCLASS;
              } else if (stream.match("{{")) {
                return OUTCLASS;
              } else if (stream.match("{", false)) {
                state.tokenize = tokenNestedExpr(0);
                if (stream.current())
                  return OUTCLASS;
                else
                  return state.tokenize(stream, state);
              } else if (stream.match("}}")) {
                return OUTCLASS;
              } else if (stream.match("}")) {
                return ERRORCLASS;
              } else {
                stream.eat(/['"]/);
              }
            }
            if (singleline) {
              if (parserConf.singleLineStringErrors)
                return ERRORCLASS;
              else
                state.tokenize = tokenOuter;
            }
            return OUTCLASS;
          }
          tokenString.isString = true;
          return tokenString;
        }
        function tokenStringFactory(delimiter, tokenOuter) {
          while ("rubf".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)
            delimiter = delimiter.substr(1);
          var singleline = delimiter.length == 1;
          var OUTCLASS = "string";
          function tokenString(stream, state) {
            while (!stream.eol()) {
              stream.eatWhile(/[^'"\\]/);
              if (stream.eat("\\")) {
                stream.next();
                if (singleline && stream.eol())
                  return OUTCLASS;
              } else if (stream.match(delimiter)) {
                state.tokenize = tokenOuter;
                return OUTCLASS;
              } else {
                stream.eat(/['"]/);
              }
            }
            if (singleline) {
              if (parserConf.singleLineStringErrors)
                return ERRORCLASS;
              else
                state.tokenize = tokenOuter;
            }
            return OUTCLASS;
          }
          tokenString.isString = true;
          return tokenString;
        }
        function pushPyScope(state) {
          while (top(state).type != "py")
            state.scopes.pop();
          state.scopes.push({
            offset: top(state).offset + conf.indentUnit,
            type: "py",
            align: null
          });
        }
        function pushBracketScope(stream, state, type) {
          var align = stream.match(/^([\s\[\{\(]|#.*)*$/, false) ? null : stream.column() + 1;
          state.scopes.push({
            offset: state.indent + hangingIndent,
            type,
            align
          });
        }
        function dedent(stream, state) {
          var indented = stream.indentation();
          while (state.scopes.length > 1 && top(state).offset > indented) {
            if (top(state).type != "py")
              return true;
            state.scopes.pop();
          }
          return top(state).offset != indented;
        }
        function tokenLexer(stream, state) {
          if (stream.sol())
            state.beginningOfLine = true;
          var style = state.tokenize(stream, state);
          var current = stream.current();
          if (state.beginningOfLine && current == "@")
            return stream.match(identifiers, false) ? "meta" : py3 ? "operator" : ERRORCLASS;
          if (/\S/.test(current))
            state.beginningOfLine = false;
          if ((style == "variable" || style == "builtin") && state.lastToken == "meta")
            style = "meta";
          if (current == "pass" || current == "return")
            state.dedent += 1;
          if (current == "lambda")
            state.lambda = true;
          if (current == ":" && !state.lambda && top(state).type == "py")
            pushPyScope(state);
          if (current.length == 1 && !/string|comment/.test(style)) {
            var delimiter_index = "[({".indexOf(current);
            if (delimiter_index != -1)
              pushBracketScope(stream, state, "])}".slice(delimiter_index, delimiter_index + 1));
            delimiter_index = "])}".indexOf(current);
            if (delimiter_index != -1) {
              if (top(state).type == current)
                state.indent = state.scopes.pop().offset - hangingIndent;
              else
                return ERRORCLASS;
            }
          }
          if (state.dedent > 0 && stream.eol() && top(state).type == "py") {
            if (state.scopes.length > 1)
              state.scopes.pop();
            state.dedent -= 1;
          }
          return style;
        }
        var external = {
          startState: function(basecolumn) {
            return {
              tokenize: tokenBase,
              scopes: [{ offset: basecolumn || 0, type: "py", align: null }],
              indent: basecolumn || 0,
              lastToken: null,
              lambda: false,
              dedent: 0
            };
          },
          token: function(stream, state) {
            var addErr = state.errorToken;
            if (addErr)
              state.errorToken = false;
            var style = tokenLexer(stream, state);
            if (style && style != "comment")
              state.lastToken = style == "keyword" || style == "punctuation" ? stream.current() : style;
            if (style == "punctuation")
              style = null;
            if (stream.eol() && state.lambda)
              state.lambda = false;
            return addErr ? style + " " + ERRORCLASS : style;
          },
          indent: function(state, textAfter) {
            if (state.tokenize != tokenBase)
              return state.tokenize.isString ? CodeMirror2.Pass : 0;
            var scope = top(state), closing = scope.type == textAfter.charAt(0);
            if (scope.align != null)
              return scope.align - (closing ? 1 : 0);
            else
              return scope.offset - (closing ? hangingIndent : 0);
          },
          electricInput: /^\s*[\}\]\)]$/,
          closeBrackets: { triples: `'"` },
          lineComment: "#",
          fold: "indent"
        };
        return external;
      });
      CodeMirror2.defineMIME("text/x-python", "python");
      var words = function(str) {
        return str.split(" ");
      };
      CodeMirror2.defineMIME("text/x-cython", {
        name: "python",
        extra_keywords: words("by cdef cimport cpdef ctypedef enum except extern gil include nogil property public readonly struct union DEF IF ELIF ELSE")
      });
    });
  }
});

// mode/q/q.js
var require_q = __commonJS({
  "mode/q/q.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("q", function(config) {
        var indentUnit = config.indentUnit, curPunc, keywords = buildRE(["abs", "acos", "aj", "aj0", "all", "and", "any", "asc", "asin", "asof", "atan", "attr", "avg", "avgs", "bin", "by", "ceiling", "cols", "cor", "cos", "count", "cov", "cross", "csv", "cut", "delete", "deltas", "desc", "dev", "differ", "distinct", "div", "do", "each", "ej", "enlist", "eval", "except", "exec", "exit", "exp", "fby", "fills", "first", "fkeys", "flip", "floor", "from", "get", "getenv", "group", "gtime", "hclose", "hcount", "hdel", "hopen", "hsym", "iasc", "idesc", "if", "ij", "in", "insert", "inter", "inv", "key", "keys", "last", "like", "list", "lj", "load", "log", "lower", "lsq", "ltime", "ltrim", "mavg", "max", "maxs", "mcount", "md5", "mdev", "med", "meta", "min", "mins", "mmax", "mmin", "mmu", "mod", "msum", "neg", "next", "not", "null", "or", "over", "parse", "peach", "pj", "plist", "prd", "prds", "prev", "prior", "rand", "rank", "ratios", "raze", "read0", "read1", "reciprocal", "reverse", "rload", "rotate", "rsave", "rtrim", "save", "scan", "select", "set", "setenv", "show", "signum", "sin", "sqrt", "ss", "ssr", "string", "sublist", "sum", "sums", "sv", "system", "tables", "tan", "til", "trim", "txf", "type", "uj", "ungroup", "union", "update", "upper", "upsert", "value", "var", "view", "views", "vs", "wavg", "where", "where", "while", "within", "wj", "wj1", "wsum", "xasc", "xbar", "xcol", "xcols", "xdesc", "xexp", "xgroup", "xkey", "xlog", "xprev", "xrank"]), E = /[|/&^!+:\\\-*%$=~#;@><,?_\'\"\[\(\]\)\s{}]/;
        function buildRE(w) {
          return new RegExp("^(" + w.join("|") + ")$");
        }
        function tokenBase(stream, state) {
          var sol = stream.sol(), c = stream.next();
          curPunc = null;
          if (sol) {
            if (c == "/")
              return (state.tokenize = tokenLineComment)(stream, state);
            else if (c == "\\") {
              if (stream.eol() || /\s/.test(stream.peek()))
                return stream.skipToEnd(), /^\\\s*$/.test(stream.current()) ? (state.tokenize = tokenCommentToEOF)(stream) : state.tokenize = tokenBase, "comment";
              else
                return state.tokenize = tokenBase, "builtin";
            }
          }
          if (/\s/.test(c))
            return stream.peek() == "/" ? (stream.skipToEnd(), "comment") : "whitespace";
          if (c == '"')
            return (state.tokenize = tokenString)(stream, state);
          if (c == "`")
            return stream.eatWhile(/[A-Za-z\d_:\/.]/), "symbol";
          if ("." == c && /\d/.test(stream.peek()) || /\d/.test(c)) {
            var t = null;
            stream.backUp(1);
            if (stream.match(/^\d{4}\.\d{2}(m|\.\d{2}([DT](\d{2}(:\d{2}(:\d{2}(\.\d{1,9})?)?)?)?)?)/) || stream.match(/^\d+D(\d{2}(:\d{2}(:\d{2}(\.\d{1,9})?)?)?)/) || stream.match(/^\d{2}:\d{2}(:\d{2}(\.\d{1,9})?)?/) || stream.match(/^\d+[ptuv]{1}/))
              t = "temporal";
            else if (stream.match(/^0[NwW]{1}/) || stream.match(/^0x[\da-fA-F]*/) || stream.match(/^[01]+[b]{1}/) || stream.match(/^\d+[chijn]{1}/) || stream.match(/-?\d*(\.\d*)?(e[+\-]?\d+)?(e|f)?/))
              t = "number";
            return t && (!(c = stream.peek()) || E.test(c)) ? t : (stream.next(), "error");
          }
          if (/[A-Za-z]|\./.test(c))
            return stream.eatWhile(/[A-Za-z._\d]/), keywords.test(stream.current()) ? "keyword" : "variable";
          if (/[|/&^!+:\\\-*%$=~#;@><\.,?_\']/.test(c))
            return null;
          if (/[{}\(\[\]\)]/.test(c))
            return null;
          return "error";
        }
        function tokenLineComment(stream, state) {
          return stream.skipToEnd(), /\/\s*$/.test(stream.current()) ? (state.tokenize = tokenBlockComment)(stream, state) : state.tokenize = tokenBase, "comment";
        }
        function tokenBlockComment(stream, state) {
          var f = stream.sol() && stream.peek() == "\\";
          stream.skipToEnd();
          if (f && /^\\\s*$/.test(stream.current()))
            state.tokenize = tokenBase;
          return "comment";
        }
        function tokenCommentToEOF(stream) {
          return stream.skipToEnd(), "comment";
        }
        function tokenString(stream, state) {
          var escaped = false, next, end = false;
          while (next = stream.next()) {
            if (next == '"' && !escaped) {
              end = true;
              break;
            }
            escaped = !escaped && next == "\\";
          }
          if (end)
            state.tokenize = tokenBase;
          return "string";
        }
        function pushContext(state, type, col) {
          state.context = { prev: state.context, indent: state.indent, col, type };
        }
        function popContext(state) {
          state.indent = state.context.indent;
          state.context = state.context.prev;
        }
        return {
          startState: function() {
            return {
              tokenize: tokenBase,
              context: null,
              indent: 0,
              col: 0
            };
          },
          token: function(stream, state) {
            if (stream.sol()) {
              if (state.context && state.context.align == null)
                state.context.align = false;
              state.indent = stream.indentation();
            }
            var style = state.tokenize(stream, state);
            if (style != "comment" && state.context && state.context.align == null && state.context.type != "pattern") {
              state.context.align = true;
            }
            if (curPunc == "(")
              pushContext(state, ")", stream.column());
            else if (curPunc == "[")
              pushContext(state, "]", stream.column());
            else if (curPunc == "{")
              pushContext(state, "}", stream.column());
            else if (/[\]\}\)]/.test(curPunc)) {
              while (state.context && state.context.type == "pattern")
                popContext(state);
              if (state.context && curPunc == state.context.type)
                popContext(state);
            } else if (curPunc == "." && state.context && state.context.type == "pattern")
              popContext(state);
            else if (/atom|string|variable/.test(style) && state.context) {
              if (/[\}\]]/.test(state.context.type))
                pushContext(state, "pattern", stream.column());
              else if (state.context.type == "pattern" && !state.context.align) {
                state.context.align = true;
                state.context.col = stream.column();
              }
            }
            return style;
          },
          indent: function(state, textAfter) {
            var firstChar = textAfter && textAfter.charAt(0);
            var context = state.context;
            if (/[\]\}]/.test(firstChar))
              while (context && context.type == "pattern")
                context = context.prev;
            var closing = context && firstChar == context.type;
            if (!context)
              return 0;
            else if (context.type == "pattern")
              return context.col;
            else if (context.align)
              return context.col + (closing ? 0 : 1);
            else
              return context.indent + (closing ? 0 : indentUnit);
          }
        };
      });
      CodeMirror2.defineMIME("text/x-q", "q");
    });
  }
});

// mode/r/r.js
var require_r = __commonJS({
  "mode/r/r.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.registerHelper("wordChars", "r", /[\w.]/);
      CodeMirror2.defineMode("r", function(config) {
        function wordObj(words) {
          var res = {};
          for (var i = 0; i < words.length; ++i)
            res[words[i]] = true;
          return res;
        }
        var commonAtoms = ["NULL", "NA", "Inf", "NaN", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_", "TRUE", "FALSE"];
        var commonBuiltins = ["list", "quote", "bquote", "eval", "return", "call", "parse", "deparse"];
        var commonKeywords = ["if", "else", "repeat", "while", "function", "for", "in", "next", "break"];
        var commonBlockKeywords = ["if", "else", "repeat", "while", "function", "for"];
        CodeMirror2.registerHelper("hintWords", "r", commonAtoms.concat(commonBuiltins, commonKeywords));
        var atoms = wordObj(commonAtoms);
        var builtins = wordObj(commonBuiltins);
        var keywords = wordObj(commonKeywords);
        var blockkeywords = wordObj(commonBlockKeywords);
        var opChars = /[+\-*\/^<>=!&|~$:]/;
        var curPunc;
        function tokenBase(stream, state) {
          curPunc = null;
          var ch = stream.next();
          if (ch == "#") {
            stream.skipToEnd();
            return "comment";
          } else if (ch == "0" && stream.eat("x")) {
            stream.eatWhile(/[\da-f]/i);
            return "number";
          } else if (ch == "." && stream.eat(/\d/)) {
            stream.match(/\d*(?:e[+\-]?\d+)?/);
            return "number";
          } else if (/\d/.test(ch)) {
            stream.match(/\d*(?:\.\d+)?(?:e[+\-]\d+)?L?/);
            return "number";
          } else if (ch == "'" || ch == '"') {
            state.tokenize = tokenString(ch);
            return "string";
          } else if (ch == "`") {
            stream.match(/[^`]+`/);
            return "variable-3";
          } else if (ch == "." && stream.match(/.[.\d]+/)) {
            return "keyword";
          } else if (/[\w\.]/.test(ch) && ch != "_") {
            stream.eatWhile(/[\w\.]/);
            var word = stream.current();
            if (atoms.propertyIsEnumerable(word))
              return "atom";
            if (keywords.propertyIsEnumerable(word)) {
              if (blockkeywords.propertyIsEnumerable(word) && !stream.match(/\s*if(\s+|$)/, false))
                curPunc = "block";
              return "keyword";
            }
            if (builtins.propertyIsEnumerable(word))
              return "builtin";
            return "variable";
          } else if (ch == "%") {
            if (stream.skipTo("%"))
              stream.next();
            return "operator variable-2";
          } else if (ch == "<" && stream.eat("-") || ch == "<" && stream.match("<-") || ch == "-" && stream.match(/>>?/)) {
            return "operator arrow";
          } else if (ch == "=" && state.ctx.argList) {
            return "arg-is";
          } else if (opChars.test(ch)) {
            if (ch == "$")
              return "operator dollar";
            stream.eatWhile(opChars);
            return "operator";
          } else if (/[\(\){}\[\];]/.test(ch)) {
            curPunc = ch;
            if (ch == ";")
              return "semi";
            return null;
          } else {
            return null;
          }
        }
        function tokenString(quote) {
          return function(stream, state) {
            if (stream.eat("\\")) {
              var ch = stream.next();
              if (ch == "x")
                stream.match(/^[a-f0-9]{2}/i);
              else if ((ch == "u" || ch == "U") && stream.eat("{") && stream.skipTo("}"))
                stream.next();
              else if (ch == "u")
                stream.match(/^[a-f0-9]{4}/i);
              else if (ch == "U")
                stream.match(/^[a-f0-9]{8}/i);
              else if (/[0-7]/.test(ch))
                stream.match(/^[0-7]{1,2}/);
              return "string-2";
            } else {
              var next;
              while ((next = stream.next()) != null) {
                if (next == quote) {
                  state.tokenize = tokenBase;
                  break;
                }
                if (next == "\\") {
                  stream.backUp(1);
                  break;
                }
              }
              return "string";
            }
          };
        }
        var ALIGN_YES = 1, ALIGN_NO = 2, BRACELESS = 4;
        function push(state, type, stream) {
          state.ctx = {
            type,
            indent: state.indent,
            flags: 0,
            column: stream.column(),
            prev: state.ctx
          };
        }
        function setFlag(state, flag) {
          var ctx = state.ctx;
          state.ctx = {
            type: ctx.type,
            indent: ctx.indent,
            flags: ctx.flags | flag,
            column: ctx.column,
            prev: ctx.prev
          };
        }
        function pop(state) {
          state.indent = state.ctx.indent;
          state.ctx = state.ctx.prev;
        }
        return {
          startState: function() {
            return {
              tokenize: tokenBase,
              ctx: {
                type: "top",
                indent: -config.indentUnit,
                flags: ALIGN_NO
              },
              indent: 0,
              afterIdent: false
            };
          },
          token: function(stream, state) {
            if (stream.sol()) {
              if ((state.ctx.flags & 3) == 0)
                state.ctx.flags |= ALIGN_NO;
              if (state.ctx.flags & BRACELESS)
                pop(state);
              state.indent = stream.indentation();
            }
            if (stream.eatSpace())
              return null;
            var style = state.tokenize(stream, state);
            if (style != "comment" && (state.ctx.flags & ALIGN_NO) == 0)
              setFlag(state, ALIGN_YES);
            if ((curPunc == ";" || curPunc == "{" || curPunc == "}") && state.ctx.type == "block")
              pop(state);
            if (curPunc == "{")
              push(state, "}", stream);
            else if (curPunc == "(") {
              push(state, ")", stream);
              if (state.afterIdent)
                state.ctx.argList = true;
            } else if (curPunc == "[")
              push(state, "]", stream);
            else if (curPunc == "block")
              push(state, "block", stream);
            else if (curPunc == state.ctx.type)
              pop(state);
            else if (state.ctx.type == "block" && style != "comment")
              setFlag(state, BRACELESS);
            state.afterIdent = style == "variable" || style == "keyword";
            return style;
          },
          indent: function(state, textAfter) {
            if (state.tokenize != tokenBase)
              return 0;
            var firstChar = textAfter && textAfter.charAt(0), ctx = state.ctx, closing = firstChar == ctx.type;
            if (ctx.flags & BRACELESS)
              ctx = ctx.prev;
            if (ctx.type == "block")
              return ctx.indent + (firstChar == "{" ? 0 : config.indentUnit);
            else if (ctx.flags & ALIGN_YES)
              return ctx.column + (closing ? 0 : 1);
            else
              return ctx.indent + (closing ? 0 : config.indentUnit);
          },
          lineComment: "#"
        };
      });
      CodeMirror2.defineMIME("text/x-rsrc", "r");
    });
  }
});

// mode/rpm/rpm.js
var require_rpm = __commonJS({
  "mode/rpm/rpm.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("rpm-changes", function() {
        var headerSeperator = /^-+$/;
        var headerLine = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)  ?\d{1,2} \d{2}:\d{2}(:\d{2})? [A-Z]{3,4} \d{4} - /;
        var simpleEmail = /^[\w+.-]+@[\w.-]+/;
        return {
          token: function(stream) {
            if (stream.sol()) {
              if (stream.match(headerSeperator)) {
                return "tag";
              }
              if (stream.match(headerLine)) {
                return "tag";
              }
            }
            if (stream.match(simpleEmail)) {
              return "string";
            }
            stream.next();
            return null;
          }
        };
      });
      CodeMirror2.defineMIME("text/x-rpm-changes", "rpm-changes");
      CodeMirror2.defineMode("rpm-spec", function() {
        var arch = /^(i386|i586|i686|x86_64|ppc64le|ppc64|ppc|ia64|s390x|s390|sparc64|sparcv9|sparc|noarch|alphaev6|alpha|hppa|mipsel)/;
        var preamble = /^[a-zA-Z0-9()]+:/;
        var section = /^%(debug_package|package|description|prep|build|install|files|clean|changelog|preinstall|preun|postinstall|postun|pretrans|posttrans|pre|post|triggerin|triggerun|verifyscript|check|triggerpostun|triggerprein|trigger)/;
        var control_flow_complex = /^%(ifnarch|ifarch|if)/;
        var control_flow_simple = /^%(else|endif)/;
        var operators = /^(\!|\?|\<\=|\<|\>\=|\>|\=\=|\&\&|\|\|)/;
        return {
          startState: function() {
            return {
              controlFlow: false,
              macroParameters: false,
              section: false
            };
          },
          token: function(stream, state) {
            var ch = stream.peek();
            if (ch == "#") {
              stream.skipToEnd();
              return "comment";
            }
            if (stream.sol()) {
              if (stream.match(preamble)) {
                return "header";
              }
              if (stream.match(section)) {
                return "atom";
              }
            }
            if (stream.match(/^\$\w+/)) {
              return "def";
            }
            if (stream.match(/^\$\{\w+\}/)) {
              return "def";
            }
            if (stream.match(control_flow_simple)) {
              return "keyword";
            }
            if (stream.match(control_flow_complex)) {
              state.controlFlow = true;
              return "keyword";
            }
            if (state.controlFlow) {
              if (stream.match(operators)) {
                return "operator";
              }
              if (stream.match(/^(\d+)/)) {
                return "number";
              }
              if (stream.eol()) {
                state.controlFlow = false;
              }
            }
            if (stream.match(arch)) {
              if (stream.eol()) {
                state.controlFlow = false;
              }
              return "number";
            }
            if (stream.match(/^%[\w]+/)) {
              if (stream.match(/^\(/)) {
                state.macroParameters = true;
              }
              return "keyword";
            }
            if (state.macroParameters) {
              if (stream.match(/^\d+/)) {
                return "number";
              }
              if (stream.match(/^\)/)) {
                state.macroParameters = false;
                return "keyword";
              }
            }
            if (stream.match(/^%\{\??[\w \-\:\!]+\}/)) {
              if (stream.eol()) {
                state.controlFlow = false;
              }
              return "def";
            }
            stream.next();
            return null;
          }
        };
      });
      CodeMirror2.defineMIME("text/x-rpm-spec", "rpm-spec");
    });
  }
});

// mode/stex/stex.js
var require_stex = __commonJS({
  "mode/stex/stex.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("stex", function(_config, parserConfig) {
        "use strict";
        function pushCommand(state, command) {
          state.cmdState.push(command);
        }
        function peekCommand(state) {
          if (state.cmdState.length > 0) {
            return state.cmdState[state.cmdState.length - 1];
          } else {
            return null;
          }
        }
        function popCommand(state) {
          var plug = state.cmdState.pop();
          if (plug) {
            plug.closeBracket();
          }
        }
        function getMostPowerful(state) {
          var context = state.cmdState;
          for (var i = context.length - 1; i >= 0; i--) {
            var plug = context[i];
            if (plug.name == "DEFAULT") {
              continue;
            }
            return plug;
          }
          return { styleIdentifier: function() {
            return null;
          } };
        }
        function addPluginPattern(pluginName, cmdStyle, styles) {
          return function() {
            this.name = pluginName;
            this.bracketNo = 0;
            this.style = cmdStyle;
            this.styles = styles;
            this.argument = null;
            this.styleIdentifier = function() {
              return this.styles[this.bracketNo - 1] || null;
            };
            this.openBracket = function() {
              this.bracketNo++;
              return "bracket";
            };
            this.closeBracket = function() {
            };
          };
        }
        var plugins = {};
        plugins["importmodule"] = addPluginPattern("importmodule", "tag", ["string", "builtin"]);
        plugins["documentclass"] = addPluginPattern("documentclass", "tag", ["", "atom"]);
        plugins["usepackage"] = addPluginPattern("usepackage", "tag", ["atom"]);
        plugins["begin"] = addPluginPattern("begin", "tag", ["atom"]);
        plugins["end"] = addPluginPattern("end", "tag", ["atom"]);
        plugins["label"] = addPluginPattern("label", "tag", ["atom"]);
        plugins["ref"] = addPluginPattern("ref", "tag", ["atom"]);
        plugins["eqref"] = addPluginPattern("eqref", "tag", ["atom"]);
        plugins["cite"] = addPluginPattern("cite", "tag", ["atom"]);
        plugins["bibitem"] = addPluginPattern("bibitem", "tag", ["atom"]);
        plugins["Bibitem"] = addPluginPattern("Bibitem", "tag", ["atom"]);
        plugins["RBibitem"] = addPluginPattern("RBibitem", "tag", ["atom"]);
        plugins["DEFAULT"] = function() {
          this.name = "DEFAULT";
          this.style = "tag";
          this.styleIdentifier = this.openBracket = this.closeBracket = function() {
          };
        };
        function setState(state, f) {
          state.f = f;
        }
        function normal(source, state) {
          var plug;
          if (source.match(/^\\[a-zA-Z@]+/)) {
            var cmdName = source.current().slice(1);
            plug = plugins.hasOwnProperty(cmdName) ? plugins[cmdName] : plugins["DEFAULT"];
            plug = new plug();
            pushCommand(state, plug);
            setState(state, beginParams);
            return plug.style;
          }
          if (source.match(/^\\[$&%#{}_]/)) {
            return "tag";
          }
          if (source.match(/^\\[,;!\/\\]/)) {
            return "tag";
          }
          if (source.match("\\[")) {
            setState(state, function(source2, state2) {
              return inMathMode(source2, state2, "\\]");
            });
            return "keyword";
          }
          if (source.match("\\(")) {
            setState(state, function(source2, state2) {
              return inMathMode(source2, state2, "\\)");
            });
            return "keyword";
          }
          if (source.match("$$")) {
            setState(state, function(source2, state2) {
              return inMathMode(source2, state2, "$$");
            });
            return "keyword";
          }
          if (source.match("$")) {
            setState(state, function(source2, state2) {
              return inMathMode(source2, state2, "$");
            });
            return "keyword";
          }
          var ch = source.next();
          if (ch == "%") {
            source.skipToEnd();
            return "comment";
          } else if (ch == "}" || ch == "]") {
            plug = peekCommand(state);
            if (plug) {
              plug.closeBracket(ch);
              setState(state, beginParams);
            } else {
              return "error";
            }
            return "bracket";
          } else if (ch == "{" || ch == "[") {
            plug = plugins["DEFAULT"];
            plug = new plug();
            pushCommand(state, plug);
            return "bracket";
          } else if (/\d/.test(ch)) {
            source.eatWhile(/[\w.%]/);
            return "atom";
          } else {
            source.eatWhile(/[\w\-_]/);
            plug = getMostPowerful(state);
            if (plug.name == "begin") {
              plug.argument = source.current();
            }
            return plug.styleIdentifier();
          }
        }
        function inMathMode(source, state, endModeSeq) {
          if (source.eatSpace()) {
            return null;
          }
          if (endModeSeq && source.match(endModeSeq)) {
            setState(state, normal);
            return "keyword";
          }
          if (source.match(/^\\[a-zA-Z@]+/)) {
            return "tag";
          }
          if (source.match(/^[a-zA-Z]+/)) {
            return "variable-2";
          }
          if (source.match(/^\\[$&%#{}_]/)) {
            return "tag";
          }
          if (source.match(/^\\[,;!\/]/)) {
            return "tag";
          }
          if (source.match(/^[\^_&]/)) {
            return "tag";
          }
          if (source.match(/^[+\-<>|=,\/@!*:;'"`~#?]/)) {
            return null;
          }
          if (source.match(/^(\d+\.\d*|\d*\.\d+|\d+)/)) {
            return "number";
          }
          var ch = source.next();
          if (ch == "{" || ch == "}" || ch == "[" || ch == "]" || ch == "(" || ch == ")") {
            return "bracket";
          }
          if (ch == "%") {
            source.skipToEnd();
            return "comment";
          }
          return "error";
        }
        function beginParams(source, state) {
          var ch = source.peek(), lastPlug;
          if (ch == "{" || ch == "[") {
            lastPlug = peekCommand(state);
            lastPlug.openBracket(ch);
            source.eat(ch);
            setState(state, normal);
            return "bracket";
          }
          if (/[ \t\r]/.test(ch)) {
            source.eat(ch);
            return null;
          }
          setState(state, normal);
          popCommand(state);
          return normal(source, state);
        }
        return {
          startState: function() {
            var f = parserConfig.inMathMode ? function(source, state) {
              return inMathMode(source, state);
            } : normal;
            return {
              cmdState: [],
              f
            };
          },
          copyState: function(s) {
            return {
              cmdState: s.cmdState.slice(),
              f: s.f
            };
          },
          token: function(stream, state) {
            return state.f(stream, state);
          },
          blankLine: function(state) {
            state.f = normal;
            state.cmdState.length = 0;
          },
          lineComment: "%"
        };
      });
      CodeMirror2.defineMIME("text/x-stex", "stex");
      CodeMirror2.defineMIME("text/x-latex", "stex");
    });
  }
});

// mode/rst/rst.js
var require_rst = __commonJS({
  "mode/rst/rst.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror(), require_python(), require_stex(), require_overlay());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror", "../python/python", "../stex/stex", "../../addon/mode/overlay"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("rst", function(config, options) {
        var rx_strong = /^\*\*[^\*\s](?:[^\*]*[^\*\s])?\*\*/;
        var rx_emphasis = /^\*[^\*\s](?:[^\*]*[^\*\s])?\*/;
        var rx_literal = /^``[^`\s](?:[^`]*[^`\s])``/;
        var rx_number = /^(?:[\d]+(?:[\.,]\d+)*)/;
        var rx_positive = /^(?:\s\+[\d]+(?:[\.,]\d+)*)/;
        var rx_negative = /^(?:\s\-[\d]+(?:[\.,]\d+)*)/;
        var rx_uri_protocol = "[Hh][Tt][Tt][Pp][Ss]?://";
        var rx_uri_domain = "(?:[\\d\\w.-]+)\\.(?:\\w{2,6})";
        var rx_uri_path = "(?:/[\\d\\w\\#\\%\\&\\-\\.\\,\\/\\:\\=\\?\\~]+)*";
        var rx_uri = new RegExp("^" + rx_uri_protocol + rx_uri_domain + rx_uri_path);
        var overlay = {
          token: function(stream) {
            if (stream.match(rx_strong) && stream.match(/\W+|$/, false))
              return "strong";
            if (stream.match(rx_emphasis) && stream.match(/\W+|$/, false))
              return "em";
            if (stream.match(rx_literal) && stream.match(/\W+|$/, false))
              return "string-2";
            if (stream.match(rx_number))
              return "number";
            if (stream.match(rx_positive))
              return "positive";
            if (stream.match(rx_negative))
              return "negative";
            if (stream.match(rx_uri))
              return "link";
            while (stream.next() != null) {
              if (stream.match(rx_strong, false))
                break;
              if (stream.match(rx_emphasis, false))
                break;
              if (stream.match(rx_literal, false))
                break;
              if (stream.match(rx_number, false))
                break;
              if (stream.match(rx_positive, false))
                break;
              if (stream.match(rx_negative, false))
                break;
              if (stream.match(rx_uri, false))
                break;
            }
            return null;
          }
        };
        var mode = CodeMirror2.getMode(
          config,
          options.backdrop || "rst-base"
        );
        return CodeMirror2.overlayMode(mode, overlay, true);
      }, "python", "stex");
      CodeMirror2.defineMode("rst-base", function(config) {
        function format(string) {
          var args = Array.prototype.slice.call(arguments, 1);
          return string.replace(/{(\d+)}/g, function(match, n) {
            return typeof args[n] != "undefined" ? args[n] : match;
          });
        }
        var mode_python = CodeMirror2.getMode(config, "python");
        var mode_stex = CodeMirror2.getMode(config, "stex");
        var SEPA = "\\s+";
        var TAIL = "(?:\\s*|\\W|$)", rx_TAIL = new RegExp(format("^{0}", TAIL));
        var NAME = `(?:[^\\W\\d_](?:[\\w!"#$%&'()\\*\\+,\\-\\./:;<=>\\?]*[^\\W_])?)`, rx_NAME = new RegExp(format("^{0}", NAME));
        var NAME_WWS = `(?:[^\\W\\d_](?:[\\w\\s!"#$%&'()\\*\\+,\\-\\./:;<=>\\?]*[^\\W_])?)`;
        var REF_NAME = format("(?:{0}|`{1}`)", NAME, NAME_WWS);
        var TEXT1 = "(?:[^\\s\\|](?:[^\\|]*[^\\s\\|])?)";
        var TEXT2 = "(?:[^\\`]+)", rx_TEXT2 = new RegExp(format("^{0}", TEXT2));
        var rx_section = new RegExp(
          "^([!'#$%&\"()*+,-./:;<=>?@\\[\\\\\\]^_`{|}~])\\1{3,}\\s*$"
        );
        var rx_explicit = new RegExp(
          format("^\\.\\.{0}", SEPA)
        );
        var rx_link = new RegExp(
          format("^_{0}:{1}|^__:{1}", REF_NAME, TAIL)
        );
        var rx_directive = new RegExp(
          format("^{0}::{1}", REF_NAME, TAIL)
        );
        var rx_substitution = new RegExp(
          format("^\\|{0}\\|{1}{2}::{3}", TEXT1, SEPA, REF_NAME, TAIL)
        );
        var rx_footnote = new RegExp(
          format("^\\[(?:\\d+|#{0}?|\\*)]{1}", REF_NAME, TAIL)
        );
        var rx_citation = new RegExp(
          format("^\\[{0}\\]{1}", REF_NAME, TAIL)
        );
        var rx_substitution_ref = new RegExp(
          format("^\\|{0}\\|", TEXT1)
        );
        var rx_footnote_ref = new RegExp(
          format("^\\[(?:\\d+|#{0}?|\\*)]_", REF_NAME)
        );
        var rx_citation_ref = new RegExp(
          format("^\\[{0}\\]_", REF_NAME)
        );
        var rx_link_ref1 = new RegExp(
          format("^{0}__?", REF_NAME)
        );
        var rx_link_ref2 = new RegExp(
          format("^`{0}`_", TEXT2)
        );
        var rx_role_pre = new RegExp(
          format("^:{0}:`{1}`{2}", NAME, TEXT2, TAIL)
        );
        var rx_role_suf = new RegExp(
          format("^`{1}`:{0}:{2}", NAME, TEXT2, TAIL)
        );
        var rx_role = new RegExp(
          format("^:{0}:{1}", NAME, TAIL)
        );
        var rx_directive_name = new RegExp(format("^{0}", REF_NAME));
        var rx_directive_tail = new RegExp(format("^::{0}", TAIL));
        var rx_substitution_text = new RegExp(format("^\\|{0}\\|", TEXT1));
        var rx_substitution_sepa = new RegExp(format("^{0}", SEPA));
        var rx_substitution_name = new RegExp(format("^{0}", REF_NAME));
        var rx_substitution_tail = new RegExp(format("^::{0}", TAIL));
        var rx_link_head = new RegExp("^_");
        var rx_link_name = new RegExp(format("^{0}|_", REF_NAME));
        var rx_link_tail = new RegExp(format("^:{0}", TAIL));
        var rx_verbatim = new RegExp("^::\\s*$");
        var rx_examples = new RegExp("^\\s+(?:>>>|In \\[\\d+\\]:)\\s");
        function to_normal(stream, state) {
          var token = null;
          if (stream.sol() && stream.match(rx_examples, false)) {
            change(state, to_mode, {
              mode: mode_python,
              local: CodeMirror2.startState(mode_python)
            });
          } else if (stream.sol() && stream.match(rx_explicit)) {
            change(state, to_explicit);
            token = "meta";
          } else if (stream.sol() && stream.match(rx_section)) {
            change(state, to_normal);
            token = "header";
          } else if (phase(state) == rx_role_pre || stream.match(rx_role_pre, false)) {
            switch (stage(state)) {
              case 0:
                change(state, to_normal, context(rx_role_pre, 1));
                stream.match(/^:/);
                token = "meta";
                break;
              case 1:
                change(state, to_normal, context(rx_role_pre, 2));
                stream.match(rx_NAME);
                token = "keyword";
                if (stream.current().match(/^(?:math|latex)/)) {
                  state.tmp_stex = true;
                }
                break;
              case 2:
                change(state, to_normal, context(rx_role_pre, 3));
                stream.match(/^:`/);
                token = "meta";
                break;
              case 3:
                if (state.tmp_stex) {
                  state.tmp_stex = void 0;
                  state.tmp = {
                    mode: mode_stex,
                    local: CodeMirror2.startState(mode_stex)
                  };
                }
                if (state.tmp) {
                  if (stream.peek() == "`") {
                    change(state, to_normal, context(rx_role_pre, 4));
                    state.tmp = void 0;
                    break;
                  }
                  token = state.tmp.mode.token(stream, state.tmp.local);
                  break;
                }
                change(state, to_normal, context(rx_role_pre, 4));
                stream.match(rx_TEXT2);
                token = "string";
                break;
              case 4:
                change(state, to_normal, context(rx_role_pre, 5));
                stream.match(/^`/);
                token = "meta";
                break;
              case 5:
                change(state, to_normal, context(rx_role_pre, 6));
                stream.match(rx_TAIL);
                break;
              default:
                change(state, to_normal);
            }
          } else if (phase(state) == rx_role_suf || stream.match(rx_role_suf, false)) {
            switch (stage(state)) {
              case 0:
                change(state, to_normal, context(rx_role_suf, 1));
                stream.match(/^`/);
                token = "meta";
                break;
              case 1:
                change(state, to_normal, context(rx_role_suf, 2));
                stream.match(rx_TEXT2);
                token = "string";
                break;
              case 2:
                change(state, to_normal, context(rx_role_suf, 3));
                stream.match(/^`:/);
                token = "meta";
                break;
              case 3:
                change(state, to_normal, context(rx_role_suf, 4));
                stream.match(rx_NAME);
                token = "keyword";
                break;
              case 4:
                change(state, to_normal, context(rx_role_suf, 5));
                stream.match(/^:/);
                token = "meta";
                break;
              case 5:
                change(state, to_normal, context(rx_role_suf, 6));
                stream.match(rx_TAIL);
                break;
              default:
                change(state, to_normal);
            }
          } else if (phase(state) == rx_role || stream.match(rx_role, false)) {
            switch (stage(state)) {
              case 0:
                change(state, to_normal, context(rx_role, 1));
                stream.match(/^:/);
                token = "meta";
                break;
              case 1:
                change(state, to_normal, context(rx_role, 2));
                stream.match(rx_NAME);
                token = "keyword";
                break;
              case 2:
                change(state, to_normal, context(rx_role, 3));
                stream.match(/^:/);
                token = "meta";
                break;
              case 3:
                change(state, to_normal, context(rx_role, 4));
                stream.match(rx_TAIL);
                break;
              default:
                change(state, to_normal);
            }
          } else if (phase(state) == rx_substitution_ref || stream.match(rx_substitution_ref, false)) {
            switch (stage(state)) {
              case 0:
                change(state, to_normal, context(rx_substitution_ref, 1));
                stream.match(rx_substitution_text);
                token = "variable-2";
                break;
              case 1:
                change(state, to_normal, context(rx_substitution_ref, 2));
                if (stream.match(/^_?_?/))
                  token = "link";
                break;
              default:
                change(state, to_normal);
            }
          } else if (stream.match(rx_footnote_ref)) {
            change(state, to_normal);
            token = "quote";
          } else if (stream.match(rx_citation_ref)) {
            change(state, to_normal);
            token = "quote";
          } else if (stream.match(rx_link_ref1)) {
            change(state, to_normal);
            if (!stream.peek() || stream.peek().match(/^\W$/)) {
              token = "link";
            }
          } else if (phase(state) == rx_link_ref2 || stream.match(rx_link_ref2, false)) {
            switch (stage(state)) {
              case 0:
                if (!stream.peek() || stream.peek().match(/^\W$/)) {
                  change(state, to_normal, context(rx_link_ref2, 1));
                } else {
                  stream.match(rx_link_ref2);
                }
                break;
              case 1:
                change(state, to_normal, context(rx_link_ref2, 2));
                stream.match(/^`/);
                token = "link";
                break;
              case 2:
                change(state, to_normal, context(rx_link_ref2, 3));
                stream.match(rx_TEXT2);
                break;
              case 3:
                change(state, to_normal, context(rx_link_ref2, 4));
                stream.match(/^`_/);
                token = "link";
                break;
              default:
                change(state, to_normal);
            }
          } else if (stream.match(rx_verbatim)) {
            change(state, to_verbatim);
          } else {
            if (stream.next())
              change(state, to_normal);
          }
          return token;
        }
        function to_explicit(stream, state) {
          var token = null;
          if (phase(state) == rx_substitution || stream.match(rx_substitution, false)) {
            switch (stage(state)) {
              case 0:
                change(state, to_explicit, context(rx_substitution, 1));
                stream.match(rx_substitution_text);
                token = "variable-2";
                break;
              case 1:
                change(state, to_explicit, context(rx_substitution, 2));
                stream.match(rx_substitution_sepa);
                break;
              case 2:
                change(state, to_explicit, context(rx_substitution, 3));
                stream.match(rx_substitution_name);
                token = "keyword";
                break;
              case 3:
                change(state, to_explicit, context(rx_substitution, 4));
                stream.match(rx_substitution_tail);
                token = "meta";
                break;
              default:
                change(state, to_normal);
            }
          } else if (phase(state) == rx_directive || stream.match(rx_directive, false)) {
            switch (stage(state)) {
              case 0:
                change(state, to_explicit, context(rx_directive, 1));
                stream.match(rx_directive_name);
                token = "keyword";
                if (stream.current().match(/^(?:math|latex)/))
                  state.tmp_stex = true;
                else if (stream.current().match(/^python/))
                  state.tmp_py = true;
                break;
              case 1:
                change(state, to_explicit, context(rx_directive, 2));
                stream.match(rx_directive_tail);
                token = "meta";
                if (stream.match(/^latex\s*$/) || state.tmp_stex) {
                  state.tmp_stex = void 0;
                  change(state, to_mode, {
                    mode: mode_stex,
                    local: CodeMirror2.startState(mode_stex)
                  });
                }
                break;
              case 2:
                change(state, to_explicit, context(rx_directive, 3));
                if (stream.match(/^python\s*$/) || state.tmp_py) {
                  state.tmp_py = void 0;
                  change(state, to_mode, {
                    mode: mode_python,
                    local: CodeMirror2.startState(mode_python)
                  });
                }
                break;
              default:
                change(state, to_normal);
            }
          } else if (phase(state) == rx_link || stream.match(rx_link, false)) {
            switch (stage(state)) {
              case 0:
                change(state, to_explicit, context(rx_link, 1));
                stream.match(rx_link_head);
                stream.match(rx_link_name);
                token = "link";
                break;
              case 1:
                change(state, to_explicit, context(rx_link, 2));
                stream.match(rx_link_tail);
                token = "meta";
                break;
              default:
                change(state, to_normal);
            }
          } else if (stream.match(rx_footnote)) {
            change(state, to_normal);
            token = "quote";
          } else if (stream.match(rx_citation)) {
            change(state, to_normal);
            token = "quote";
          } else {
            stream.eatSpace();
            if (stream.eol()) {
              change(state, to_normal);
            } else {
              stream.skipToEnd();
              change(state, to_comment);
              token = "comment";
            }
          }
          return token;
        }
        function to_comment(stream, state) {
          return as_block(stream, state, "comment");
        }
        function to_verbatim(stream, state) {
          return as_block(stream, state, "meta");
        }
        function as_block(stream, state, token) {
          if (stream.eol() || stream.eatSpace()) {
            stream.skipToEnd();
            return token;
          } else {
            change(state, to_normal);
            return null;
          }
        }
        function to_mode(stream, state) {
          if (state.ctx.mode && state.ctx.local) {
            if (stream.sol()) {
              if (!stream.eatSpace())
                change(state, to_normal);
              return null;
            }
            return state.ctx.mode.token(stream, state.ctx.local);
          }
          change(state, to_normal);
          return null;
        }
        function context(phase2, stage2, mode, local) {
          return { phase: phase2, stage: stage2, mode, local };
        }
        function change(state, tok, ctx) {
          state.tok = tok;
          state.ctx = ctx || {};
        }
        function stage(state) {
          return state.ctx.stage || 0;
        }
        function phase(state) {
          return state.ctx.phase;
        }
        return {
          startState: function() {
            return { tok: to_normal, ctx: context(void 0, 0) };
          },
          copyState: function(state) {
            var ctx = state.ctx, tmp = state.tmp;
            if (ctx.local)
              ctx = { mode: ctx.mode, local: CodeMirror2.copyState(ctx.mode, ctx.local) };
            if (tmp)
              tmp = { mode: tmp.mode, local: CodeMirror2.copyState(tmp.mode, tmp.local) };
            return { tok: state.tok, ctx, tmp };
          },
          innerMode: function(state) {
            return state.tmp ? { state: state.tmp.local, mode: state.tmp.mode } : state.ctx.mode ? { state: state.ctx.local, mode: state.ctx.mode } : null;
          },
          token: function(stream, state) {
            return state.tok(stream, state);
          }
        };
      }, "python", "stex");
      CodeMirror2.defineMIME("text/x-rst", "rst");
    });
  }
});

// mode/rust/rust.js
var require_rust = __commonJS({
  "mode/rust/rust.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror(), require_simple());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror", "../../addon/mode/simple"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineSimpleMode("rust", {
        start: [
          // string and byte string
          { regex: /b?"/, token: "string", next: "string" },
          // raw string and raw byte string
          { regex: /b?r"/, token: "string", next: "string_raw" },
          { regex: /b?r#+"/, token: "string", next: "string_raw_hash" },
          // character
          { regex: /'(?:[^'\\]|\\(?:[nrt0'"]|x[\da-fA-F]{2}|u\{[\da-fA-F]{6}\}))'/, token: "string-2" },
          // byte
          { regex: /b'(?:[^']|\\(?:['\\nrt0]|x[\da-fA-F]{2}))'/, token: "string-2" },
          {
            regex: /(?:(?:[0-9][0-9_]*)(?:(?:[Ee][+-]?[0-9_]+)|\.[0-9_]+(?:[Ee][+-]?[0-9_]+)?)(?:f32|f64)?)|(?:0(?:b[01_]+|(?:o[0-7_]+)|(?:x[0-9a-fA-F_]+))|(?:[0-9][0-9_]*))(?:u8|u16|u32|u64|i8|i16|i32|i64|isize|usize)?/,
            token: "number"
          },
          { regex: /(let(?:\s+mut)?|fn|enum|mod|struct|type|union)(\s+)([a-zA-Z_][a-zA-Z0-9_]*)/, token: ["keyword", null, "def"] },
          { regex: /(?:abstract|alignof|as|async|await|box|break|continue|const|crate|do|dyn|else|enum|extern|fn|for|final|if|impl|in|loop|macro|match|mod|move|offsetof|override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\b/, token: "keyword" },
          { regex: /\b(?:Self|isize|usize|char|bool|u8|u16|u32|u64|f16|f32|f64|i8|i16|i32|i64|str|Option)\b/, token: "atom" },
          { regex: /\b(?:true|false|Some|None|Ok|Err)\b/, token: "builtin" },
          {
            regex: /\b(fn)(\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,
            token: ["keyword", null, "def"]
          },
          { regex: /#!?\[.*\]/, token: "meta" },
          { regex: /\/\/.*/, token: "comment" },
          { regex: /\/\*/, token: "comment", next: "comment" },
          { regex: /[-+\/*=<>!]+/, token: "operator" },
          { regex: /[a-zA-Z_]\w*!/, token: "variable-3" },
          { regex: /[a-zA-Z_]\w*/, token: "variable" },
          { regex: /[\{\[\(]/, indent: true },
          { regex: /[\}\]\)]/, dedent: true }
        ],
        string: [
          { regex: /"/, token: "string", next: "start" },
          { regex: /(?:[^\\"]|\\(?:.|$))*/, token: "string" }
        ],
        string_raw: [
          { regex: /"/, token: "string", next: "start" },
          { regex: /[^"]*/, token: "string" }
        ],
        string_raw_hash: [
          { regex: /"#+/, token: "string", next: "start" },
          { regex: /(?:[^"]|"(?!#))*/, token: "string" }
        ],
        comment: [
          { regex: /.*?\*\//, token: "comment", next: "start" },
          { regex: /.*/, token: "comment" }
        ],
        meta: {
          dontIndentStates: ["comment"],
          electricInput: /^\s*\}$/,
          blockCommentStart: "/*",
          blockCommentEnd: "*/",
          lineComment: "//",
          fold: "brace"
        }
      });
      CodeMirror2.defineMIME("text/x-rustsrc", "rust");
      CodeMirror2.defineMIME("text/rust", "rust");
    });
  }
});

// mode/sas/sas.js
var require_sas = __commonJS({
  "mode/sas/sas.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("sas", function() {
        var words = {};
        var isDoubleOperatorSym = {
          eq: "operator",
          lt: "operator",
          le: "operator",
          gt: "operator",
          ge: "operator",
          "in": "operator",
          ne: "operator",
          or: "operator"
        };
        var isDoubleOperatorChar = /(<=|>=|!=|<>)/;
        var isSingleOperatorChar = /[=\(:\),{}.*<>+\-\/^\[\]]/;
        function define2(style, string, context) {
          if (context) {
            var split = string.split(" ");
            for (var i = 0; i < split.length; i++) {
              words[split[i]] = { style, state: context };
            }
          }
        }
        define2("def", "stack pgm view source debug nesting nolist", ["inDataStep"]);
        define2("def", "if while until for do do; end end; then else cancel", ["inDataStep"]);
        define2("def", "label format _n_ _error_", ["inDataStep"]);
        define2("def", "ALTER BUFNO BUFSIZE CNTLLEV COMPRESS DLDMGACTION ENCRYPT ENCRYPTKEY EXTENDOBSCOUNTER GENMAX GENNUM INDEX LABEL OBSBUF OUTREP PW PWREQ READ REPEMPTY REPLACE REUSE ROLE SORTEDBY SPILL TOBSNO TYPE WRITE FILECLOSE FIRSTOBS IN OBS POINTOBS WHERE WHEREUP IDXNAME IDXWHERE DROP KEEP RENAME", ["inDataStep"]);
        define2("def", "filevar finfo finv fipname fipnamel fipstate first firstobs floor", ["inDataStep"]);
        define2("def", "varfmt varinfmt varlabel varlen varname varnum varray varrayx vartype verify vformat vformatd vformatdx vformatn vformatnx vformatw vformatwx vformatx vinarray vinarrayx vinformat vinformatd vinformatdx vinformatn vinformatnx vinformatw vinformatwx vinformatx vlabel vlabelx vlength vlengthx vname vnamex vnferr vtype vtypex weekday", ["inDataStep"]);
        define2("def", "zipfips zipname zipnamel zipstate", ["inDataStep"]);
        define2("def", "put putc putn", ["inDataStep"]);
        define2("builtin", "data run", ["inDataStep"]);
        define2("def", "data", ["inProc"]);
        define2("def", "%if %end %end; %else %else; %do %do; %then", ["inMacro"]);
        define2("builtin", "proc run; quit; libname filename %macro %mend option options", ["ALL"]);
        define2("def", "footnote title libname ods", ["ALL"]);
        define2("def", "%let %put %global %sysfunc %eval ", ["ALL"]);
        define2("variable", "&sysbuffr &syscc &syscharwidth &syscmd &sysdate &sysdate9 &sysday &sysdevic &sysdmg &sysdsn &sysencoding &sysenv &syserr &syserrortext &sysfilrc &syshostname &sysindex &sysinfo &sysjobid &syslast &syslckrc &syslibrc &syslogapplname &sysmacroname &sysmenv &sysmsg &sysncpu &sysodspath &sysparm &syspbuff &sysprocessid &sysprocessname &sysprocname &sysrc &sysscp &sysscpl &sysscpl &syssite &sysstartid &sysstartname &systcpiphostname &systime &sysuserid &sysver &sysvlong &sysvlong4 &syswarningtext", ["ALL"]);
        define2("def", "source2 nosource2 page pageno pagesize", ["ALL"]);
        define2("def", "_all_ _character_ _cmd_ _freq_ _i_ _infile_ _last_ _msg_ _null_ _numeric_ _temporary_ _type_ abort abs addr adjrsq airy alpha alter altlog altprint and arcos array arsin as atan attrc attrib attrn authserver autoexec awscontrol awsdef awsmenu awsmenumerge awstitle backward band base betainv between blocksize blshift bnot bor brshift bufno bufsize bxor by byerr byline byte calculated call cards cards4 catcache cbufno cdf ceil center cexist change chisq cinv class cleanup close cnonct cntllev coalesce codegen col collate collin column comamid comaux1 comaux2 comdef compbl compound compress config continue convert cos cosh cpuid create cross crosstab css curobs cv daccdb daccdbsl daccsl daccsyd dacctab dairy datalines datalines4 datejul datepart datetime day dbcslang dbcstype dclose ddfm ddm delete delimiter depdb depdbsl depsl depsyd deptab dequote descending descript design= device dflang dhms dif digamma dim dinfo display distinct dkricond dkrocond dlm dnum do dopen doptname doptnum dread drop dropnote dsname dsnferr echo else emaildlg emailid emailpw emailserver emailsys encrypt end endsas engine eof eov erf erfc error errorcheck errors exist exp fappend fclose fcol fdelete feedback fetch fetchobs fexist fget file fileclose fileexist filefmt filename fileref  fmterr fmtsearch fnonct fnote font fontalias  fopen foptname foptnum force formatted formchar formdelim formdlim forward fpoint fpos fput fread frewind frlen from fsep fuzz fwrite gaminv gamma getoption getvarc getvarn go goto group gwindow hbar hbound helpenv helploc hms honorappearance hosthelp hostprint hour hpct html hvar ibessel ibr id if index indexc indexw initcmd initstmt inner input inputc inputn inr insert int intck intnx into intrr invaliddata irr is jbessel join juldate keep kentb kurtosis label lag last lbound leave left length levels lgamma lib  library libref line linesize link list log log10 log2 logpdf logpmf logsdf lostcard lowcase lrecl ls macro macrogen maps mautosource max maxdec maxr mdy mean measures median memtype merge merror min minute missing missover mlogic mod mode model modify month mopen mort mprint mrecall msglevel msymtabmax mvarsize myy n nest netpv new news nmiss no nobatch nobs nocaps nocardimage nocenter nocharcode nocmdmac nocol nocum nodate nodbcs nodetails nodmr nodms nodmsbatch nodup nodupkey noduplicates noechoauto noequals noerrorabend noexitwindows nofullstimer noicon noimplmac noint nolist noloadlist nomiss nomlogic nomprint nomrecall nomsgcase nomstored nomultenvappl nonotes nonumber noobs noovp nopad nopercent noprint noprintinit normal norow norsasuser nosetinit  nosplash nosymbolgen note notes notitle notitles notsorted noverbose noxsync noxwait npv null number numkeys nummousekeys nway obs  on open     order ordinal otherwise out outer outp= output over ovp p(1 5 10 25 50 75 90 95 99) pad pad2  paired parm parmcards path pathdll pathname pdf peek peekc pfkey pmf point poisson poke position printer probbeta probbnml probchi probf probgam probhypr probit probnegb probnorm probsig probt procleave prt ps  pw pwreq qtr quote r ranbin rancau random ranexp rangam range ranks rannor ranpoi rantbl rantri ranuni rcorr read recfm register regr remote remove rename repeat repeated replace resolve retain return reuse reverse rewind right round rsquare rtf rtrace rtraceloc s s2 samploc sasautos sascontrol sasfrscr sasmsg sasmstore sasscript sasuser saving scan sdf second select selection separated seq serror set setcomm setot sign simple sin sinh siteinfo skewness skip sle sls sortedby sortpgm sortseq sortsize soundex  spedis splashlocation split spool sqrt start std stderr stdin stfips stimer stname stnamel stop stopover sub subgroup subpopn substr sum sumwgt symbol symbolgen symget symput sysget sysin sysleave sysmsg sysparm sysprint sysprintfont sysprod sysrc system t table tables tan tanh tapeclose tbufsize terminal test then timepart tinv  tnonct to today tol tooldef totper transformout translate trantab tranwrd trigamma trim trimn trunc truncover type unformatted uniform union until upcase update user usericon uss validate value var  weight when where while wincharset window work workinit workterm write wsum xsync xwait yearcutoff yes yyq  min max", ["inDataStep", "inProc"]);
        define2("operator", "and not ", ["inDataStep", "inProc"]);
        function tokenize(stream, state) {
          var ch = stream.next();
          if (ch === "/" && stream.eat("*")) {
            state.continueComment = true;
            return "comment";
          } else if (state.continueComment === true) {
            if (ch === "*" && stream.peek() === "/") {
              stream.next();
              state.continueComment = false;
            } else if (stream.skipTo("*")) {
              stream.skipTo("*");
              stream.next();
              if (stream.eat("/"))
                state.continueComment = false;
            } else {
              stream.skipToEnd();
            }
            return "comment";
          }
          if (ch == "*" && stream.column() == stream.indentation()) {
            stream.skipToEnd();
            return "comment";
          }
          var doubleOperator = ch + stream.peek();
          if ((ch === '"' || ch === "'") && !state.continueString) {
            state.continueString = ch;
            return "string";
          } else if (state.continueString) {
            if (state.continueString == ch) {
              state.continueString = null;
            } else if (stream.skipTo(state.continueString)) {
              stream.next();
              state.continueString = null;
            } else {
              stream.skipToEnd();
            }
            return "string";
          } else if (state.continueString !== null && stream.eol()) {
            stream.skipTo(state.continueString) || stream.skipToEnd();
            return "string";
          } else if (/[\d\.]/.test(ch)) {
            if (ch === ".")
              stream.match(/^[0-9]+([eE][\-+]?[0-9]+)?/);
            else if (ch === "0")
              stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);
            else
              stream.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/);
            return "number";
          } else if (isDoubleOperatorChar.test(ch + stream.peek())) {
            stream.next();
            return "operator";
          } else if (isDoubleOperatorSym.hasOwnProperty(doubleOperator)) {
            stream.next();
            if (stream.peek() === " ")
              return isDoubleOperatorSym[doubleOperator.toLowerCase()];
          } else if (isSingleOperatorChar.test(ch)) {
            return "operator";
          }
          var word;
          if (stream.match(/[%&;\w]+/, false) != null) {
            word = ch + stream.match(/[%&;\w]+/, true);
            if (/&/.test(word))
              return "variable";
          } else {
            word = ch;
          }
          if (state.nextword) {
            stream.match(/[\w]+/);
            if (stream.peek() === ".")
              stream.skipTo(" ");
            state.nextword = false;
            return "variable-2";
          }
          word = word.toLowerCase();
          if (state.inDataStep) {
            if (word === "run;" || stream.match(/run\s;/)) {
              state.inDataStep = false;
              return "builtin";
            }
            if (word && stream.next() === ".") {
              if (/\w/.test(stream.peek()))
                return "variable-2";
              else
                return "variable";
            }
            if (word && words.hasOwnProperty(word) && (words[word].state.indexOf("inDataStep") !== -1 || words[word].state.indexOf("ALL") !== -1)) {
              if (stream.start < stream.pos)
                stream.backUp(stream.pos - stream.start);
              for (var i = 0; i < word.length; ++i)
                stream.next();
              return words[word].style;
            }
          }
          if (state.inProc) {
            if (word === "run;" || word === "quit;") {
              state.inProc = false;
              return "builtin";
            }
            if (word && words.hasOwnProperty(word) && (words[word].state.indexOf("inProc") !== -1 || words[word].state.indexOf("ALL") !== -1)) {
              stream.match(/[\w]+/);
              return words[word].style;
            }
          }
          if (state.inMacro) {
            if (word === "%mend") {
              if (stream.peek() === ";")
                stream.next();
              state.inMacro = false;
              return "builtin";
            }
            if (word && words.hasOwnProperty(word) && (words[word].state.indexOf("inMacro") !== -1 || words[word].state.indexOf("ALL") !== -1)) {
              stream.match(/[\w]+/);
              return words[word].style;
            }
            return "atom";
          }
          if (word && words.hasOwnProperty(word)) {
            stream.backUp(1);
            stream.match(/[\w]+/);
            if (word === "data" && /=/.test(stream.peek()) === false) {
              state.inDataStep = true;
              state.nextword = true;
              return "builtin";
            }
            if (word === "proc") {
              state.inProc = true;
              state.nextword = true;
              return "builtin";
            }
            if (word === "%macro") {
              state.inMacro = true;
              state.nextword = true;
              return "builtin";
            }
            if (/title[1-9]/.test(word))
              return "def";
            if (word === "footnote") {
              stream.eat(/[1-9]/);
              return "def";
            }
            if (state.inDataStep === true && words[word].state.indexOf("inDataStep") !== -1)
              return words[word].style;
            if (state.inProc === true && words[word].state.indexOf("inProc") !== -1)
              return words[word].style;
            if (state.inMacro === true && words[word].state.indexOf("inMacro") !== -1)
              return words[word].style;
            if (words[word].state.indexOf("ALL") !== -1)
              return words[word].style;
            return null;
          }
          return null;
        }
        return {
          startState: function() {
            return {
              inDataStep: false,
              inProc: false,
              inMacro: false,
              nextword: false,
              continueString: null,
              continueComment: false
            };
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            return tokenize(stream, state);
          },
          blockCommentStart: "/*",
          blockCommentEnd: "*/"
        };
      });
      CodeMirror2.defineMIME("text/x-sas", "sas");
    });
  }
});

// mode/sass/sass.js
var require_sass = __commonJS({
  "mode/sass/sass.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror(), require_css());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror", "../css/css"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("sass", function(config) {
        var cssMode = CodeMirror2.mimeModes["text/css"];
        var propertyKeywords = cssMode.propertyKeywords || {}, colorKeywords = cssMode.colorKeywords || {}, valueKeywords = cssMode.valueKeywords || {}, fontProperties = cssMode.fontProperties || {};
        function tokenRegexp(words) {
          return new RegExp("^" + words.join("|"));
        }
        var keywords = ["true", "false", "null", "auto"];
        var keywordsRegexp = new RegExp("^" + keywords.join("|"));
        var operators = [
          "\\(",
          "\\)",
          "=",
          ">",
          "<",
          "==",
          ">=",
          "<=",
          "\\+",
          "-",
          "\\!=",
          "/",
          "\\*",
          "%",
          "and",
          "or",
          "not",
          ";",
          "\\{",
          "\\}",
          ":"
        ];
        var opRegexp = tokenRegexp(operators);
        var pseudoElementsRegexp = /^::?[a-zA-Z_][\w\-]*/;
        var word;
        function isEndLine(stream) {
          return !stream.peek() || stream.match(/\s+$/, false);
        }
        function urlTokens(stream, state) {
          var ch = stream.peek();
          if (ch === ")") {
            stream.next();
            state.tokenizer = tokenBase;
            return "operator";
          } else if (ch === "(") {
            stream.next();
            stream.eatSpace();
            return "operator";
          } else if (ch === "'" || ch === '"') {
            state.tokenizer = buildStringTokenizer(stream.next());
            return "string";
          } else {
            state.tokenizer = buildStringTokenizer(")", false);
            return "string";
          }
        }
        function comment(indentation, multiLine) {
          return function(stream, state) {
            if (stream.sol() && stream.indentation() <= indentation) {
              state.tokenizer = tokenBase;
              return tokenBase(stream, state);
            }
            if (multiLine && stream.skipTo("*/")) {
              stream.next();
              stream.next();
              state.tokenizer = tokenBase;
            } else {
              stream.skipToEnd();
            }
            return "comment";
          };
        }
        function buildStringTokenizer(quote, greedy) {
          if (greedy == null) {
            greedy = true;
          }
          function stringTokenizer(stream, state) {
            var nextChar = stream.next();
            var peekChar = stream.peek();
            var previousChar = stream.string.charAt(stream.pos - 2);
            var endingString = nextChar !== "\\" && peekChar === quote || nextChar === quote && previousChar !== "\\";
            if (endingString) {
              if (nextChar !== quote && greedy) {
                stream.next();
              }
              if (isEndLine(stream)) {
                state.cursorHalf = 0;
              }
              state.tokenizer = tokenBase;
              return "string";
            } else if (nextChar === "#" && peekChar === "{") {
              state.tokenizer = buildInterpolationTokenizer(stringTokenizer);
              stream.next();
              return "operator";
            } else {
              return "string";
            }
          }
          return stringTokenizer;
        }
        function buildInterpolationTokenizer(currentTokenizer) {
          return function(stream, state) {
            if (stream.peek() === "}") {
              stream.next();
              state.tokenizer = currentTokenizer;
              return "operator";
            } else {
              return tokenBase(stream, state);
            }
          };
        }
        function indent(state) {
          if (state.indentCount == 0) {
            state.indentCount++;
            var lastScopeOffset = state.scopes[0].offset;
            var currentOffset = lastScopeOffset + config.indentUnit;
            state.scopes.unshift({ offset: currentOffset });
          }
        }
        function dedent(state) {
          if (state.scopes.length == 1)
            return;
          state.scopes.shift();
        }
        function tokenBase(stream, state) {
          var ch = stream.peek();
          if (stream.match("/*")) {
            state.tokenizer = comment(stream.indentation(), true);
            return state.tokenizer(stream, state);
          }
          if (stream.match("//")) {
            state.tokenizer = comment(stream.indentation(), false);
            return state.tokenizer(stream, state);
          }
          if (stream.match("#{")) {
            state.tokenizer = buildInterpolationTokenizer(tokenBase);
            return "operator";
          }
          if (ch === '"' || ch === "'") {
            stream.next();
            state.tokenizer = buildStringTokenizer(ch);
            return "string";
          }
          if (!state.cursorHalf) {
            if (ch === "-") {
              if (stream.match(/^-\w+-/)) {
                return "meta";
              }
            }
            if (ch === ".") {
              stream.next();
              if (stream.match(/^[\w-]+/)) {
                indent(state);
                return "qualifier";
              } else if (stream.peek() === "#") {
                indent(state);
                return "tag";
              }
            }
            if (ch === "#") {
              stream.next();
              if (stream.match(/^[\w-]+/)) {
                indent(state);
                return "builtin";
              }
              if (stream.peek() === "#") {
                indent(state);
                return "tag";
              }
            }
            if (ch === "$") {
              stream.next();
              stream.eatWhile(/[\w-]/);
              return "variable-2";
            }
            if (stream.match(/^-?[0-9\.]+/))
              return "number";
            if (stream.match(/^(px|em|in)\b/))
              return "unit";
            if (stream.match(keywordsRegexp))
              return "keyword";
            if (stream.match(/^url/) && stream.peek() === "(") {
              state.tokenizer = urlTokens;
              return "atom";
            }
            if (ch === "=") {
              if (stream.match(/^=[\w-]+/)) {
                indent(state);
                return "meta";
              }
            }
            if (ch === "+") {
              if (stream.match(/^\+[\w-]+/)) {
                return "variable-3";
              }
            }
            if (ch === "@") {
              if (stream.match(/@extend/)) {
                if (!stream.match(/\s*[\w]/))
                  dedent(state);
              }
            }
            if (stream.match(/^@(else if|if|media|else|for|each|while|mixin|function)/)) {
              indent(state);
              return "def";
            }
            if (ch === "@") {
              stream.next();
              stream.eatWhile(/[\w-]/);
              return "def";
            }
            if (stream.eatWhile(/[\w-]/)) {
              if (stream.match(/ *: *[\w-\+\$#!\("']/, false)) {
                word = stream.current().toLowerCase();
                var prop = state.prevProp + "-" + word;
                if (propertyKeywords.hasOwnProperty(prop)) {
                  return "property";
                } else if (propertyKeywords.hasOwnProperty(word)) {
                  state.prevProp = word;
                  return "property";
                } else if (fontProperties.hasOwnProperty(word)) {
                  return "property";
                }
                return "tag";
              } else if (stream.match(/ *:/, false)) {
                indent(state);
                state.cursorHalf = 1;
                state.prevProp = stream.current().toLowerCase();
                return "property";
              } else if (stream.match(/ *,/, false)) {
                return "tag";
              } else {
                indent(state);
                return "tag";
              }
            }
            if (ch === ":") {
              if (stream.match(pseudoElementsRegexp)) {
                return "variable-3";
              }
              stream.next();
              state.cursorHalf = 1;
              return "operator";
            }
          } else {
            if (ch === "#") {
              stream.next();
              if (stream.match(/[0-9a-fA-F]{6}|[0-9a-fA-F]{3}/)) {
                if (isEndLine(stream)) {
                  state.cursorHalf = 0;
                }
                return "number";
              }
            }
            if (stream.match(/^-?[0-9\.]+/)) {
              if (isEndLine(stream)) {
                state.cursorHalf = 0;
              }
              return "number";
            }
            if (stream.match(/^(px|em|in)\b/)) {
              if (isEndLine(stream)) {
                state.cursorHalf = 0;
              }
              return "unit";
            }
            if (stream.match(keywordsRegexp)) {
              if (isEndLine(stream)) {
                state.cursorHalf = 0;
              }
              return "keyword";
            }
            if (stream.match(/^url/) && stream.peek() === "(") {
              state.tokenizer = urlTokens;
              if (isEndLine(stream)) {
                state.cursorHalf = 0;
              }
              return "atom";
            }
            if (ch === "$") {
              stream.next();
              stream.eatWhile(/[\w-]/);
              if (isEndLine(stream)) {
                state.cursorHalf = 0;
              }
              return "variable-2";
            }
            if (ch === "!") {
              stream.next();
              state.cursorHalf = 0;
              return stream.match(/^[\w]+/) ? "keyword" : "operator";
            }
            if (stream.match(opRegexp)) {
              if (isEndLine(stream)) {
                state.cursorHalf = 0;
              }
              return "operator";
            }
            if (stream.eatWhile(/[\w-]/)) {
              if (isEndLine(stream)) {
                state.cursorHalf = 0;
              }
              word = stream.current().toLowerCase();
              if (valueKeywords.hasOwnProperty(word)) {
                return "atom";
              } else if (colorKeywords.hasOwnProperty(word)) {
                return "keyword";
              } else if (propertyKeywords.hasOwnProperty(word)) {
                state.prevProp = stream.current().toLowerCase();
                return "property";
              } else {
                return "tag";
              }
            }
            if (isEndLine(stream)) {
              state.cursorHalf = 0;
              return null;
            }
          }
          if (stream.match(opRegexp))
            return "operator";
          stream.next();
          return null;
        }
        function tokenLexer(stream, state) {
          if (stream.sol())
            state.indentCount = 0;
          var style = state.tokenizer(stream, state);
          var current = stream.current();
          if (current === "@return" || current === "}") {
            dedent(state);
          }
          if (style !== null) {
            var startOfToken = stream.pos - current.length;
            var withCurrentIndent = startOfToken + config.indentUnit * state.indentCount;
            var newScopes = [];
            for (var i = 0; i < state.scopes.length; i++) {
              var scope = state.scopes[i];
              if (scope.offset <= withCurrentIndent)
                newScopes.push(scope);
            }
            state.scopes = newScopes;
          }
          return style;
        }
        return {
          startState: function() {
            return {
              tokenizer: tokenBase,
              scopes: [{ offset: 0, type: "sass" }],
              indentCount: 0,
              cursorHalf: 0,
              // cursor half tells us if cursor lies after (1)
              // or before (0) colon (well... more or less)
              definedVars: [],
              definedMixins: []
            };
          },
          token: function(stream, state) {
            var style = tokenLexer(stream, state);
            state.lastToken = { style, content: stream.current() };
            return style;
          },
          indent: function(state) {
            return state.scopes[0].offset;
          }
        };
      }, "css");
      CodeMirror2.defineMIME("text/x-sass", "sass");
    });
  }
});

// mode/scheme/scheme.js
var require_scheme = __commonJS({
  "mode/scheme/scheme.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("scheme", function() {
        var BUILTIN = "builtin", COMMENT = "comment", STRING = "string", ATOM = "atom", NUMBER = "number", BRACKET = "bracket";
        var INDENT_WORD_SKIP = 2;
        function makeKeywords(str) {
          var obj = {}, words = str.split(" ");
          for (var i = 0; i < words.length; ++i)
            obj[words[i]] = true;
          return obj;
        }
        var keywords = makeKeywords("\u03BB case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?");
        var indentKeys = makeKeywords("define let letrec let* lambda");
        function stateStack(indent, type, prev) {
          this.indent = indent;
          this.type = type;
          this.prev = prev;
        }
        function pushStack(state, indent, type) {
          state.indentStack = new stateStack(indent, type, state.indentStack);
        }
        function popStack(state) {
          state.indentStack = state.indentStack.prev;
        }
        var binaryMatcher = new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\/[01]+#*)?i|[-+]?[01]+#*(?:\/[01]+#*)?@[-+]?[01]+#*(?:\/[01]+#*)?|[-+]?[01]+#*(?:\/[01]+#*)?[-+](?:[01]+#*(?:\/[01]+#*)?)?i|[-+]?[01]+#*(?:\/[01]+#*)?)(?=[()\s;"]|$)/i);
        var octalMatcher = new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?)(?=[()\s;"]|$)/i);
        var hexMatcher = new RegExp(/^(?:[-+]i|[-+][\da-f]+#*(?:\/[\da-f]+#*)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?@[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?[-+](?:[\da-f]+#*(?:\/[\da-f]+#*)?)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?)(?=[()\s;"]|$)/i);
        var decimalMatcher = new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)i|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)@[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)?i|(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*))(?=[()\s;"]|$)/i);
        function isBinaryNumber(stream) {
          return stream.match(binaryMatcher);
        }
        function isOctalNumber(stream) {
          return stream.match(octalMatcher);
        }
        function isDecimalNumber(stream, backup) {
          if (backup === true) {
            stream.backUp(1);
          }
          return stream.match(decimalMatcher);
        }
        function isHexNumber(stream) {
          return stream.match(hexMatcher);
        }
        return {
          startState: function() {
            return {
              indentStack: null,
              indentation: 0,
              mode: false,
              sExprComment: false,
              sExprQuote: false
            };
          },
          token: function(stream, state) {
            if (state.indentStack == null && stream.sol()) {
              state.indentation = stream.indentation();
            }
            if (stream.eatSpace()) {
              return null;
            }
            var returnType = null;
            switch (state.mode) {
              case "string":
                var next, escaped = false;
                while ((next = stream.next()) != null) {
                  if (next == '"' && !escaped) {
                    state.mode = false;
                    break;
                  }
                  escaped = !escaped && next == "\\";
                }
                returnType = STRING;
                break;
              case "comment":
                var next, maybeEnd = false;
                while ((next = stream.next()) != null) {
                  if (next == "#" && maybeEnd) {
                    state.mode = false;
                    break;
                  }
                  maybeEnd = next == "|";
                }
                returnType = COMMENT;
                break;
              case "s-expr-comment":
                state.mode = false;
                if (stream.peek() == "(" || stream.peek() == "[") {
                  state.sExprComment = 0;
                } else {
                  stream.eatWhile(/[^\s\(\)\[\]]/);
                  returnType = COMMENT;
                  break;
                }
              default:
                var ch = stream.next();
                if (ch == '"') {
                  state.mode = "string";
                  returnType = STRING;
                } else if (ch == "'") {
                  if (stream.peek() == "(" || stream.peek() == "[") {
                    if (typeof state.sExprQuote != "number") {
                      state.sExprQuote = 0;
                    }
                    returnType = ATOM;
                  } else {
                    stream.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/);
                    returnType = ATOM;
                  }
                } else if (ch == "#") {
                  if (stream.eat("|")) {
                    state.mode = "comment";
                    returnType = COMMENT;
                  } else if (stream.eat(/[tf]/i)) {
                    returnType = ATOM;
                  } else if (stream.eat(";")) {
                    state.mode = "s-expr-comment";
                    returnType = COMMENT;
                  } else {
                    var numTest = null, hasExactness = false, hasRadix = true;
                    if (stream.eat(/[ei]/i)) {
                      hasExactness = true;
                    } else {
                      stream.backUp(1);
                    }
                    if (stream.match(/^#b/i)) {
                      numTest = isBinaryNumber;
                    } else if (stream.match(/^#o/i)) {
                      numTest = isOctalNumber;
                    } else if (stream.match(/^#x/i)) {
                      numTest = isHexNumber;
                    } else if (stream.match(/^#d/i)) {
                      numTest = isDecimalNumber;
                    } else if (stream.match(/^[-+0-9.]/, false)) {
                      hasRadix = false;
                      numTest = isDecimalNumber;
                    } else if (!hasExactness) {
                      stream.eat("#");
                    }
                    if (numTest != null) {
                      if (hasRadix && !hasExactness) {
                        stream.match(/^#[ei]/i);
                      }
                      if (numTest(stream))
                        returnType = NUMBER;
                    }
                  }
                } else if (/^[-+0-9.]/.test(ch) && isDecimalNumber(stream, true)) {
                  returnType = NUMBER;
                } else if (ch == ";") {
                  stream.skipToEnd();
                  returnType = COMMENT;
                } else if (ch == "(" || ch == "[") {
                  var keyWord = "";
                  var indentTemp = stream.column(), letter;
                  while ((letter = stream.eat(/[^\s\(\[\;\)\]]/)) != null) {
                    keyWord += letter;
                  }
                  if (keyWord.length > 0 && indentKeys.propertyIsEnumerable(keyWord)) {
                    pushStack(state, indentTemp + INDENT_WORD_SKIP, ch);
                  } else {
                    stream.eatSpace();
                    if (stream.eol() || stream.peek() == ";") {
                      pushStack(state, indentTemp + 1, ch);
                    } else {
                      pushStack(state, indentTemp + stream.current().length, ch);
                    }
                  }
                  stream.backUp(stream.current().length - 1);
                  if (typeof state.sExprComment == "number")
                    state.sExprComment++;
                  if (typeof state.sExprQuote == "number")
                    state.sExprQuote++;
                  returnType = BRACKET;
                } else if (ch == ")" || ch == "]") {
                  returnType = BRACKET;
                  if (state.indentStack != null && state.indentStack.type == (ch == ")" ? "(" : "[")) {
                    popStack(state);
                    if (typeof state.sExprComment == "number") {
                      if (--state.sExprComment == 0) {
                        returnType = COMMENT;
                        state.sExprComment = false;
                      }
                    }
                    if (typeof state.sExprQuote == "number") {
                      if (--state.sExprQuote == 0) {
                        returnType = ATOM;
                        state.sExprQuote = false;
                      }
                    }
                  }
                } else {
                  stream.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/);
                  if (keywords && keywords.propertyIsEnumerable(stream.current())) {
                    returnType = BUILTIN;
                  } else
                    returnType = "variable";
                }
            }
            return typeof state.sExprComment == "number" ? COMMENT : typeof state.sExprQuote == "number" ? ATOM : returnType;
          },
          indent: function(state) {
            if (state.indentStack == null)
              return state.indentation;
            return state.indentStack.indent;
          },
          closeBrackets: { pairs: '()[]{}""' },
          lineComment: ";;"
        };
      });
      CodeMirror2.defineMIME("text/x-scheme", "scheme");
    });
  }
});

// mode/shell/shell.js
var require_shell = __commonJS({
  "mode/shell/shell.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("shell", function() {
        var words = {};
        function define2(style, dict) {
          for (var i = 0; i < dict.length; i++) {
            words[dict[i]] = style;
          }
        }
        ;
        var commonAtoms = ["true", "false"];
        var commonKeywords = [
          "if",
          "then",
          "do",
          "else",
          "elif",
          "while",
          "until",
          "for",
          "in",
          "esac",
          "fi",
          "fin",
          "fil",
          "done",
          "exit",
          "set",
          "unset",
          "export",
          "function"
        ];
        var commonCommands = [
          "ab",
          "awk",
          "bash",
          "beep",
          "cat",
          "cc",
          "cd",
          "chown",
          "chmod",
          "chroot",
          "clear",
          "cp",
          "curl",
          "cut",
          "diff",
          "echo",
          "find",
          "gawk",
          "gcc",
          "get",
          "git",
          "grep",
          "hg",
          "kill",
          "killall",
          "ln",
          "ls",
          "make",
          "mkdir",
          "openssl",
          "mv",
          "nc",
          "nl",
          "node",
          "npm",
          "ping",
          "ps",
          "restart",
          "rm",
          "rmdir",
          "sed",
          "service",
          "sh",
          "shopt",
          "shred",
          "source",
          "sort",
          "sleep",
          "ssh",
          "start",
          "stop",
          "su",
          "sudo",
          "svn",
          "tee",
          "telnet",
          "top",
          "touch",
          "vi",
          "vim",
          "wall",
          "wc",
          "wget",
          "who",
          "write",
          "yes",
          "zsh"
        ];
        CodeMirror2.registerHelper("hintWords", "shell", commonAtoms.concat(commonKeywords, commonCommands));
        define2("atom", commonAtoms);
        define2("keyword", commonKeywords);
        define2("builtin", commonCommands);
        function tokenBase(stream, state) {
          if (stream.eatSpace())
            return null;
          var sol = stream.sol();
          var ch = stream.next();
          if (ch === "\\") {
            stream.next();
            return null;
          }
          if (ch === "'" || ch === '"' || ch === "`") {
            state.tokens.unshift(tokenString(ch, ch === "`" ? "quote" : "string"));
            return tokenize(stream, state);
          }
          if (ch === "#") {
            if (sol && stream.eat("!")) {
              stream.skipToEnd();
              return "meta";
            }
            stream.skipToEnd();
            return "comment";
          }
          if (ch === "$") {
            state.tokens.unshift(tokenDollar);
            return tokenize(stream, state);
          }
          if (ch === "+" || ch === "=") {
            return "operator";
          }
          if (ch === "-") {
            stream.eat("-");
            stream.eatWhile(/\w/);
            return "attribute";
          }
          if (/\d/.test(ch)) {
            stream.eatWhile(/\d/);
            if (stream.eol() || !/\w/.test(stream.peek())) {
              return "number";
            }
          }
          stream.eatWhile(/[\w-]/);
          var cur = stream.current();
          if (stream.peek() === "=" && /\w+/.test(cur))
            return "def";
          return words.hasOwnProperty(cur) ? words[cur] : null;
        }
        function tokenString(quote, style) {
          var close = quote == "(" ? ")" : quote == "{" ? "}" : quote;
          return function(stream, state) {
            var next, escaped = false;
            while ((next = stream.next()) != null) {
              if (next === close && !escaped) {
                state.tokens.shift();
                break;
              } else if (next === "$" && !escaped && quote !== "'" && stream.peek() != close) {
                escaped = true;
                stream.backUp(1);
                state.tokens.unshift(tokenDollar);
                break;
              } else if (!escaped && quote !== close && next === quote) {
                state.tokens.unshift(tokenString(quote, style));
                return tokenize(stream, state);
              } else if (!escaped && /['"]/.test(next) && !/['"]/.test(quote)) {
                state.tokens.unshift(tokenStringStart(next, "string"));
                stream.backUp(1);
                break;
              }
              escaped = !escaped && next === "\\";
            }
            return style;
          };
        }
        ;
        function tokenStringStart(quote, style) {
          return function(stream, state) {
            state.tokens[0] = tokenString(quote, style);
            stream.next();
            return tokenize(stream, state);
          };
        }
        var tokenDollar = function(stream, state) {
          if (state.tokens.length > 1)
            stream.eat("$");
          var ch = stream.next();
          if (/['"({]/.test(ch)) {
            state.tokens[0] = tokenString(ch, ch == "(" ? "quote" : ch == "{" ? "def" : "string");
            return tokenize(stream, state);
          }
          if (!/\d/.test(ch))
            stream.eatWhile(/\w/);
          state.tokens.shift();
          return "def";
        };
        function tokenize(stream, state) {
          return (state.tokens[0] || tokenBase)(stream, state);
        }
        ;
        return {
          startState: function() {
            return { tokens: [] };
          },
          token: function(stream, state) {
            return tokenize(stream, state);
          },
          closeBrackets: "()[]{}''\"\"``",
          lineComment: "#",
          fold: "brace"
        };
      });
      CodeMirror2.defineMIME("text/x-sh", "shell");
      CodeMirror2.defineMIME("application/x-sh", "shell");
    });
  }
});

// mode/sieve/sieve.js
var require_sieve = __commonJS({
  "mode/sieve/sieve.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("sieve", function(config) {
        function words(str) {
          var obj = {}, words2 = str.split(" ");
          for (var i = 0; i < words2.length; ++i)
            obj[words2[i]] = true;
          return obj;
        }
        var keywords = words("if elsif else stop require");
        var atoms = words("true false not");
        var indentUnit = config.indentUnit;
        function tokenBase(stream, state) {
          var ch = stream.next();
          if (ch == "/" && stream.eat("*")) {
            state.tokenize = tokenCComment;
            return tokenCComment(stream, state);
          }
          if (ch === "#") {
            stream.skipToEnd();
            return "comment";
          }
          if (ch == '"') {
            state.tokenize = tokenString(ch);
            return state.tokenize(stream, state);
          }
          if (ch == "(") {
            state._indent.push("(");
            state._indent.push("{");
            return null;
          }
          if (ch === "{") {
            state._indent.push("{");
            return null;
          }
          if (ch == ")") {
            state._indent.pop();
            state._indent.pop();
          }
          if (ch === "}") {
            state._indent.pop();
            return null;
          }
          if (ch == ",")
            return null;
          if (ch == ";")
            return null;
          if (/[{}\(\),;]/.test(ch))
            return null;
          if (/\d/.test(ch)) {
            stream.eatWhile(/[\d]/);
            stream.eat(/[KkMmGg]/);
            return "number";
          }
          if (ch == ":") {
            stream.eatWhile(/[a-zA-Z_]/);
            stream.eatWhile(/[a-zA-Z0-9_]/);
            return "operator";
          }
          stream.eatWhile(/\w/);
          var cur = stream.current();
          if (cur == "text" && stream.eat(":")) {
            state.tokenize = tokenMultiLineString;
            return "string";
          }
          if (keywords.propertyIsEnumerable(cur))
            return "keyword";
          if (atoms.propertyIsEnumerable(cur))
            return "atom";
          return null;
        }
        function tokenMultiLineString(stream, state) {
          state._multiLineString = true;
          if (!stream.sol()) {
            stream.eatSpace();
            if (stream.peek() == "#") {
              stream.skipToEnd();
              return "comment";
            }
            stream.skipToEnd();
            return "string";
          }
          if (stream.next() == "." && stream.eol()) {
            state._multiLineString = false;
            state.tokenize = tokenBase;
          }
          return "string";
        }
        function tokenCComment(stream, state) {
          var maybeEnd = false, ch;
          while ((ch = stream.next()) != null) {
            if (maybeEnd && ch == "/") {
              state.tokenize = tokenBase;
              break;
            }
            maybeEnd = ch == "*";
          }
          return "comment";
        }
        function tokenString(quote) {
          return function(stream, state) {
            var escaped = false, ch;
            while ((ch = stream.next()) != null) {
              if (ch == quote && !escaped)
                break;
              escaped = !escaped && ch == "\\";
            }
            if (!escaped)
              state.tokenize = tokenBase;
            return "string";
          };
        }
        return {
          startState: function(base) {
            return {
              tokenize: tokenBase,
              baseIndent: base || 0,
              _indent: []
            };
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            return (state.tokenize || tokenBase)(stream, state);
          },
          indent: function(state, _textAfter) {
            var length = state._indent.length;
            if (_textAfter && _textAfter[0] == "}")
              length--;
            if (length < 0)
              length = 0;
            return length * indentUnit;
          },
          electricChars: "}"
        };
      });
      CodeMirror2.defineMIME("application/sieve", "sieve");
    });
  }
});

// mode/slim/slim.js
var require_slim = __commonJS({
  "mode/slim/slim.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror(), require_htmlmixed(), require_ruby());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror", "../htmlmixed/htmlmixed", "../ruby/ruby"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("slim", function(config) {
        var htmlMode = CodeMirror2.getMode(config, { name: "htmlmixed" });
        var rubyMode = CodeMirror2.getMode(config, "ruby");
        var modes = { html: htmlMode, ruby: rubyMode };
        var embedded = {
          ruby: "ruby",
          javascript: "javascript",
          css: "text/css",
          sass: "text/x-sass",
          scss: "text/x-scss",
          less: "text/x-less",
          styl: "text/x-styl",
          // no highlighting so far
          coffee: "coffeescript",
          asciidoc: "text/x-asciidoc",
          markdown: "text/x-markdown",
          textile: "text/x-textile",
          // no highlighting so far
          creole: "text/x-creole",
          // no highlighting so far
          wiki: "text/x-wiki",
          // no highlighting so far
          mediawiki: "text/x-mediawiki",
          // no highlighting so far
          rdoc: "text/x-rdoc",
          // no highlighting so far
          builder: "text/x-builder",
          // no highlighting so far
          nokogiri: "text/x-nokogiri",
          // no highlighting so far
          erb: "application/x-erb"
        };
        var embeddedRegexp = function(map) {
          var arr = [];
          for (var key in map)
            arr.push(key);
          return new RegExp("^(" + arr.join("|") + "):");
        }(embedded);
        var styleMap = {
          "commentLine": "comment",
          "slimSwitch": "operator special",
          "slimTag": "tag",
          "slimId": "attribute def",
          "slimClass": "attribute qualifier",
          "slimAttribute": "attribute",
          "slimSubmode": "keyword special",
          "closeAttributeTag": null,
          "slimDoctype": null,
          "lineContinuation": null
        };
        var closing = {
          "{": "}",
          "[": "]",
          "(": ")"
        };
        var nameStartChar = "_a-zA-Z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD";
        var nameChar = nameStartChar + "\\-0-9\xB7\u0300-\u036F\u203F-\u2040";
        var nameRegexp = new RegExp("^[:" + nameStartChar + "](?::[" + nameChar + "]|[" + nameChar + "]*)");
        var attributeNameRegexp = new RegExp("^[:" + nameStartChar + "][:\\." + nameChar + "]*(?=\\s*=)");
        var wrappedAttributeNameRegexp = new RegExp("^[:" + nameStartChar + "][:\\." + nameChar + "]*");
        var classNameRegexp = /^\.-?[_a-zA-Z]+[\w\-]*/;
        var classIdRegexp = /^#[_a-zA-Z]+[\w\-]*/;
        function backup(pos, tokenize, style) {
          var restore = function(stream, state) {
            state.tokenize = tokenize;
            if (stream.pos < pos) {
              stream.pos = pos;
              return style;
            }
            return state.tokenize(stream, state);
          };
          return function(stream, state) {
            state.tokenize = restore;
            return tokenize(stream, state);
          };
        }
        function maybeBackup(stream, state, pat, offset, style) {
          var cur = stream.current();
          var idx = cur.search(pat);
          if (idx > -1) {
            state.tokenize = backup(stream.pos, state.tokenize, style);
            stream.backUp(cur.length - idx - offset);
          }
          return style;
        }
        function continueLine(state, column) {
          state.stack = {
            parent: state.stack,
            style: "continuation",
            indented: column,
            tokenize: state.line
          };
          state.line = state.tokenize;
        }
        function finishContinue(state) {
          if (state.line == state.tokenize) {
            state.line = state.stack.tokenize;
            state.stack = state.stack.parent;
          }
        }
        function lineContinuable(column, tokenize) {
          return function(stream, state) {
            finishContinue(state);
            if (stream.match(/^\\$/)) {
              continueLine(state, column);
              return "lineContinuation";
            }
            var style = tokenize(stream, state);
            if (stream.eol() && stream.current().match(/(?:^|[^\\])(?:\\\\)*\\$/)) {
              stream.backUp(1);
            }
            return style;
          };
        }
        function commaContinuable(column, tokenize) {
          return function(stream, state) {
            finishContinue(state);
            var style = tokenize(stream, state);
            if (stream.eol() && stream.current().match(/,$/)) {
              continueLine(state, column);
            }
            return style;
          };
        }
        function rubyInQuote(endQuote, tokenize) {
          return function(stream, state) {
            var ch = stream.peek();
            if (ch == endQuote && state.rubyState.tokenize.length == 1) {
              stream.next();
              state.tokenize = tokenize;
              return "closeAttributeTag";
            } else {
              return ruby(stream, state);
            }
          };
        }
        function startRubySplat(tokenize) {
          var rubyState;
          var runSplat = function(stream, state) {
            if (state.rubyState.tokenize.length == 1 && !state.rubyState.context.prev) {
              stream.backUp(1);
              if (stream.eatSpace()) {
                state.rubyState = rubyState;
                state.tokenize = tokenize;
                return tokenize(stream, state);
              }
              stream.next();
            }
            return ruby(stream, state);
          };
          return function(stream, state) {
            rubyState = state.rubyState;
            state.rubyState = CodeMirror2.startState(rubyMode);
            state.tokenize = runSplat;
            return ruby(stream, state);
          };
        }
        function ruby(stream, state) {
          return rubyMode.token(stream, state.rubyState);
        }
        function htmlLine(stream, state) {
          if (stream.match(/^\\$/)) {
            return "lineContinuation";
          }
          return html(stream, state);
        }
        function html(stream, state) {
          if (stream.match(/^#\{/)) {
            state.tokenize = rubyInQuote("}", state.tokenize);
            return null;
          }
          return maybeBackup(stream, state, /[^\\]#\{/, 1, htmlMode.token(stream, state.htmlState));
        }
        function startHtmlLine(lastTokenize) {
          return function(stream, state) {
            var style = htmlLine(stream, state);
            if (stream.eol())
              state.tokenize = lastTokenize;
            return style;
          };
        }
        function startHtmlMode(stream, state, offset) {
          state.stack = {
            parent: state.stack,
            style: "html",
            indented: stream.column() + offset,
            // pipe + space
            tokenize: state.line
          };
          state.line = state.tokenize = html;
          return null;
        }
        function comment(stream, state) {
          stream.skipToEnd();
          return state.stack.style;
        }
        function commentMode(stream, state) {
          state.stack = {
            parent: state.stack,
            style: "comment",
            indented: state.indented + 1,
            tokenize: state.line
          };
          state.line = comment;
          return comment(stream, state);
        }
        function attributeWrapper(stream, state) {
          if (stream.eat(state.stack.endQuote)) {
            state.line = state.stack.line;
            state.tokenize = state.stack.tokenize;
            state.stack = state.stack.parent;
            return null;
          }
          if (stream.match(wrappedAttributeNameRegexp)) {
            state.tokenize = attributeWrapperAssign;
            return "slimAttribute";
          }
          stream.next();
          return null;
        }
        function attributeWrapperAssign(stream, state) {
          if (stream.match(/^==?/)) {
            state.tokenize = attributeWrapperValue;
            return null;
          }
          return attributeWrapper(stream, state);
        }
        function attributeWrapperValue(stream, state) {
          var ch = stream.peek();
          if (ch == '"' || ch == "'") {
            state.tokenize = readQuoted(ch, "string", true, false, attributeWrapper);
            stream.next();
            return state.tokenize(stream, state);
          }
          if (ch == "[") {
            return startRubySplat(attributeWrapper)(stream, state);
          }
          if (stream.match(/^(true|false|nil)\b/)) {
            state.tokenize = attributeWrapper;
            return "keyword";
          }
          return startRubySplat(attributeWrapper)(stream, state);
        }
        function startAttributeWrapperMode(state, endQuote, tokenize) {
          state.stack = {
            parent: state.stack,
            style: "wrapper",
            indented: state.indented + 1,
            tokenize,
            line: state.line,
            endQuote
          };
          state.line = state.tokenize = attributeWrapper;
          return null;
        }
        function sub(stream, state) {
          if (stream.match(/^#\{/)) {
            state.tokenize = rubyInQuote("}", state.tokenize);
            return null;
          }
          var subStream = new CodeMirror2.StringStream(stream.string.slice(state.stack.indented), stream.tabSize);
          subStream.pos = stream.pos - state.stack.indented;
          subStream.start = stream.start - state.stack.indented;
          subStream.lastColumnPos = stream.lastColumnPos - state.stack.indented;
          subStream.lastColumnValue = stream.lastColumnValue - state.stack.indented;
          var style = state.subMode.token(subStream, state.subState);
          stream.pos = subStream.pos + state.stack.indented;
          return style;
        }
        function firstSub(stream, state) {
          state.stack.indented = stream.column();
          state.line = state.tokenize = sub;
          return state.tokenize(stream, state);
        }
        function createMode(mode2) {
          var query = embedded[mode2];
          var spec = CodeMirror2.mimeModes[query];
          if (spec) {
            return CodeMirror2.getMode(config, spec);
          }
          var factory = CodeMirror2.modes[query];
          if (factory) {
            return factory(config, { name: query });
          }
          return CodeMirror2.getMode(config, "null");
        }
        function getMode(mode2) {
          if (!modes.hasOwnProperty(mode2)) {
            return modes[mode2] = createMode(mode2);
          }
          return modes[mode2];
        }
        function startSubMode(mode2, state) {
          var subMode = getMode(mode2);
          var subState = CodeMirror2.startState(subMode);
          state.subMode = subMode;
          state.subState = subState;
          state.stack = {
            parent: state.stack,
            style: "sub",
            indented: state.indented + 1,
            tokenize: state.line
          };
          state.line = state.tokenize = firstSub;
          return "slimSubmode";
        }
        function doctypeLine(stream, _state) {
          stream.skipToEnd();
          return "slimDoctype";
        }
        function startLine(stream, state) {
          var ch = stream.peek();
          if (ch == "<") {
            return (state.tokenize = startHtmlLine(state.tokenize))(stream, state);
          }
          if (stream.match(/^[|']/)) {
            return startHtmlMode(stream, state, 1);
          }
          if (stream.match(/^\/(!|\[\w+])?/)) {
            return commentMode(stream, state);
          }
          if (stream.match(/^(-|==?[<>]?)/)) {
            state.tokenize = lineContinuable(stream.column(), commaContinuable(stream.column(), ruby));
            return "slimSwitch";
          }
          if (stream.match(/^doctype\b/)) {
            state.tokenize = doctypeLine;
            return "keyword";
          }
          var m = stream.match(embeddedRegexp);
          if (m) {
            return startSubMode(m[1], state);
          }
          return slimTag(stream, state);
        }
        function slim(stream, state) {
          if (state.startOfLine) {
            return startLine(stream, state);
          }
          return slimTag(stream, state);
        }
        function slimTag(stream, state) {
          if (stream.eat("*")) {
            state.tokenize = startRubySplat(slimTagExtras);
            return null;
          }
          if (stream.match(nameRegexp)) {
            state.tokenize = slimTagExtras;
            return "slimTag";
          }
          return slimClass(stream, state);
        }
        function slimTagExtras(stream, state) {
          if (stream.match(/^(<>?|><?)/)) {
            state.tokenize = slimClass;
            return null;
          }
          return slimClass(stream, state);
        }
        function slimClass(stream, state) {
          if (stream.match(classIdRegexp)) {
            state.tokenize = slimClass;
            return "slimId";
          }
          if (stream.match(classNameRegexp)) {
            state.tokenize = slimClass;
            return "slimClass";
          }
          return slimAttribute(stream, state);
        }
        function slimAttribute(stream, state) {
          if (stream.match(/^([\[\{\(])/)) {
            return startAttributeWrapperMode(state, closing[RegExp.$1], slimAttribute);
          }
          if (stream.match(attributeNameRegexp)) {
            state.tokenize = slimAttributeAssign;
            return "slimAttribute";
          }
          if (stream.peek() == "*") {
            stream.next();
            state.tokenize = startRubySplat(slimContent);
            return null;
          }
          return slimContent(stream, state);
        }
        function slimAttributeAssign(stream, state) {
          if (stream.match(/^==?/)) {
            state.tokenize = slimAttributeValue;
            return null;
          }
          return slimAttribute(stream, state);
        }
        function slimAttributeValue(stream, state) {
          var ch = stream.peek();
          if (ch == '"' || ch == "'") {
            state.tokenize = readQuoted(ch, "string", true, false, slimAttribute);
            stream.next();
            return state.tokenize(stream, state);
          }
          if (ch == "[") {
            return startRubySplat(slimAttribute)(stream, state);
          }
          if (ch == ":") {
            return startRubySplat(slimAttributeSymbols)(stream, state);
          }
          if (stream.match(/^(true|false|nil)\b/)) {
            state.tokenize = slimAttribute;
            return "keyword";
          }
          return startRubySplat(slimAttribute)(stream, state);
        }
        function slimAttributeSymbols(stream, state) {
          stream.backUp(1);
          if (stream.match(/^[^\s],(?=:)/)) {
            state.tokenize = startRubySplat(slimAttributeSymbols);
            return null;
          }
          stream.next();
          return slimAttribute(stream, state);
        }
        function readQuoted(quote, style, embed, unescaped, nextTokenize) {
          return function(stream, state) {
            finishContinue(state);
            var fresh = stream.current().length == 0;
            if (stream.match(/^\\$/, fresh)) {
              if (!fresh)
                return style;
              continueLine(state, state.indented);
              return "lineContinuation";
            }
            if (stream.match(/^#\{/, fresh)) {
              if (!fresh)
                return style;
              state.tokenize = rubyInQuote("}", state.tokenize);
              return null;
            }
            var escaped = false, ch;
            while ((ch = stream.next()) != null) {
              if (ch == quote && (unescaped || !escaped)) {
                state.tokenize = nextTokenize;
                break;
              }
              if (embed && ch == "#" && !escaped) {
                if (stream.eat("{")) {
                  stream.backUp(2);
                  break;
                }
              }
              escaped = !escaped && ch == "\\";
            }
            if (stream.eol() && escaped) {
              stream.backUp(1);
            }
            return style;
          };
        }
        function slimContent(stream, state) {
          if (stream.match(/^==?/)) {
            state.tokenize = ruby;
            return "slimSwitch";
          }
          if (stream.match(/^\/$/)) {
            state.tokenize = slim;
            return null;
          }
          if (stream.match(/^:/)) {
            state.tokenize = slimTag;
            return "slimSwitch";
          }
          startHtmlMode(stream, state, 0);
          return state.tokenize(stream, state);
        }
        var mode = {
          // default to html mode
          startState: function() {
            var htmlState = CodeMirror2.startState(htmlMode);
            var rubyState = CodeMirror2.startState(rubyMode);
            return {
              htmlState,
              rubyState,
              stack: null,
              last: null,
              tokenize: slim,
              line: slim,
              indented: 0
            };
          },
          copyState: function(state) {
            return {
              htmlState: CodeMirror2.copyState(htmlMode, state.htmlState),
              rubyState: CodeMirror2.copyState(rubyMode, state.rubyState),
              subMode: state.subMode,
              subState: state.subMode && CodeMirror2.copyState(state.subMode, state.subState),
              stack: state.stack,
              last: state.last,
              tokenize: state.tokenize,
              line: state.line
            };
          },
          token: function(stream, state) {
            if (stream.sol()) {
              state.indented = stream.indentation();
              state.startOfLine = true;
              state.tokenize = state.line;
              while (state.stack && state.stack.indented > state.indented && state.last != "slimSubmode") {
                state.line = state.tokenize = state.stack.tokenize;
                state.stack = state.stack.parent;
                state.subMode = null;
                state.subState = null;
              }
            }
            if (stream.eatSpace())
              return null;
            var style = state.tokenize(stream, state);
            state.startOfLine = false;
            if (style)
              state.last = style;
            return styleMap.hasOwnProperty(style) ? styleMap[style] : style;
          },
          blankLine: function(state) {
            if (state.subMode && state.subMode.blankLine) {
              return state.subMode.blankLine(state.subState);
            }
          },
          innerMode: function(state) {
            if (state.subMode)
              return { state: state.subState, mode: state.subMode };
            return { state, mode };
          }
          //indent: function(state) {
          //  return state.indented;
          //}
        };
        return mode;
      }, "htmlmixed", "ruby");
      CodeMirror2.defineMIME("text/x-slim", "slim");
      CodeMirror2.defineMIME("application/x-slim", "slim");
    });
  }
});

// mode/smalltalk/smalltalk.js
var require_smalltalk = __commonJS({
  "mode/smalltalk/smalltalk.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("smalltalk", function(config) {
        var specialChars = /[+\-\/\\*~<>=@%|&?!.,:;^]/;
        var keywords = /true|false|nil|self|super|thisContext/;
        var Context = function(tokenizer, parent) {
          this.next = tokenizer;
          this.parent = parent;
        };
        var Token = function(name, context, eos) {
          this.name = name;
          this.context = context;
          this.eos = eos;
        };
        var State = function() {
          this.context = new Context(next, null);
          this.expectVariable = true;
          this.indentation = 0;
          this.userIndentationDelta = 0;
        };
        State.prototype.userIndent = function(indentation) {
          this.userIndentationDelta = indentation > 0 ? indentation / config.indentUnit - this.indentation : 0;
        };
        var next = function(stream, context, state) {
          var token = new Token(null, context, false);
          var aChar = stream.next();
          if (aChar === '"') {
            token = nextComment(stream, new Context(nextComment, context));
          } else if (aChar === "'") {
            token = nextString(stream, new Context(nextString, context));
          } else if (aChar === "#") {
            if (stream.peek() === "'") {
              stream.next();
              token = nextSymbol(stream, new Context(nextSymbol, context));
            } else {
              if (stream.eatWhile(/[^\s.{}\[\]()]/))
                token.name = "string-2";
              else
                token.name = "meta";
            }
          } else if (aChar === "$") {
            if (stream.next() === "<") {
              stream.eatWhile(/[^\s>]/);
              stream.next();
            }
            token.name = "string-2";
          } else if (aChar === "|" && state.expectVariable) {
            token.context = new Context(nextTemporaries, context);
          } else if (/[\[\]{}()]/.test(aChar)) {
            token.name = "bracket";
            token.eos = /[\[{(]/.test(aChar);
            if (aChar === "[") {
              state.indentation++;
            } else if (aChar === "]") {
              state.indentation = Math.max(0, state.indentation - 1);
            }
          } else if (specialChars.test(aChar)) {
            stream.eatWhile(specialChars);
            token.name = "operator";
            token.eos = aChar !== ";";
          } else if (/\d/.test(aChar)) {
            stream.eatWhile(/[\w\d]/);
            token.name = "number";
          } else if (/[\w_]/.test(aChar)) {
            stream.eatWhile(/[\w\d_]/);
            token.name = state.expectVariable ? keywords.test(stream.current()) ? "keyword" : "variable" : null;
          } else {
            token.eos = state.expectVariable;
          }
          return token;
        };
        var nextComment = function(stream, context) {
          stream.eatWhile(/[^"]/);
          return new Token("comment", stream.eat('"') ? context.parent : context, true);
        };
        var nextString = function(stream, context) {
          stream.eatWhile(/[^']/);
          return new Token("string", stream.eat("'") ? context.parent : context, false);
        };
        var nextSymbol = function(stream, context) {
          stream.eatWhile(/[^']/);
          return new Token("string-2", stream.eat("'") ? context.parent : context, false);
        };
        var nextTemporaries = function(stream, context) {
          var token = new Token(null, context, false);
          var aChar = stream.next();
          if (aChar === "|") {
            token.context = context.parent;
            token.eos = true;
          } else {
            stream.eatWhile(/[^|]/);
            token.name = "variable";
          }
          return token;
        };
        return {
          startState: function() {
            return new State();
          },
          token: function(stream, state) {
            state.userIndent(stream.indentation());
            if (stream.eatSpace()) {
              return null;
            }
            var token = state.context.next(stream, state.context, state);
            state.context = token.context;
            state.expectVariable = token.eos;
            return token.name;
          },
          blankLine: function(state) {
            state.userIndent(0);
          },
          indent: function(state, textAfter) {
            var i = state.context.next === next && textAfter && textAfter.charAt(0) === "]" ? -1 : state.userIndentationDelta;
            return (state.indentation + i) * config.indentUnit;
          },
          electricChars: "]"
        };
      });
      CodeMirror2.defineMIME("text/x-stsrc", { name: "smalltalk" });
    });
  }
});

// mode/smarty/smarty.js
var require_smarty = __commonJS({
  "mode/smarty/smarty.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("smarty", function(config, parserConf) {
        var rightDelimiter = parserConf.rightDelimiter || "}";
        var leftDelimiter = parserConf.leftDelimiter || "{";
        var version = parserConf.version || 2;
        var baseMode = CodeMirror2.getMode(config, parserConf.baseMode || "null");
        var keyFunctions = ["debug", "extends", "function", "include", "literal"];
        var regs = {
          operatorChars: /[+\-*&%=<>!?]/,
          validIdentifier: /[a-zA-Z0-9_]/,
          stringChar: /['"]/
        };
        var last;
        function cont(style, lastType) {
          last = lastType;
          return style;
        }
        function chain(stream, state, parser) {
          state.tokenize = parser;
          return parser(stream, state);
        }
        function doesNotCount(stream, pos) {
          if (pos == null)
            pos = stream.pos;
          return version === 3 && leftDelimiter == "{" && (pos == stream.string.length || /\s/.test(stream.string.charAt(pos)));
        }
        function tokenTop(stream, state) {
          var string = stream.string;
          for (var scan = stream.pos; ; ) {
            var nextMatch = string.indexOf(leftDelimiter, scan);
            scan = nextMatch + leftDelimiter.length;
            if (nextMatch == -1 || !doesNotCount(stream, nextMatch + leftDelimiter.length))
              break;
          }
          if (nextMatch == stream.pos) {
            stream.match(leftDelimiter);
            if (stream.eat("*")) {
              return chain(stream, state, tokenBlock("comment", "*" + rightDelimiter));
            } else {
              state.depth++;
              state.tokenize = tokenSmarty;
              last = "startTag";
              return "tag";
            }
          }
          if (nextMatch > -1)
            stream.string = string.slice(0, nextMatch);
          var token = baseMode.token(stream, state.base);
          if (nextMatch > -1)
            stream.string = string;
          return token;
        }
        function tokenSmarty(stream, state) {
          if (stream.match(rightDelimiter, true)) {
            if (version === 3) {
              state.depth--;
              if (state.depth <= 0) {
                state.tokenize = tokenTop;
              }
            } else {
              state.tokenize = tokenTop;
            }
            return cont("tag", null);
          }
          if (stream.match(leftDelimiter, true)) {
            state.depth++;
            return cont("tag", "startTag");
          }
          var ch = stream.next();
          if (ch == "$") {
            stream.eatWhile(regs.validIdentifier);
            return cont("variable-2", "variable");
          } else if (ch == "|") {
            return cont("operator", "pipe");
          } else if (ch == ".") {
            return cont("operator", "property");
          } else if (regs.stringChar.test(ch)) {
            state.tokenize = tokenAttribute(ch);
            return cont("string", "string");
          } else if (regs.operatorChars.test(ch)) {
            stream.eatWhile(regs.operatorChars);
            return cont("operator", "operator");
          } else if (ch == "[" || ch == "]") {
            return cont("bracket", "bracket");
          } else if (ch == "(" || ch == ")") {
            return cont("bracket", "operator");
          } else if (/\d/.test(ch)) {
            stream.eatWhile(/\d/);
            return cont("number", "number");
          } else {
            if (state.last == "variable") {
              if (ch == "@") {
                stream.eatWhile(regs.validIdentifier);
                return cont("property", "property");
              } else if (ch == "|") {
                stream.eatWhile(regs.validIdentifier);
                return cont("qualifier", "modifier");
              }
            } else if (state.last == "pipe") {
              stream.eatWhile(regs.validIdentifier);
              return cont("qualifier", "modifier");
            } else if (state.last == "whitespace") {
              stream.eatWhile(regs.validIdentifier);
              return cont("attribute", "modifier");
            }
            if (state.last == "property") {
              stream.eatWhile(regs.validIdentifier);
              return cont("property", null);
            } else if (/\s/.test(ch)) {
              last = "whitespace";
              return null;
            }
            var str = "";
            if (ch != "/") {
              str += ch;
            }
            var c = null;
            while (c = stream.eat(regs.validIdentifier)) {
              str += c;
            }
            for (var i = 0, j = keyFunctions.length; i < j; i++) {
              if (keyFunctions[i] == str) {
                return cont("keyword", "keyword");
              }
            }
            if (/\s/.test(ch)) {
              return null;
            }
            return cont("tag", "tag");
          }
        }
        function tokenAttribute(quote) {
          return function(stream, state) {
            var prevChar = null;
            var currChar = null;
            while (!stream.eol()) {
              currChar = stream.peek();
              if (stream.next() == quote && prevChar !== "\\") {
                state.tokenize = tokenSmarty;
                break;
              }
              prevChar = currChar;
            }
            return "string";
          };
        }
        function tokenBlock(style, terminator) {
          return function(stream, state) {
            while (!stream.eol()) {
              if (stream.match(terminator)) {
                state.tokenize = tokenTop;
                break;
              }
              stream.next();
            }
            return style;
          };
        }
        return {
          startState: function() {
            return {
              base: CodeMirror2.startState(baseMode),
              tokenize: tokenTop,
              last: null,
              depth: 0
            };
          },
          copyState: function(state) {
            return {
              base: CodeMirror2.copyState(baseMode, state.base),
              tokenize: state.tokenize,
              last: state.last,
              depth: state.depth
            };
          },
          innerMode: function(state) {
            if (state.tokenize == tokenTop)
              return { mode: baseMode, state: state.base };
          },
          token: function(stream, state) {
            var style = state.tokenize(stream, state);
            state.last = last;
            return style;
          },
          indent: function(state, text, line) {
            if (state.tokenize == tokenTop && baseMode.indent)
              return baseMode.indent(state.base, text, line);
            else
              return CodeMirror2.Pass;
          },
          blockCommentStart: leftDelimiter + "*",
          blockCommentEnd: "*" + rightDelimiter
        };
      });
      CodeMirror2.defineMIME("text/x-smarty", "smarty");
    });
  }
});

// mode/solr/solr.js
var require_solr = __commonJS({
  "mode/solr/solr.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("solr", function() {
        "use strict";
        var isStringChar = /[^\s\|\!\+\-\*\?\~\^\&\:\(\)\[\]\{\}\"\\]/;
        var isOperatorChar = /[\|\!\+\-\*\?\~\^\&]/;
        var isOperatorString = /^(OR|AND|NOT|TO)$/i;
        function isNumber(word) {
          return parseFloat(word).toString() === word;
        }
        function tokenString(quote) {
          return function(stream, state) {
            var escaped = false, next;
            while ((next = stream.next()) != null) {
              if (next == quote && !escaped)
                break;
              escaped = !escaped && next == "\\";
            }
            if (!escaped)
              state.tokenize = tokenBase;
            return "string";
          };
        }
        function tokenOperator(operator) {
          return function(stream, state) {
            var style = "operator";
            if (operator == "+")
              style += " positive";
            else if (operator == "-")
              style += " negative";
            else if (operator == "|")
              stream.eat(/\|/);
            else if (operator == "&")
              stream.eat(/\&/);
            else if (operator == "^")
              style += " boost";
            state.tokenize = tokenBase;
            return style;
          };
        }
        function tokenWord(ch) {
          return function(stream, state) {
            var word = ch;
            while ((ch = stream.peek()) && ch.match(isStringChar) != null) {
              word += stream.next();
            }
            state.tokenize = tokenBase;
            if (isOperatorString.test(word))
              return "operator";
            else if (isNumber(word))
              return "number";
            else if (stream.peek() == ":")
              return "field";
            else
              return "string";
          };
        }
        function tokenBase(stream, state) {
          var ch = stream.next();
          if (ch == '"')
            state.tokenize = tokenString(ch);
          else if (isOperatorChar.test(ch))
            state.tokenize = tokenOperator(ch);
          else if (isStringChar.test(ch))
            state.tokenize = tokenWord(ch);
          return state.tokenize != tokenBase ? state.tokenize(stream, state) : null;
        }
        return {
          startState: function() {
            return {
              tokenize: tokenBase
            };
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            return state.tokenize(stream, state);
          }
        };
      });
      CodeMirror2.defineMIME("text/x-solr", "solr");
    });
  }
});

// mode/soy/soy.js
var require_soy = __commonJS({
  "mode/soy/soy.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror(), require_htmlmixed());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror", "../htmlmixed/htmlmixed"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      var paramData = { noEndTag: true, soyState: "param-def" };
      var tags = {
        "alias": { noEndTag: true },
        "delpackage": { noEndTag: true },
        "namespace": { noEndTag: true, soyState: "namespace-def" },
        "@param": paramData,
        "@param?": paramData,
        "@inject": paramData,
        "@inject?": paramData,
        "@state": paramData,
        "template": { soyState: "templ-def", variableScope: true },
        "literal": {},
        "msg": {},
        "fallbackmsg": { noEndTag: true, reduceIndent: true },
        "select": {},
        "plural": {},
        "let": { soyState: "var-def" },
        "if": {},
        "elseif": { noEndTag: true, reduceIndent: true },
        "else": { noEndTag: true, reduceIndent: true },
        "switch": {},
        "case": { noEndTag: true, reduceIndent: true },
        "default": { noEndTag: true, reduceIndent: true },
        "foreach": { variableScope: true, soyState: "for-loop" },
        "ifempty": { noEndTag: true, reduceIndent: true },
        "for": { variableScope: true, soyState: "for-loop" },
        "call": { soyState: "templ-ref" },
        "param": { soyState: "param-ref" },
        "print": { noEndTag: true },
        "deltemplate": { soyState: "templ-def", variableScope: true },
        "delcall": { soyState: "templ-ref" },
        "log": {},
        "element": { variableScope: true }
      };
      var indentingTags = Object.keys(tags).filter(function(tag) {
        return !tags[tag].noEndTag || tags[tag].reduceIndent;
      });
      CodeMirror2.defineMode("soy", function(config) {
        var textMode = CodeMirror2.getMode(config, "text/plain");
        var modes = {
          html: CodeMirror2.getMode(config, { name: "text/html", multilineTagIndentFactor: 2, multilineTagIndentPastTag: false }),
          attributes: textMode,
          text: textMode,
          uri: textMode,
          trusted_resource_uri: textMode,
          css: CodeMirror2.getMode(config, "text/css"),
          js: CodeMirror2.getMode(config, { name: "text/javascript", statementIndent: 2 * config.indentUnit })
        };
        function last(array) {
          return array[array.length - 1];
        }
        function tokenUntil(stream, state, untilRegExp) {
          if (stream.sol()) {
            for (var indent = 0; indent < state.indent; indent++) {
              if (!stream.eat(/\s/))
                break;
            }
            if (indent)
              return null;
          }
          var oldString = stream.string;
          var match = untilRegExp.exec(oldString.substr(stream.pos));
          if (match) {
            stream.string = oldString.substr(0, stream.pos + match.index);
          }
          var result = stream.hideFirstChars(state.indent, function() {
            var localState = last(state.localStates);
            return localState.mode.token(stream, localState.state);
          });
          stream.string = oldString;
          return result;
        }
        function contains(list, element) {
          while (list) {
            if (list.element === element)
              return true;
            list = list.next;
          }
          return false;
        }
        function prepend(list, element) {
          return {
            element,
            next: list
          };
        }
        function popcontext(state) {
          if (!state.context)
            return;
          if (state.context.scope) {
            state.variables = state.context.scope;
          }
          state.context = state.context.previousContext;
        }
        function ref(list, name, loose) {
          return contains(list, name) ? "variable-2" : loose ? "variable" : "variable-2 error";
        }
        function Context(previousContext, tag, scope) {
          this.previousContext = previousContext;
          this.tag = tag;
          this.kind = null;
          this.scope = scope;
        }
        function expression(stream, state) {
          var match;
          if (stream.match(/[[]/)) {
            state.soyState.push("list-literal");
            state.context = new Context(state.context, "list-literal", state.variables);
            state.lookupVariables = false;
            return null;
          } else if (stream.match(/map\b/)) {
            state.soyState.push("map-literal");
            return "keyword";
          } else if (stream.match(/record\b/)) {
            state.soyState.push("record-literal");
            return "keyword";
          } else if (stream.match(/([\w]+)(?=\()/)) {
            return "variable callee";
          } else if (match = stream.match(/^["']/)) {
            state.soyState.push("string");
            state.quoteKind = match[0];
            return "string";
          } else if (stream.match(/^[(]/)) {
            state.soyState.push("open-parentheses");
            return null;
          } else if (stream.match(/(null|true|false)(?!\w)/) || stream.match(/0x([0-9a-fA-F]{2,})/) || stream.match(/-?([0-9]*[.])?[0-9]+(e[0-9]*)?/)) {
            return "atom";
          } else if (stream.match(/(\||[+\-*\/%]|[=!]=|\?:|[<>]=?)/)) {
            return "operator";
          } else if (match = stream.match(/^\$([\w]+)/)) {
            return ref(state.variables, match[1], !state.lookupVariables);
          } else if (match = stream.match(/^\w+/)) {
            return /^(?:as|and|or|not|in|if)$/.test(match[0]) ? "keyword" : null;
          }
          stream.next();
          return null;
        }
        return {
          startState: function() {
            return {
              soyState: [],
              variables: prepend(null, "ij"),
              scopes: null,
              indent: 0,
              quoteKind: null,
              context: null,
              lookupVariables: true,
              // Is unknown variables considered an error
              localStates: [{
                mode: modes.html,
                state: CodeMirror2.startState(modes.html)
              }]
            };
          },
          copyState: function(state) {
            return {
              tag: state.tag,
              // Last seen Soy tag.
              soyState: state.soyState.concat([]),
              variables: state.variables,
              context: state.context,
              indent: state.indent,
              // Indentation of the following line.
              quoteKind: state.quoteKind,
              lookupVariables: state.lookupVariables,
              localStates: state.localStates.map(function(localState) {
                return {
                  mode: localState.mode,
                  state: CodeMirror2.copyState(localState.mode, localState.state)
                };
              })
            };
          },
          token: function(stream, state) {
            var match;
            switch (last(state.soyState)) {
              case "comment":
                if (stream.match(/^.*?\*\//)) {
                  state.soyState.pop();
                } else {
                  stream.skipToEnd();
                }
                if (!state.context || !state.context.scope) {
                  var paramRe = /@param\??\s+(\S+)/g;
                  var current = stream.current();
                  for (var match; match = paramRe.exec(current); ) {
                    state.variables = prepend(state.variables, match[1]);
                  }
                }
                return "comment";
              case "string":
                var match = stream.match(/^.*?(["']|\\[\s\S])/);
                if (!match) {
                  stream.skipToEnd();
                } else if (match[1] == state.quoteKind) {
                  state.quoteKind = null;
                  state.soyState.pop();
                }
                return "string";
            }
            if (!state.soyState.length || last(state.soyState) != "literal") {
              if (stream.match(/^\/\*/)) {
                state.soyState.push("comment");
                return "comment";
              } else if (stream.match(stream.sol() ? /^\s*\/\/.*/ : /^\s+\/\/.*/)) {
                return "comment";
              }
            }
            switch (last(state.soyState)) {
              case "templ-def":
                if (match = stream.match(/^\.?([\w]+(?!\.[\w]+)*)/)) {
                  state.soyState.pop();
                  return "def";
                }
                stream.next();
                return null;
              case "templ-ref":
                if (match = stream.match(/(\.?[a-zA-Z_][a-zA-Z_0-9]+)+/)) {
                  state.soyState.pop();
                  if (match[0][0] == ".") {
                    return "variable-2";
                  }
                  return "variable";
                }
                if (match = stream.match(/^\$([\w]+)/)) {
                  state.soyState.pop();
                  return ref(state.variables, match[1], !state.lookupVariables);
                }
                stream.next();
                return null;
              case "namespace-def":
                if (match = stream.match(/^\.?([\w\.]+)/)) {
                  state.soyState.pop();
                  return "variable";
                }
                stream.next();
                return null;
              case "param-def":
                if (match = stream.match(/^\w+/)) {
                  state.variables = prepend(state.variables, match[0]);
                  state.soyState.pop();
                  state.soyState.push("param-type");
                  return "def";
                }
                stream.next();
                return null;
              case "param-ref":
                if (match = stream.match(/^\w+/)) {
                  state.soyState.pop();
                  return "property";
                }
                stream.next();
                return null;
              case "open-parentheses":
                if (stream.match(/[)]/)) {
                  state.soyState.pop();
                  return null;
                }
                return expression(stream, state);
              case "param-type":
                var peekChar = stream.peek();
                if ("}]=>,".indexOf(peekChar) != -1) {
                  state.soyState.pop();
                  return null;
                } else if (peekChar == "[") {
                  state.soyState.push("param-type-record");
                  return null;
                } else if (peekChar == "(") {
                  state.soyState.push("param-type-template");
                  return null;
                } else if (peekChar == "<") {
                  state.soyState.push("param-type-parameter");
                  return null;
                } else if (match = stream.match(/^([\w]+|[?])/)) {
                  return "type";
                }
                stream.next();
                return null;
              case "param-type-record":
                var peekChar = stream.peek();
                if (peekChar == "]") {
                  state.soyState.pop();
                  return null;
                }
                if (stream.match(/^\w+/)) {
                  state.soyState.push("param-type");
                  return "property";
                }
                stream.next();
                return null;
              case "param-type-parameter":
                if (stream.match(/^[>]/)) {
                  state.soyState.pop();
                  return null;
                }
                if (stream.match(/^[<,]/)) {
                  state.soyState.push("param-type");
                  return null;
                }
                stream.next();
                return null;
              case "param-type-template":
                if (stream.match(/[>]/)) {
                  state.soyState.pop();
                  state.soyState.push("param-type");
                  return null;
                }
                if (stream.match(/^\w+/)) {
                  state.soyState.push("param-type");
                  return "def";
                }
                stream.next();
                return null;
              case "var-def":
                if (match = stream.match(/^\$([\w]+)/)) {
                  state.variables = prepend(state.variables, match[1]);
                  state.soyState.pop();
                  return "def";
                }
                stream.next();
                return null;
              case "for-loop":
                if (stream.match(/\bin\b/)) {
                  state.soyState.pop();
                  return "keyword";
                }
                if (stream.peek() == "$") {
                  state.soyState.push("var-def");
                  return null;
                }
                stream.next();
                return null;
              case "record-literal":
                if (stream.match(/^[)]/)) {
                  state.soyState.pop();
                  return null;
                }
                if (stream.match(/[(,]/)) {
                  state.soyState.push("map-value");
                  state.soyState.push("record-key");
                  return null;
                }
                stream.next();
                return null;
              case "map-literal":
                if (stream.match(/^[)]/)) {
                  state.soyState.pop();
                  return null;
                }
                if (stream.match(/[(,]/)) {
                  state.soyState.push("map-value");
                  state.soyState.push("map-value");
                  return null;
                }
                stream.next();
                return null;
              case "list-literal":
                if (stream.match(/\]/)) {
                  state.soyState.pop();
                  state.lookupVariables = true;
                  popcontext(state);
                  return null;
                }
                if (stream.match(/\bfor\b/)) {
                  state.lookupVariables = true;
                  state.soyState.push("for-loop");
                  return "keyword";
                }
                return expression(stream, state);
              case "record-key":
                if (stream.match(/[\w]+/)) {
                  return "property";
                }
                if (stream.match(/^[:]/)) {
                  state.soyState.pop();
                  return null;
                }
                stream.next();
                return null;
              case "map-value":
                if (stream.peek() == ")" || stream.peek() == "," || stream.match(/^[:)]/)) {
                  state.soyState.pop();
                  return null;
                }
                return expression(stream, state);
              case "import":
                if (stream.eat(";")) {
                  state.soyState.pop();
                  state.indent -= 2 * config.indentUnit;
                  return null;
                }
                if (stream.match(/\w+(?=\s+as)/)) {
                  return "variable";
                }
                if (match = stream.match(/\w+/)) {
                  return /(from|as)/.test(match[0]) ? "keyword" : "def";
                }
                if (match = stream.match(/^["']/)) {
                  state.soyState.push("string");
                  state.quoteKind = match[0];
                  return "string";
                }
                stream.next();
                return null;
              case "tag":
                var endTag = state.tag[0] == "/";
                var tagName = endTag ? state.tag.substring(1) : state.tag;
                var tag = tags[tagName];
                if (stream.match(/^\/?}/)) {
                  var selfClosed = stream.current() == "/}";
                  if (selfClosed && !endTag) {
                    popcontext(state);
                  }
                  if (state.tag == "/template" || state.tag == "/deltemplate") {
                    state.variables = prepend(null, "ij");
                    state.indent = 0;
                  } else {
                    state.indent -= config.indentUnit * (selfClosed || indentingTags.indexOf(state.tag) == -1 ? 2 : 1);
                  }
                  state.soyState.pop();
                  return "keyword";
                } else if (stream.match(/^([\w?]+)(?==)/)) {
                  if (state.context && state.context.tag == tagName && stream.current() == "kind" && (match = stream.match(/^="([^"]+)/, false))) {
                    var kind = match[1];
                    state.context.kind = kind;
                    var mode = modes[kind] || modes.html;
                    var localState = last(state.localStates);
                    if (localState.mode.indent) {
                      state.indent += localState.mode.indent(localState.state, "", "");
                    }
                    state.localStates.push({
                      mode,
                      state: CodeMirror2.startState(mode)
                    });
                  }
                  return "attribute";
                }
                return expression(stream, state);
              case "literal":
                if (stream.match(/^(?=\{\/literal})/)) {
                  state.soyState.pop();
                  return this.token(stream, state);
                }
                return tokenUntil(stream, state, /\{\/literal}/);
            }
            if (stream.match(/^\{literal}/)) {
              state.indent += config.indentUnit;
              state.soyState.push("literal");
              state.context = new Context(state.context, "literal", state.variables);
              return "keyword";
            } else if (match = stream.match(/^\{([/@\\]?\w+\??)(?=$|[\s}]|\/[/*])/)) {
              var prevTag = state.tag;
              state.tag = match[1];
              var endTag = state.tag[0] == "/";
              var indentingTag = !!tags[state.tag];
              var tagName = endTag ? state.tag.substring(1) : state.tag;
              var tag = tags[tagName];
              if (state.tag != "/switch")
                state.indent += ((endTag || tag && tag.reduceIndent) && prevTag != "switch" ? 1 : 2) * config.indentUnit;
              state.soyState.push("tag");
              var tagError = false;
              if (tag) {
                if (!endTag) {
                  if (tag.soyState)
                    state.soyState.push(tag.soyState);
                }
                if (!tag.noEndTag && (indentingTag || !endTag)) {
                  state.context = new Context(state.context, state.tag, tag.variableScope ? state.variables : null);
                } else if (endTag) {
                  if (!state.context || state.context.tag != tagName) {
                    tagError = true;
                  } else if (state.context) {
                    if (state.context.kind) {
                      state.localStates.pop();
                      var localState = last(state.localStates);
                      if (localState.mode.indent) {
                        state.indent -= localState.mode.indent(localState.state, "", "");
                      }
                    }
                    popcontext(state);
                  }
                }
              } else if (endTag) {
                tagError = true;
              }
              return (tagError ? "error " : "") + "keyword";
            } else if (stream.eat("{")) {
              state.tag = "print";
              state.indent += 2 * config.indentUnit;
              state.soyState.push("tag");
              return "keyword";
            } else if (!state.context && stream.match(/\bimport\b/)) {
              state.soyState.push("import");
              state.indent += 2 * config.indentUnit;
              return "keyword";
            }
            return tokenUntil(stream, state, /\{|\s+\/\/|\/\*/);
          },
          indent: function(state, textAfter, line) {
            var indent = state.indent, top = last(state.soyState);
            if (top == "comment")
              return CodeMirror2.Pass;
            if (top == "literal") {
              if (/^\{\/literal}/.test(textAfter))
                indent -= config.indentUnit;
            } else {
              if (/^\s*\{\/(template|deltemplate)\b/.test(textAfter))
                return 0;
              if (/^\{(\/|(fallbackmsg|elseif|else|ifempty)\b)/.test(textAfter))
                indent -= config.indentUnit;
              if (state.tag != "switch" && /^\{(case|default)\b/.test(textAfter))
                indent -= config.indentUnit;
              if (/^\{\/switch\b/.test(textAfter))
                indent -= config.indentUnit;
            }
            var localState = last(state.localStates);
            if (indent && localState.mode.indent) {
              indent += localState.mode.indent(localState.state, textAfter, line);
            }
            return indent;
          },
          innerMode: function(state) {
            if (state.soyState.length && last(state.soyState) != "literal")
              return null;
            else
              return last(state.localStates);
          },
          electricInput: /^\s*\{(\/|\/template|\/deltemplate|\/switch|fallbackmsg|elseif|else|case|default|ifempty|\/literal\})$/,
          lineComment: "//",
          blockCommentStart: "/*",
          blockCommentEnd: "*/",
          blockCommentContinue: " * ",
          useInnerComments: false,
          fold: "indent"
        };
      }, "htmlmixed");
      CodeMirror2.registerHelper("wordChars", "soy", /[\w$]/);
      CodeMirror2.registerHelper("hintWords", "soy", Object.keys(tags).concat(
        ["css", "debugger"]
      ));
      CodeMirror2.defineMIME("text/x-soy", "soy");
    });
  }
});

// mode/sparql/sparql.js
var require_sparql = __commonJS({
  "mode/sparql/sparql.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("sparql", function(config) {
        var indentUnit = config.indentUnit;
        var curPunc;
        function wordRegexp(words) {
          return new RegExp("^(?:" + words.join("|") + ")$", "i");
        }
        var ops = wordRegexp([
          "str",
          "lang",
          "langmatches",
          "datatype",
          "bound",
          "sameterm",
          "isiri",
          "isuri",
          "iri",
          "uri",
          "bnode",
          "count",
          "sum",
          "min",
          "max",
          "avg",
          "sample",
          "group_concat",
          "rand",
          "abs",
          "ceil",
          "floor",
          "round",
          "concat",
          "substr",
          "strlen",
          "replace",
          "ucase",
          "lcase",
          "encode_for_uri",
          "contains",
          "strstarts",
          "strends",
          "strbefore",
          "strafter",
          "year",
          "month",
          "day",
          "hours",
          "minutes",
          "seconds",
          "timezone",
          "tz",
          "now",
          "uuid",
          "struuid",
          "md5",
          "sha1",
          "sha256",
          "sha384",
          "sha512",
          "coalesce",
          "if",
          "strlang",
          "strdt",
          "isnumeric",
          "regex",
          "exists",
          "isblank",
          "isliteral",
          "a",
          "bind"
        ]);
        var keywords = wordRegexp([
          "base",
          "prefix",
          "select",
          "distinct",
          "reduced",
          "construct",
          "describe",
          "ask",
          "from",
          "named",
          "where",
          "order",
          "limit",
          "offset",
          "filter",
          "optional",
          "graph",
          "by",
          "asc",
          "desc",
          "as",
          "having",
          "undef",
          "values",
          "group",
          "minus",
          "in",
          "not",
          "service",
          "silent",
          "using",
          "insert",
          "delete",
          "union",
          "true",
          "false",
          "with",
          "data",
          "copy",
          "to",
          "move",
          "add",
          "create",
          "drop",
          "clear",
          "load"
        ]);
        var operatorChars = /[*+\-<>=&|\^\/!\?]/;
        function tokenBase(stream, state) {
          var ch = stream.next();
          curPunc = null;
          if (ch == "$" || ch == "?") {
            if (ch == "?" && stream.match(/\s/, false)) {
              return "operator";
            }
            stream.match(/^[A-Za-z0-9_\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][A-Za-z0-9_\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]*/);
            return "variable-2";
          } else if (ch == "<" && !stream.match(/^[\s\u00a0=]/, false)) {
            stream.match(/^[^\s\u00a0>]*>?/);
            return "atom";
          } else if (ch == '"' || ch == "'") {
            state.tokenize = tokenLiteral(ch);
            return state.tokenize(stream, state);
          } else if (/[{}\(\),\.;\[\]]/.test(ch)) {
            curPunc = ch;
            return "bracket";
          } else if (ch == "#") {
            stream.skipToEnd();
            return "comment";
          } else if (ch === "^") {
            ch = stream.peek();
            if (ch === "^")
              stream.eat("^");
            else
              stream.eatWhile(operatorChars);
            return "operator";
          } else if (operatorChars.test(ch)) {
            stream.eatWhile(operatorChars);
            return "operator";
          } else if (ch == ":") {
            eatPnLocal(stream);
            return "atom";
          } else if (ch == "@") {
            stream.eatWhile(/[a-z\d\-]/i);
            return "meta";
          } else {
            stream.eatWhile(/[_\w\d]/);
            if (stream.eat(":")) {
              eatPnLocal(stream);
              return "atom";
            }
            var word = stream.current();
            if (ops.test(word))
              return "builtin";
            else if (keywords.test(word))
              return "keyword";
            else
              return "variable";
          }
        }
        function eatPnLocal(stream) {
          while (stream.match(/([:\w\d._-]|\\[-\\_~.!$&'()*+,;=/?#@%]|%[a-fA-F0-9][a-fA-F0-9])/))
            ;
        }
        function tokenLiteral(quote) {
          return function(stream, state) {
            var escaped = false, ch;
            while ((ch = stream.next()) != null) {
              if (ch == quote && !escaped) {
                state.tokenize = tokenBase;
                break;
              }
              escaped = !escaped && ch == "\\";
            }
            return "string";
          };
        }
        function pushContext(state, type, col) {
          state.context = { prev: state.context, indent: state.indent, col, type };
        }
        function popContext(state) {
          state.indent = state.context.indent;
          state.context = state.context.prev;
        }
        return {
          startState: function() {
            return {
              tokenize: tokenBase,
              context: null,
              indent: 0,
              col: 0
            };
          },
          token: function(stream, state) {
            if (stream.sol()) {
              if (state.context && state.context.align == null)
                state.context.align = false;
              state.indent = stream.indentation();
            }
            if (stream.eatSpace())
              return null;
            var style = state.tokenize(stream, state);
            if (style != "comment" && state.context && state.context.align == null && state.context.type != "pattern") {
              state.context.align = true;
            }
            if (curPunc == "(")
              pushContext(state, ")", stream.column());
            else if (curPunc == "[")
              pushContext(state, "]", stream.column());
            else if (curPunc == "{")
              pushContext(state, "}", stream.column());
            else if (/[\]\}\)]/.test(curPunc)) {
              while (state.context && state.context.type == "pattern")
                popContext(state);
              if (state.context && curPunc == state.context.type) {
                popContext(state);
                if (curPunc == "}" && state.context && state.context.type == "pattern")
                  popContext(state);
              }
            } else if (curPunc == "." && state.context && state.context.type == "pattern")
              popContext(state);
            else if (/atom|string|variable/.test(style) && state.context) {
              if (/[\}\]]/.test(state.context.type))
                pushContext(state, "pattern", stream.column());
              else if (state.context.type == "pattern" && !state.context.align) {
                state.context.align = true;
                state.context.col = stream.column();
              }
            }
            return style;
          },
          indent: function(state, textAfter) {
            var firstChar = textAfter && textAfter.charAt(0);
            var context = state.context;
            if (/[\]\}]/.test(firstChar))
              while (context && context.type == "pattern")
                context = context.prev;
            var closing = context && firstChar == context.type;
            if (!context)
              return 0;
            else if (context.type == "pattern")
              return context.col;
            else if (context.align)
              return context.col + (closing ? 0 : 1);
            else
              return context.indent + (closing ? 0 : indentUnit);
          },
          lineComment: "#"
        };
      });
      CodeMirror2.defineMIME("application/sparql-query", "sparql");
    });
  }
});

// mode/spreadsheet/spreadsheet.js
var require_spreadsheet = __commonJS({
  "mode/spreadsheet/spreadsheet.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("spreadsheet", function() {
        return {
          startState: function() {
            return {
              stringType: null,
              stack: []
            };
          },
          token: function(stream, state) {
            if (!stream)
              return;
            if (state.stack.length === 0) {
              if (stream.peek() == '"' || stream.peek() == "'") {
                state.stringType = stream.peek();
                stream.next();
                state.stack.unshift("string");
              }
            }
            switch (state.stack[0]) {
              case "string":
                while (state.stack[0] === "string" && !stream.eol()) {
                  if (stream.peek() === state.stringType) {
                    stream.next();
                    state.stack.shift();
                  } else if (stream.peek() === "\\") {
                    stream.next();
                    stream.next();
                  } else {
                    stream.match(/^.[^\\\"\']*/);
                  }
                }
                return "string";
              case "characterClass":
                while (state.stack[0] === "characterClass" && !stream.eol()) {
                  if (!(stream.match(/^[^\]\\]+/) || stream.match(/^\\./)))
                    state.stack.shift();
                }
                return "operator";
            }
            var peek = stream.peek();
            switch (peek) {
              case "[":
                stream.next();
                state.stack.unshift("characterClass");
                return "bracket";
              case ":":
                stream.next();
                return "operator";
              case "\\":
                if (stream.match(/\\[a-z]+/))
                  return "string-2";
                else {
                  stream.next();
                  return "atom";
                }
              case ".":
              case ",":
              case ";":
              case "*":
              case "-":
              case "+":
              case "^":
              case "<":
              case "/":
              case "=":
                stream.next();
                return "atom";
              case "$":
                stream.next();
                return "builtin";
            }
            if (stream.match(/\d+/)) {
              if (stream.match(/^\w+/))
                return "error";
              return "number";
            } else if (stream.match(/^[a-zA-Z_]\w*/)) {
              if (stream.match(/(?=[\(.])/, false))
                return "keyword";
              return "variable-2";
            } else if (["[", "]", "(", ")", "{", "}"].indexOf(peek) != -1) {
              stream.next();
              return "bracket";
            } else if (!stream.eatSpace()) {
              stream.next();
            }
            return null;
          }
        };
      });
      CodeMirror2.defineMIME("text/x-spreadsheet", "spreadsheet");
    });
  }
});

// mode/sql/sql.js
var require_sql = __commonJS({
  "mode/sql/sql.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("sql", function(config, parserConfig) {
        var client = parserConfig.client || {}, atoms = parserConfig.atoms || { "false": true, "true": true, "null": true }, builtin = parserConfig.builtin || set(defaultBuiltin), keywords = parserConfig.keywords || set(sqlKeywords), operatorChars = parserConfig.operatorChars || /^[*+\-%<>!=&|~^\/]/, support = parserConfig.support || {}, hooks = parserConfig.hooks || {}, dateSQL = parserConfig.dateSQL || { "date": true, "time": true, "timestamp": true }, backslashStringEscapes = parserConfig.backslashStringEscapes !== false, brackets = parserConfig.brackets || /^[\{}\(\)\[\]]/, punctuation = parserConfig.punctuation || /^[;.,:]/;
        function tokenBase(stream, state) {
          var ch = stream.next();
          if (hooks[ch]) {
            var result = hooks[ch](stream, state);
            if (result !== false)
              return result;
          }
          if (support.hexNumber && (ch == "0" && stream.match(/^[xX][0-9a-fA-F]+/) || (ch == "x" || ch == "X") && stream.match(/^'[0-9a-fA-F]+'/))) {
            return "number";
          } else if (support.binaryNumber && ((ch == "b" || ch == "B") && stream.match(/^'[01]+'/) || ch == "0" && stream.match(/^b[01]+/))) {
            return "number";
          } else if (ch.charCodeAt(0) > 47 && ch.charCodeAt(0) < 58) {
            stream.match(/^[0-9]*(\.[0-9]+)?([eE][-+]?[0-9]+)?/);
            support.decimallessFloat && stream.match(/^\.(?!\.)/);
            return "number";
          } else if (ch == "?" && (stream.eatSpace() || stream.eol() || stream.eat(";"))) {
            return "variable-3";
          } else if (ch == "'" || ch == '"' && support.doubleQuote) {
            state.tokenize = tokenLiteral(ch);
            return state.tokenize(stream, state);
          } else if ((support.nCharCast && (ch == "n" || ch == "N") || support.charsetCast && ch == "_" && stream.match(/[a-z][a-z0-9]*/i)) && (stream.peek() == "'" || stream.peek() == '"')) {
            return "keyword";
          } else if (support.escapeConstant && (ch == "e" || ch == "E") && (stream.peek() == "'" || stream.peek() == '"' && support.doubleQuote)) {
            state.tokenize = function(stream2, state2) {
              return (state2.tokenize = tokenLiteral(stream2.next(), true))(stream2, state2);
            };
            return "keyword";
          } else if (support.commentSlashSlash && ch == "/" && stream.eat("/")) {
            stream.skipToEnd();
            return "comment";
          } else if (support.commentHash && ch == "#" || ch == "-" && stream.eat("-") && (!support.commentSpaceRequired || stream.eat(" "))) {
            stream.skipToEnd();
            return "comment";
          } else if (ch == "/" && stream.eat("*")) {
            state.tokenize = tokenComment(1);
            return state.tokenize(stream, state);
          } else if (ch == ".") {
            if (support.zerolessFloat && stream.match(/^(?:\d+(?:e[+-]?\d+)?)/i))
              return "number";
            if (stream.match(/^\.+/))
              return null;
            if (support.ODBCdotTable && stream.match(/^[\w\d_$#]+/))
              return "variable-2";
          } else if (operatorChars.test(ch)) {
            stream.eatWhile(operatorChars);
            return "operator";
          } else if (brackets.test(ch)) {
            return "bracket";
          } else if (punctuation.test(ch)) {
            stream.eatWhile(punctuation);
            return "punctuation";
          } else if (ch == "{" && (stream.match(/^( )*(d|D|t|T|ts|TS)( )*'[^']*'( )*}/) || stream.match(/^( )*(d|D|t|T|ts|TS)( )*"[^"]*"( )*}/))) {
            return "number";
          } else {
            stream.eatWhile(/^[_\w\d]/);
            var word = stream.current().toLowerCase();
            if (dateSQL.hasOwnProperty(word) && (stream.match(/^( )+'[^']*'/) || stream.match(/^( )+"[^"]*"/)))
              return "number";
            if (atoms.hasOwnProperty(word))
              return "atom";
            if (builtin.hasOwnProperty(word))
              return "builtin";
            if (keywords.hasOwnProperty(word))
              return "keyword";
            if (client.hasOwnProperty(word))
              return "string-2";
            return null;
          }
        }
        function tokenLiteral(quote, backslashEscapes) {
          return function(stream, state) {
            var escaped = false, ch;
            while ((ch = stream.next()) != null) {
              if (ch == quote && !escaped) {
                state.tokenize = tokenBase;
                break;
              }
              escaped = (backslashStringEscapes || backslashEscapes) && !escaped && ch == "\\";
            }
            return "string";
          };
        }
        function tokenComment(depth) {
          return function(stream, state) {
            var m = stream.match(/^.*?(\/\*|\*\/)/);
            if (!m)
              stream.skipToEnd();
            else if (m[1] == "/*")
              state.tokenize = tokenComment(depth + 1);
            else if (depth > 1)
              state.tokenize = tokenComment(depth - 1);
            else
              state.tokenize = tokenBase;
            return "comment";
          };
        }
        function pushContext(stream, state, type) {
          state.context = {
            prev: state.context,
            indent: stream.indentation(),
            col: stream.column(),
            type
          };
        }
        function popContext(state) {
          state.indent = state.context.indent;
          state.context = state.context.prev;
        }
        return {
          startState: function() {
            return { tokenize: tokenBase, context: null };
          },
          token: function(stream, state) {
            if (stream.sol()) {
              if (state.context && state.context.align == null)
                state.context.align = false;
            }
            if (state.tokenize == tokenBase && stream.eatSpace())
              return null;
            var style = state.tokenize(stream, state);
            if (style == "comment")
              return style;
            if (state.context && state.context.align == null)
              state.context.align = true;
            var tok = stream.current();
            if (tok == "(")
              pushContext(stream, state, ")");
            else if (tok == "[")
              pushContext(stream, state, "]");
            else if (state.context && state.context.type == tok)
              popContext(state);
            return style;
          },
          indent: function(state, textAfter) {
            var cx = state.context;
            if (!cx)
              return CodeMirror2.Pass;
            var closing = textAfter.charAt(0) == cx.type;
            if (cx.align)
              return cx.col + (closing ? 0 : 1);
            else
              return cx.indent + (closing ? 0 : config.indentUnit);
          },
          blockCommentStart: "/*",
          blockCommentEnd: "*/",
          lineComment: support.commentSlashSlash ? "//" : support.commentHash ? "#" : "--",
          closeBrackets: "()[]{}''\"\"``"
        };
      });
      function hookIdentifier(stream) {
        var ch;
        while ((ch = stream.next()) != null) {
          if (ch == "`" && !stream.eat("`"))
            return "variable-2";
        }
        stream.backUp(stream.current().length - 1);
        return stream.eatWhile(/\w/) ? "variable-2" : null;
      }
      function hookIdentifierDoublequote(stream) {
        var ch;
        while ((ch = stream.next()) != null) {
          if (ch == '"' && !stream.eat('"'))
            return "variable-2";
        }
        stream.backUp(stream.current().length - 1);
        return stream.eatWhile(/\w/) ? "variable-2" : null;
      }
      function hookVar(stream) {
        if (stream.eat("@")) {
          stream.match(/^session\./);
          stream.match(/^local\./);
          stream.match(/^global\./);
        }
        if (stream.eat("'")) {
          stream.match(/^.*'/);
          return "variable-2";
        } else if (stream.eat('"')) {
          stream.match(/^.*"/);
          return "variable-2";
        } else if (stream.eat("`")) {
          stream.match(/^.*`/);
          return "variable-2";
        } else if (stream.match(/^[0-9a-zA-Z$\.\_]+/)) {
          return "variable-2";
        }
        return null;
      }
      ;
      function hookClient(stream) {
        if (stream.eat("N")) {
          return "atom";
        }
        return stream.match(/^[a-zA-Z.#!?]/) ? "variable-2" : null;
      }
      var sqlKeywords = "alter and as asc between by count create delete desc distinct drop from group having in insert into is join like not on or order select set table union update values where limit ";
      function set(str) {
        var obj = {}, words = str.split(" ");
        for (var i = 0; i < words.length; ++i)
          obj[words[i]] = true;
        return obj;
      }
      var defaultBuiltin = "bool boolean bit blob enum long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision real date datetime year unsigned signed decimal numeric";
      CodeMirror2.defineMIME("text/x-sql", {
        name: "sql",
        keywords: set(sqlKeywords + "begin"),
        builtin: set(defaultBuiltin),
        atoms: set("false true null unknown"),
        dateSQL: set("date time timestamp"),
        support: set("ODBCdotTable doubleQuote binaryNumber hexNumber")
      });
      CodeMirror2.defineMIME("text/x-mssql", {
        name: "sql",
        client: set("$partition binary_checksum checksum connectionproperty context_info current_request_id error_line error_message error_number error_procedure error_severity error_state formatmessage get_filestream_transaction_context getansinull host_id host_name isnull isnumeric min_active_rowversion newid newsequentialid rowcount_big xact_state object_id"),
        keywords: set(sqlKeywords + "begin trigger proc view index for add constraint key primary foreign collate clustered nonclustered declare exec go if use index holdlock nolock nowait paglock readcommitted readcommittedlock readpast readuncommitted repeatableread rowlock serializable snapshot tablock tablockx updlock with"),
        builtin: set("bigint numeric bit smallint decimal smallmoney int tinyint money float real char varchar text nchar nvarchar ntext binary varbinary image cursor timestamp hierarchyid uniqueidentifier sql_variant xml table "),
        atoms: set("is not null like and or in left right between inner outer join all any some cross unpivot pivot exists"),
        operatorChars: /^[*+\-%<>!=^\&|\/]/,
        brackets: /^[\{}\(\)]/,
        punctuation: /^[;.,:/]/,
        backslashStringEscapes: false,
        dateSQL: set("date datetimeoffset datetime2 smalldatetime datetime time"),
        hooks: {
          "@": hookVar
        }
      });
      CodeMirror2.defineMIME("text/x-mysql", {
        name: "sql",
        client: set("charset clear connect edit ego exit go help nopager notee nowarning pager print prompt quit rehash source status system tee"),
        keywords: set(sqlKeywords + "accessible action add after algorithm all analyze asensitive at authors auto_increment autocommit avg avg_row_length before binary binlog both btree cache call cascade cascaded case catalog_name chain change changed character check checkpoint checksum class_origin client_statistics close coalesce code collate collation collations column columns comment commit committed completion concurrent condition connection consistent constraint contains continue contributors convert cross current current_date current_time current_timestamp current_user cursor data database databases day_hour day_microsecond day_minute day_second deallocate dec declare default delay_key_write delayed delimiter des_key_file describe deterministic dev_pop dev_samp deviance diagnostics directory disable discard distinctrow div dual dumpfile each elseif enable enclosed end ends engine engines enum errors escape escaped even event events every execute exists exit explain extended fast fetch field fields first flush for force foreign found_rows full fulltext function general get global grant grants group group_concat handler hash help high_priority hosts hour_microsecond hour_minute hour_second if ignore ignore_server_ids import index index_statistics infile inner innodb inout insensitive insert_method install interval invoker isolation iterate key keys kill language last leading leave left level limit linear lines list load local localtime localtimestamp lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters match max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modifies modify mutex mysql_errno natural next no no_write_to_binlog offline offset one online open optimize option optionally out outer outfile pack_keys parser partition partitions password phase plugin plugins prepare preserve prev primary privileges procedure processlist profile profiles purge query quick range read read_write reads real rebuild recover references regexp relaylog release remove rename reorganize repair repeatable replace require resignal restrict resume return returns revoke right rlike rollback rollup row row_format rtree savepoint schedule schema schema_name schemas second_microsecond security sensitive separator serializable server session share show signal slave slow smallint snapshot soname spatial specific sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result sqlexception sqlstate sqlwarning ssl start starting starts status std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace temporary terminated to trailing transaction trigger triggers truncate uncommitted undo uninstall unique unlock upgrade usage use use_frm user user_resources user_statistics using utc_date utc_time utc_timestamp value variables varying view views warnings when while with work write xa xor year_month zerofill begin do then else loop repeat"),
        builtin: set("bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision date datetime year unsigned signed numeric"),
        atoms: set("false true null unknown"),
        operatorChars: /^[*+\-%<>!=&|^]/,
        dateSQL: set("date time timestamp"),
        support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber doubleQuote nCharCast charsetCast commentHash commentSpaceRequired"),
        hooks: {
          "@": hookVar,
          "`": hookIdentifier,
          "\\": hookClient
        }
      });
      CodeMirror2.defineMIME("text/x-mariadb", {
        name: "sql",
        client: set("charset clear connect edit ego exit go help nopager notee nowarning pager print prompt quit rehash source status system tee"),
        keywords: set(sqlKeywords + "accessible action add after algorithm all always analyze asensitive at authors auto_increment autocommit avg avg_row_length before binary binlog both btree cache call cascade cascaded case catalog_name chain change changed character check checkpoint checksum class_origin client_statistics close coalesce code collate collation collations column columns comment commit committed completion concurrent condition connection consistent constraint contains continue contributors convert cross current current_date current_time current_timestamp current_user cursor data database databases day_hour day_microsecond day_minute day_second deallocate dec declare default delay_key_write delayed delimiter des_key_file describe deterministic dev_pop dev_samp deviance diagnostics directory disable discard distinctrow div dual dumpfile each elseif enable enclosed end ends engine engines enum errors escape escaped even event events every execute exists exit explain extended fast fetch field fields first flush for force foreign found_rows full fulltext function general generated get global grant grants group groupby_concat handler hard hash help high_priority hosts hour_microsecond hour_minute hour_second if ignore ignore_server_ids import index index_statistics infile inner innodb inout insensitive insert_method install interval invoker isolation iterate key keys kill language last leading leave left level limit linear lines list load local localtime localtimestamp lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters match max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modifies modify mutex mysql_errno natural next no no_write_to_binlog offline offset one online open optimize option optionally out outer outfile pack_keys parser partition partitions password persistent phase plugin plugins prepare preserve prev primary privileges procedure processlist profile profiles purge query quick range read read_write reads real rebuild recover references regexp relaylog release remove rename reorganize repair repeatable replace require resignal restrict resume return returns revoke right rlike rollback rollup row row_format rtree savepoint schedule schema schema_name schemas second_microsecond security sensitive separator serializable server session share show shutdown signal slave slow smallint snapshot soft soname spatial specific sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result sqlexception sqlstate sqlwarning ssl start starting starts status std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace temporary terminated to trailing transaction trigger triggers truncate uncommitted undo uninstall unique unlock upgrade usage use use_frm user user_resources user_statistics using utc_date utc_time utc_timestamp value variables varying view views virtual warnings when while with work write xa xor year_month zerofill begin do then else loop repeat"),
        builtin: set("bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision date datetime year unsigned signed numeric"),
        atoms: set("false true null unknown"),
        operatorChars: /^[*+\-%<>!=&|^]/,
        dateSQL: set("date time timestamp"),
        support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber doubleQuote nCharCast charsetCast commentHash commentSpaceRequired"),
        hooks: {
          "@": hookVar,
          "`": hookIdentifier,
          "\\": hookClient
        }
      });
      CodeMirror2.defineMIME("text/x-sqlite", {
        name: "sql",
        // commands of the official SQLite client, ref: https://www.sqlite.org/cli.html#dotcmd
        client: set("auth backup bail binary changes check clone databases dbinfo dump echo eqp exit explain fullschema headers help import imposter indexes iotrace limit lint load log mode nullvalue once open output print prompt quit read restore save scanstats schema separator session shell show stats system tables testcase timeout timer trace vfsinfo vfslist vfsname width"),
        // ref: http://sqlite.org/lang_keywords.html
        keywords: set(sqlKeywords + "abort action add after all analyze attach autoincrement before begin cascade case cast check collate column commit conflict constraint cross current_date current_time current_timestamp database default deferrable deferred detach each else end escape except exclusive exists explain fail for foreign full glob if ignore immediate index indexed initially inner instead intersect isnull key left limit match natural no notnull null of offset outer plan pragma primary query raise recursive references regexp reindex release rename replace restrict right rollback row savepoint temp temporary then to transaction trigger unique using vacuum view virtual when with without"),
        // SQLite is weakly typed, ref: http://sqlite.org/datatype3.html. This is just a list of some common types.
        builtin: set("bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text clob bigint int int2 int8 integer float double char varchar date datetime year unsigned signed numeric real"),
        // ref: http://sqlite.org/syntax/literal-value.html
        atoms: set("null current_date current_time current_timestamp"),
        // ref: http://sqlite.org/lang_expr.html#binaryops
        operatorChars: /^[*+\-%<>!=&|/~]/,
        // SQLite is weakly typed, ref: http://sqlite.org/datatype3.html. This is just a list of some common types.
        dateSQL: set("date time timestamp datetime"),
        support: set("decimallessFloat zerolessFloat"),
        identifierQuote: '"',
        //ref: http://sqlite.org/lang_keywords.html
        hooks: {
          // bind-parameters ref:http://sqlite.org/lang_expr.html#varparam
          "@": hookVar,
          ":": hookVar,
          "?": hookVar,
          "$": hookVar,
          // The preferred way to escape Identifiers is using double quotes, ref: http://sqlite.org/lang_keywords.html
          '"': hookIdentifierDoublequote,
          // there is also support for backtics, ref: http://sqlite.org/lang_keywords.html
          "`": hookIdentifier
        }
      });
      CodeMirror2.defineMIME("text/x-cassandra", {
        name: "sql",
        client: {},
        keywords: set("add all allow alter and any apply as asc authorize batch begin by clustering columnfamily compact consistency count create custom delete desc distinct drop each_quorum exists filtering from grant if in index insert into key keyspace keyspaces level limit local_one local_quorum modify nan norecursive nosuperuser not of on one order password permission permissions primary quorum rename revoke schema select set storage superuser table three to token truncate ttl two type unlogged update use user users using values where with writetime"),
        builtin: set("ascii bigint blob boolean counter decimal double float frozen inet int list map static text timestamp timeuuid tuple uuid varchar varint"),
        atoms: set("false true infinity NaN"),
        operatorChars: /^[<>=]/,
        dateSQL: {},
        support: set("commentSlashSlash decimallessFloat"),
        hooks: {}
      });
      CodeMirror2.defineMIME("text/x-plsql", {
        name: "sql",
        client: set("appinfo arraysize autocommit autoprint autorecovery autotrace blockterminator break btitle cmdsep colsep compatibility compute concat copycommit copytypecheck define describe echo editfile embedded escape exec execute feedback flagger flush heading headsep instance linesize lno loboffset logsource long longchunksize markup native newpage numformat numwidth pagesize pause pno recsep recsepchar release repfooter repheader serveroutput shiftinout show showmode size spool sqlblanklines sqlcase sqlcode sqlcontinue sqlnumber sqlpluscompatibility sqlprefix sqlprompt sqlterminator suffix tab term termout time timing trimout trimspool ttitle underline verify version wrap"),
        keywords: set("abort accept access add all alter and any array arraylen as asc assert assign at attributes audit authorization avg base_table begin between binary_integer body boolean by case cast char char_base check close cluster clusters colauth column comment commit compress connect connected constant constraint crash create current currval cursor data_base database date dba deallocate debugoff debugon decimal declare default definition delay delete desc digits dispose distinct do drop else elseif elsif enable end entry escape exception exception_init exchange exclusive exists exit external fast fetch file for force form from function generic goto grant group having identified if immediate in increment index indexes indicator initial initrans insert interface intersect into is key level library like limited local lock log logging long loop master maxextents maxtrans member minextents minus mislabel mode modify multiset new next no noaudit nocompress nologging noparallel not nowait number_base object of off offline on online only open option or order out package parallel partition pctfree pctincrease pctused pls_integer positive positiven pragma primary prior private privileges procedure public raise range raw read rebuild record ref references refresh release rename replace resource restrict return returning returns reverse revoke rollback row rowid rowlabel rownum rows run savepoint schema segment select separate session set share snapshot some space split sql start statement storage subtype successful synonym tabauth table tables tablespace task terminate then to trigger truncate type union unique unlimited unrecoverable unusable update use using validate value values variable view views when whenever where while with work"),
        builtin: set("abs acos add_months ascii asin atan atan2 average bfile bfilename bigserial bit blob ceil character chartorowid chr clob concat convert cos cosh count dec decode deref dual dump dup_val_on_index empty error exp false float floor found glb greatest hextoraw initcap instr instrb int integer isopen last_day least length lengthb ln lower lpad ltrim lub make_ref max min mlslabel mod months_between natural naturaln nchar nclob new_time next_day nextval nls_charset_decl_len nls_charset_id nls_charset_name nls_initcap nls_lower nls_sort nls_upper nlssort no_data_found notfound null number numeric nvarchar2 nvl others power rawtohex real reftohex round rowcount rowidtochar rowtype rpad rtrim serial sign signtype sin sinh smallint soundex sqlcode sqlerrm sqrt stddev string substr substrb sum sysdate tan tanh to_char text to_date to_label to_multi_byte to_number to_single_byte translate true trunc uid unlogged upper user userenv varchar varchar2 variance varying vsize xml"),
        operatorChars: /^[*\/+\-%<>!=~]/,
        dateSQL: set("date time timestamp"),
        support: set("doubleQuote nCharCast zerolessFloat binaryNumber hexNumber")
      });
      CodeMirror2.defineMIME("text/x-hive", {
        name: "sql",
        keywords: set("select alter $elem$ $key$ $value$ add after all analyze and archive as asc before between binary both bucket buckets by cascade case cast change cluster clustered clusterstatus collection column columns comment compute concatenate continue create cross cursor data database databases dbproperties deferred delete delimited desc describe directory disable distinct distribute drop else enable end escaped exclusive exists explain export extended external fetch fields fileformat first format formatted from full function functions grant group having hold_ddltime idxproperties if import in index indexes inpath inputdriver inputformat insert intersect into is items join keys lateral left like limit lines load local location lock locks mapjoin materialized minus msck no_drop nocompress not of offline on option or order out outer outputdriver outputformat overwrite partition partitioned partitions percent plus preserve procedure purge range rcfile read readonly reads rebuild recordreader recordwriter recover reduce regexp rename repair replace restrict revoke right rlike row schema schemas semi sequencefile serde serdeproperties set shared show show_database sort sorted ssl statistics stored streamtable table tables tablesample tblproperties temporary terminated textfile then tmp to touch transform trigger unarchive undo union uniquejoin unlock update use using utc utc_tmestamp view when where while with admin authorization char compact compactions conf cube current current_date current_timestamp day decimal defined dependency directories elem_type exchange file following for grouping hour ignore inner interval jar less logical macro minute month more none noscan over owner partialscan preceding pretty principals protection reload rewrite role roles rollup rows second server sets skewed transactions truncate unbounded unset uri user values window year"),
        builtin: set("bool boolean long timestamp tinyint smallint bigint int float double date datetime unsigned string array struct map uniontype key_type utctimestamp value_type varchar"),
        atoms: set("false true null unknown"),
        operatorChars: /^[*+\-%<>!=]/,
        dateSQL: set("date timestamp"),
        support: set("ODBCdotTable doubleQuote binaryNumber hexNumber")
      });
      CodeMirror2.defineMIME("text/x-pgsql", {
        name: "sql",
        client: set("source"),
        // For PostgreSQL - https://www.postgresql.org/docs/11/sql-keywords-appendix.html
        // For pl/pgsql lang - https://github.com/postgres/postgres/blob/REL_11_2/src/pl/plpgsql/src/pl_scanner.c
        keywords: set(sqlKeywords + "a abort abs absent absolute access according action ada add admin after aggregate alias all allocate also alter always analyse analyze and any are array array_agg array_max_cardinality as asc asensitive assert assertion assignment asymmetric at atomic attach attribute attributes authorization avg backward base64 before begin begin_frame begin_partition bernoulli between bigint binary bit bit_length blob blocked bom boolean both breadth by c cache call called cardinality cascade cascaded case cast catalog catalog_name ceil ceiling chain char char_length character character_length character_set_catalog character_set_name character_set_schema characteristics characters check checkpoint class class_origin clob close cluster coalesce cobol collate collation collation_catalog collation_name collation_schema collect column column_name columns command_function command_function_code comment comments commit committed concurrently condition condition_number configuration conflict connect connection connection_name constant constraint constraint_catalog constraint_name constraint_schema constraints constructor contains content continue control conversion convert copy corr corresponding cost count covar_pop covar_samp create cross csv cube cume_dist current current_catalog current_date current_default_transform_group current_path current_role current_row current_schema current_time current_timestamp current_transform_group_for_type current_user cursor cursor_name cycle data database datalink datatype date datetime_interval_code datetime_interval_precision day db deallocate debug dec decimal declare default defaults deferrable deferred defined definer degree delete delimiter delimiters dense_rank depends depth deref derived desc describe descriptor detach detail deterministic diagnostics dictionary disable discard disconnect dispatch distinct dlnewcopy dlpreviouscopy dlurlcomplete dlurlcompleteonly dlurlcompletewrite dlurlpath dlurlpathonly dlurlpathwrite dlurlscheme dlurlserver dlvalue do document domain double drop dump dynamic dynamic_function dynamic_function_code each element else elseif elsif empty enable encoding encrypted end end_frame end_partition endexec enforced enum equals errcode error escape event every except exception exclude excluding exclusive exec execute exists exit exp explain expression extension external extract false family fetch file filter final first first_value flag float floor following for force foreach foreign fortran forward found frame_row free freeze from fs full function functions fusion g general generated get global go goto grant granted greatest group grouping groups handler having header hex hierarchy hint hold hour id identity if ignore ilike immediate immediately immutable implementation implicit import in include including increment indent index indexes indicator info inherit inherits initially inline inner inout input insensitive insert instance instantiable instead int integer integrity intersect intersection interval into invoker is isnull isolation join k key key_member key_type label lag language large last last_value lateral lead leading leakproof least left length level library like like_regex limit link listen ln load local localtime localtimestamp location locator lock locked log logged loop lower m map mapping match matched materialized max max_cardinality maxvalue member merge message message_length message_octet_length message_text method min minute minvalue mod mode modifies module month more move multiset mumps name names namespace national natural nchar nclob nesting new next nfc nfd nfkc nfkd nil no none normalize normalized not nothing notice notify notnull nowait nth_value ntile null nullable nullif nulls number numeric object occurrences_regex octet_length octets of off offset oids old on only open operator option options or order ordering ordinality others out outer output over overlaps overlay overriding owned owner p pad parallel parameter parameter_mode parameter_name parameter_ordinal_position parameter_specific_catalog parameter_specific_name parameter_specific_schema parser partial partition pascal passing passthrough password path percent percent_rank percentile_cont percentile_disc perform period permission pg_context pg_datatype_name pg_exception_context pg_exception_detail pg_exception_hint placing plans pli policy portion position position_regex power precedes preceding precision prepare prepared preserve primary print_strict_params prior privileges procedural procedure procedures program public publication query quote raise range rank read reads real reassign recheck recovery recursive ref references referencing refresh regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy regr_syy reindex relative release rename repeatable replace replica requiring reset respect restart restore restrict result result_oid return returned_cardinality returned_length returned_octet_length returned_sqlstate returning returns reverse revoke right role rollback rollup routine routine_catalog routine_name routine_schema routines row row_count row_number rows rowtype rule savepoint scale schema schema_name schemas scope scope_catalog scope_name scope_schema scroll search second section security select selective self sensitive sequence sequences serializable server server_name session session_user set setof sets share show similar simple size skip slice smallint snapshot some source space specific specific_name specifictype sql sqlcode sqlerror sqlexception sqlstate sqlwarning sqrt stable stacked standalone start state statement static statistics stddev_pop stddev_samp stdin stdout storage strict strip structure style subclass_origin submultiset subscription substring substring_regex succeeds sum symmetric sysid system system_time system_user t table table_name tables tablesample tablespace temp template temporary text then ties time timestamp timezone_hour timezone_minute to token top_level_count trailing transaction transaction_active transactions_committed transactions_rolled_back transform transforms translate translate_regex translation treat trigger trigger_catalog trigger_name trigger_schema trim trim_array true truncate trusted type types uescape unbounded uncommitted under unencrypted union unique unknown unlink unlisten unlogged unnamed unnest until untyped update upper uri usage use_column use_variable user user_defined_type_catalog user_defined_type_code user_defined_type_name user_defined_type_schema using vacuum valid validate validator value value_of values var_pop var_samp varbinary varchar variable_conflict variadic varying verbose version versioning view views volatile warning when whenever where while whitespace width_bucket window with within without work wrapper write xml xmlagg xmlattributes xmlbinary xmlcast xmlcomment xmlconcat xmldeclaration xmldocument xmlelement xmlexists xmlforest xmliterate xmlnamespaces xmlparse xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltext xmlvalidate year yes zone"),
        // https://www.postgresql.org/docs/11/datatype.html
        builtin: set("bigint int8 bigserial serial8 bit varying varbit boolean bool box bytea character char varchar cidr circle date double precision float8 inet integer int int4 interval json jsonb line lseg macaddr macaddr8 money numeric decimal path pg_lsn point polygon real float4 smallint int2 smallserial serial2 serial serial4 text time without zone with timetz timestamp timestamptz tsquery tsvector txid_snapshot uuid xml"),
        atoms: set("false true null unknown"),
        operatorChars: /^[*\/+\-%<>!=&|^\/#@?~]/,
        backslashStringEscapes: false,
        dateSQL: set("date time timestamp"),
        support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber nCharCast charsetCast escapeConstant")
      });
      CodeMirror2.defineMIME("text/x-gql", {
        name: "sql",
        keywords: set("ancestor and asc by contains desc descendant distinct from group has in is limit offset on order select superset where"),
        atoms: set("false true"),
        builtin: set("blob datetime first key __key__ string integer double boolean null"),
        operatorChars: /^[*+\-%<>!=]/
      });
      CodeMirror2.defineMIME("text/x-gpsql", {
        name: "sql",
        client: set("source"),
        //https://github.com/greenplum-db/gpdb/blob/master/src/include/parser/kwlist.h
        keywords: set("abort absolute access action active add admin after aggregate all also alter always analyse analyze and any array as asc assertion assignment asymmetric at authorization backward before begin between bigint binary bit boolean both by cache called cascade cascaded case cast chain char character characteristics check checkpoint class close cluster coalesce codegen collate column comment commit committed concurrency concurrently configuration connection constraint constraints contains content continue conversion copy cost cpu_rate_limit create createdb createexttable createrole createuser cross csv cube current current_catalog current_date current_role current_schema current_time current_timestamp current_user cursor cycle data database day deallocate dec decimal declare decode default defaults deferrable deferred definer delete delimiter delimiters deny desc dictionary disable discard distinct distributed do document domain double drop dxl each else enable encoding encrypted end enum errors escape every except exchange exclude excluding exclusive execute exists explain extension external extract false family fetch fields filespace fill filter first float following for force foreign format forward freeze from full function global grant granted greatest group group_id grouping handler hash having header hold host hour identity if ignore ilike immediate immutable implicit in including inclusive increment index indexes inherit inherits initially inline inner inout input insensitive insert instead int integer intersect interval into invoker is isnull isolation join key language large last leading least left level like limit list listen load local localtime localtimestamp location lock log login mapping master match maxvalue median merge minute minvalue missing mode modifies modify month move name names national natural nchar new newline next no nocreatedb nocreateexttable nocreaterole nocreateuser noinherit nologin none noovercommit nosuperuser not nothing notify notnull nowait null nullif nulls numeric object of off offset oids old on only operator option options or order ordered others out outer over overcommit overlaps overlay owned owner parser partial partition partitions passing password percent percentile_cont percentile_disc placing plans position preceding precision prepare prepared preserve primary prior privileges procedural procedure protocol queue quote randomly range read readable reads real reassign recheck recursive ref references reindex reject relative release rename repeatable replace replica reset resource restart restrict returning returns revoke right role rollback rollup rootpartition row rows rule savepoint scatter schema scroll search second security segment select sequence serializable session session_user set setof sets share show similar simple smallint some split sql stable standalone start statement statistics stdin stdout storage strict strip subpartition subpartitions substring superuser symmetric sysid system table tablespace temp template temporary text then threshold ties time timestamp to trailing transaction treat trigger trim true truncate trusted type unbounded uncommitted unencrypted union unique unknown unlisten until update user using vacuum valid validation validator value values varchar variadic varying verbose version view volatile web when where whitespace window with within without work writable write xml xmlattributes xmlconcat xmlelement xmlexists xmlforest xmlparse xmlpi xmlroot xmlserialize year yes zone"),
        builtin: set("bigint int8 bigserial serial8 bit varying varbit boolean bool box bytea character char varchar cidr circle date double precision float float8 inet integer int int4 interval json jsonb line lseg macaddr macaddr8 money numeric decimal path pg_lsn point polygon real float4 smallint int2 smallserial serial2 serial serial4 text time without zone with timetz timestamp timestamptz tsquery tsvector txid_snapshot uuid xml"),
        atoms: set("false true null unknown"),
        operatorChars: /^[*+\-%<>!=&|^\/#@?~]/,
        dateSQL: set("date time timestamp"),
        support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber nCharCast charsetCast")
      });
      CodeMirror2.defineMIME("text/x-sparksql", {
        name: "sql",
        keywords: set("add after all alter analyze and anti archive array as asc at between bucket buckets by cache cascade case cast change clear cluster clustered codegen collection column columns comment commit compact compactions compute concatenate cost create cross cube current current_date current_timestamp database databases datata dbproperties defined delete delimited deny desc describe dfs directories distinct distribute drop else end escaped except exchange exists explain export extended external false fields fileformat first following for format formatted from full function functions global grant group grouping having if ignore import in index indexes inner inpath inputformat insert intersect interval into is items join keys last lateral lazy left like limit lines list load local location lock locks logical macro map minus msck natural no not null nulls of on optimize option options or order out outer outputformat over overwrite partition partitioned partitions percent preceding principals purge range recordreader recordwriter recover reduce refresh regexp rename repair replace reset restrict revoke right rlike role roles rollback rollup row rows schema schemas select semi separated serde serdeproperties set sets show skewed sort sorted start statistics stored stratify struct table tables tablesample tblproperties temp temporary terminated then to touch transaction transactions transform true truncate unarchive unbounded uncache union unlock unset use using values view when where window with"),
        builtin: set("tinyint smallint int bigint boolean float double string binary timestamp decimal array map struct uniontype delimited serde sequencefile textfile rcfile inputformat outputformat"),
        atoms: set("false true null"),
        operatorChars: /^[*\/+\-%<>!=~&|^]/,
        dateSQL: set("date time timestamp"),
        support: set("ODBCdotTable doubleQuote zerolessFloat")
      });
      CodeMirror2.defineMIME("text/x-esper", {
        name: "sql",
        client: set("source"),
        // http://www.espertech.com/esper/release-5.5.0/esper-reference/html/appendix_keywords.html
        keywords: set("alter and as asc between by count create delete desc distinct drop from group having in insert into is join like not on or order select set table union update values where limit after all and as at asc avedev avg between by case cast coalesce count create current_timestamp day days delete define desc distinct else end escape events every exists false first from full group having hour hours in inner insert instanceof into irstream is istream join last lastweekday left limit like max match_recognize matches median measures metadatasql min minute minutes msec millisecond milliseconds not null offset on or order outer output partition pattern prev prior regexp retain-union retain-intersection right rstream sec second seconds select set some snapshot sql stddev sum then true unidirectional until update variable weekday when where window"),
        builtin: {},
        atoms: set("false true null"),
        operatorChars: /^[*+\-%<>!=&|^\/#@?~]/,
        dateSQL: set("time"),
        support: set("decimallessFloat zerolessFloat binaryNumber hexNumber")
      });
    });
  }
});

// mode/stylus/stylus.js
var require_stylus = __commonJS({
  "mode/stylus/stylus.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("stylus", function(config) {
        var indentUnit = config.indentUnit, indentUnitString = "", tagKeywords = keySet(tagKeywords_), tagVariablesRegexp = /^(a|b|i|s|col|em)$/i, propertyKeywords = keySet(propertyKeywords_), nonStandardPropertyKeywords = keySet(nonStandardPropertyKeywords_), valueKeywords = keySet(valueKeywords_), colorKeywords = keySet(colorKeywords_), documentTypes = keySet(documentTypes_), documentTypesRegexp = wordRegexp(documentTypes_), mediaFeatures = keySet(mediaFeatures_), mediaTypes = keySet(mediaTypes_), fontProperties = keySet(fontProperties_), operatorsRegexp = /^\s*([.]{2,3}|&&|\|\||\*\*|[?!=:]?=|[-+*\/%<>]=?|\?:|\~)/, wordOperatorKeywordsRegexp = wordRegexp(wordOperatorKeywords_), blockKeywords = keySet(blockKeywords_), vendorPrefixesRegexp = new RegExp(/^\-(moz|ms|o|webkit)-/i), commonAtoms = keySet(commonAtoms_), firstWordMatch = "", states = {}, ch, style, type, override;
        while (indentUnitString.length < indentUnit)
          indentUnitString += " ";
        function tokenBase(stream, state) {
          firstWordMatch = stream.string.match(/(^[\w-]+\s*=\s*$)|(^\s*[\w-]+\s*=\s*[\w-])|(^\s*(\.|#|@|\$|\&|\[|\d|\+|::?|\{|\>|~|\/)?\s*[\w-]*([a-z0-9-]|\*|\/\*)(\(|,)?)/);
          state.context.line.firstWord = firstWordMatch ? firstWordMatch[0].replace(/^\s*/, "") : "";
          state.context.line.indent = stream.indentation();
          ch = stream.peek();
          if (stream.match("//")) {
            stream.skipToEnd();
            return ["comment", "comment"];
          }
          if (stream.match("/*")) {
            state.tokenize = tokenCComment;
            return tokenCComment(stream, state);
          }
          if (ch == '"' || ch == "'") {
            stream.next();
            state.tokenize = tokenString(ch);
            return state.tokenize(stream, state);
          }
          if (ch == "@") {
            stream.next();
            stream.eatWhile(/[\w\\-]/);
            return ["def", stream.current()];
          }
          if (ch == "#") {
            stream.next();
            if (stream.match(/^[0-9a-f]{3}([0-9a-f]([0-9a-f]{2}){0,2})?\b(?!-)/i)) {
              return ["atom", "atom"];
            }
            if (stream.match(/^[a-z][\w-]*/i)) {
              return ["builtin", "hash"];
            }
          }
          if (stream.match(vendorPrefixesRegexp)) {
            return ["meta", "vendor-prefixes"];
          }
          if (stream.match(/^-?[0-9]?\.?[0-9]/)) {
            stream.eatWhile(/[a-z%]/i);
            return ["number", "unit"];
          }
          if (ch == "!") {
            stream.next();
            return [stream.match(/^(important|optional)/i) ? "keyword" : "operator", "important"];
          }
          if (ch == "." && stream.match(/^\.[a-z][\w-]*/i)) {
            return ["qualifier", "qualifier"];
          }
          if (stream.match(documentTypesRegexp)) {
            if (stream.peek() == "(")
              state.tokenize = tokenParenthesized;
            return ["property", "word"];
          }
          if (stream.match(/^[a-z][\w-]*\(/i)) {
            stream.backUp(1);
            return ["keyword", "mixin"];
          }
          if (stream.match(/^(\+|-)[a-z][\w-]*\(/i)) {
            stream.backUp(1);
            return ["keyword", "block-mixin"];
          }
          if (stream.string.match(/^\s*&/) && stream.match(/^[-_]+[a-z][\w-]*/)) {
            return ["qualifier", "qualifier"];
          }
          if (stream.match(/^(\/|&)(-|_|:|\.|#|[a-z])/)) {
            stream.backUp(1);
            return ["variable-3", "reference"];
          }
          if (stream.match(/^&{1}\s*$/)) {
            return ["variable-3", "reference"];
          }
          if (stream.match(wordOperatorKeywordsRegexp)) {
            return ["operator", "operator"];
          }
          if (stream.match(/^\$?[-_]*[a-z0-9]+[\w-]*/i)) {
            if (stream.match(/^(\.|\[)[\w-\'\"\]]+/i, false)) {
              if (!wordIsTag(stream.current())) {
                stream.match(/\./);
                return ["variable-2", "variable-name"];
              }
            }
            return ["variable-2", "word"];
          }
          if (stream.match(operatorsRegexp)) {
            return ["operator", stream.current()];
          }
          if (/[:;,{}\[\]\(\)]/.test(ch)) {
            stream.next();
            return [null, ch];
          }
          stream.next();
          return [null, null];
        }
        function tokenCComment(stream, state) {
          var maybeEnd = false, ch2;
          while ((ch2 = stream.next()) != null) {
            if (maybeEnd && ch2 == "/") {
              state.tokenize = null;
              break;
            }
            maybeEnd = ch2 == "*";
          }
          return ["comment", "comment"];
        }
        function tokenString(quote) {
          return function(stream, state) {
            var escaped = false, ch2;
            while ((ch2 = stream.next()) != null) {
              if (ch2 == quote && !escaped) {
                if (quote == ")")
                  stream.backUp(1);
                break;
              }
              escaped = !escaped && ch2 == "\\";
            }
            if (ch2 == quote || !escaped && quote != ")")
              state.tokenize = null;
            return ["string", "string"];
          };
        }
        function tokenParenthesized(stream, state) {
          stream.next();
          if (!stream.match(/\s*[\"\')]/, false))
            state.tokenize = tokenString(")");
          else
            state.tokenize = null;
          return [null, "("];
        }
        function Context(type2, indent, prev, line) {
          this.type = type2;
          this.indent = indent;
          this.prev = prev;
          this.line = line || { firstWord: "", indent: 0 };
        }
        function pushContext(state, stream, type2, indent) {
          indent = indent >= 0 ? indent : indentUnit;
          state.context = new Context(type2, stream.indentation() + indent, state.context);
          return type2;
        }
        function popContext(state, currentIndent) {
          var contextIndent = state.context.indent - indentUnit;
          currentIndent = currentIndent || false;
          state.context = state.context.prev;
          if (currentIndent)
            state.context.indent = contextIndent;
          return state.context.type;
        }
        function pass(type2, stream, state) {
          return states[state.context.type](type2, stream, state);
        }
        function popAndPass(type2, stream, state, n) {
          for (var i = n || 1; i > 0; i--)
            state.context = state.context.prev;
          return pass(type2, stream, state);
        }
        function wordIsTag(word) {
          return word.toLowerCase() in tagKeywords;
        }
        function wordIsProperty(word) {
          word = word.toLowerCase();
          return word in propertyKeywords || word in fontProperties;
        }
        function wordIsBlock(word) {
          return word.toLowerCase() in blockKeywords;
        }
        function wordIsVendorPrefix(word) {
          return word.toLowerCase().match(vendorPrefixesRegexp);
        }
        function wordAsValue(word) {
          var wordLC = word.toLowerCase();
          var override2 = "variable-2";
          if (wordIsTag(word))
            override2 = "tag";
          else if (wordIsBlock(word))
            override2 = "block-keyword";
          else if (wordIsProperty(word))
            override2 = "property";
          else if (wordLC in valueKeywords || wordLC in commonAtoms)
            override2 = "atom";
          else if (wordLC == "return" || wordLC in colorKeywords)
            override2 = "keyword";
          else if (word.match(/^[A-Z]/))
            override2 = "string";
          return override2;
        }
        function typeIsBlock(type2, stream) {
          return endOfLine(stream) && (type2 == "{" || type2 == "]" || type2 == "hash" || type2 == "qualifier") || type2 == "block-mixin";
        }
        function typeIsInterpolation(type2, stream) {
          return type2 == "{" && stream.match(/^\s*\$?[\w-]+/i, false);
        }
        function typeIsPseudo(type2, stream) {
          return type2 == ":" && stream.match(/^[a-z-]+/, false);
        }
        function startOfLine(stream) {
          return stream.sol() || stream.string.match(new RegExp("^\\s*" + escapeRegExp(stream.current())));
        }
        function endOfLine(stream) {
          return stream.eol() || stream.match(/^\s*$/, false);
        }
        function firstWordOfLine(line) {
          var re = /^\s*[-_]*[a-z0-9]+[\w-]*/i;
          var result = typeof line == "string" ? line.match(re) : line.string.match(re);
          return result ? result[0].replace(/^\s*/, "") : "";
        }
        states.block = function(type2, stream, state) {
          if (type2 == "comment" && startOfLine(stream) || type2 == "," && endOfLine(stream) || type2 == "mixin") {
            return pushContext(state, stream, "block", 0);
          }
          if (typeIsInterpolation(type2, stream)) {
            return pushContext(state, stream, "interpolation");
          }
          if (endOfLine(stream) && type2 == "]") {
            if (!/^\s*(\.|#|:|\[|\*|&)/.test(stream.string) && !wordIsTag(firstWordOfLine(stream))) {
              return pushContext(state, stream, "block", 0);
            }
          }
          if (typeIsBlock(type2, stream)) {
            return pushContext(state, stream, "block");
          }
          if (type2 == "}" && endOfLine(stream)) {
            return pushContext(state, stream, "block", 0);
          }
          if (type2 == "variable-name") {
            if (stream.string.match(/^\s?\$[\w-\.\[\]\'\"]+$/) || wordIsBlock(firstWordOfLine(stream))) {
              return pushContext(state, stream, "variableName");
            } else {
              return pushContext(state, stream, "variableName", 0);
            }
          }
          if (type2 == "=") {
            if (!endOfLine(stream) && !wordIsBlock(firstWordOfLine(stream))) {
              return pushContext(state, stream, "block", 0);
            }
            return pushContext(state, stream, "block");
          }
          if (type2 == "*") {
            if (endOfLine(stream) || stream.match(/\s*(,|\.|#|\[|:|{)/, false)) {
              override = "tag";
              return pushContext(state, stream, "block");
            }
          }
          if (typeIsPseudo(type2, stream)) {
            return pushContext(state, stream, "pseudo");
          }
          if (/@(font-face|media|supports|(-moz-)?document)/.test(type2)) {
            return pushContext(state, stream, endOfLine(stream) ? "block" : "atBlock");
          }
          if (/@(-(moz|ms|o|webkit)-)?keyframes$/.test(type2)) {
            return pushContext(state, stream, "keyframes");
          }
          if (/@extends?/.test(type2)) {
            return pushContext(state, stream, "extend", 0);
          }
          if (type2 && type2.charAt(0) == "@") {
            if (stream.indentation() > 0 && wordIsProperty(stream.current().slice(1))) {
              override = "variable-2";
              return "block";
            }
            if (/(@import|@require|@charset)/.test(type2)) {
              return pushContext(state, stream, "block", 0);
            }
            return pushContext(state, stream, "block");
          }
          if (type2 == "reference" && endOfLine(stream)) {
            return pushContext(state, stream, "block");
          }
          if (type2 == "(") {
            return pushContext(state, stream, "parens");
          }
          if (type2 == "vendor-prefixes") {
            return pushContext(state, stream, "vendorPrefixes");
          }
          if (type2 == "word") {
            var word = stream.current();
            override = wordAsValue(word);
            if (override == "property") {
              if (startOfLine(stream)) {
                return pushContext(state, stream, "block", 0);
              } else {
                override = "atom";
                return "block";
              }
            }
            if (override == "tag") {
              if (/embed|menu|pre|progress|sub|table/.test(word)) {
                if (wordIsProperty(firstWordOfLine(stream))) {
                  override = "atom";
                  return "block";
                }
              }
              if (stream.string.match(new RegExp("\\[\\s*" + word + "|" + word + "\\s*\\]"))) {
                override = "atom";
                return "block";
              }
              if (tagVariablesRegexp.test(word)) {
                if (startOfLine(stream) && stream.string.match(/=/) || !startOfLine(stream) && !stream.string.match(/^(\s*\.|#|\&|\[|\/|>|\*)/) && !wordIsTag(firstWordOfLine(stream))) {
                  override = "variable-2";
                  if (wordIsBlock(firstWordOfLine(stream)))
                    return "block";
                  return pushContext(state, stream, "block", 0);
                }
              }
              if (endOfLine(stream))
                return pushContext(state, stream, "block");
            }
            if (override == "block-keyword") {
              override = "keyword";
              if (stream.current(/(if|unless)/) && !startOfLine(stream)) {
                return "block";
              }
              return pushContext(state, stream, "block");
            }
            if (word == "return")
              return pushContext(state, stream, "block", 0);
            if (override == "variable-2" && stream.string.match(/^\s?\$[\w-\.\[\]\'\"]+$/)) {
              return pushContext(state, stream, "block");
            }
          }
          return state.context.type;
        };
        states.parens = function(type2, stream, state) {
          if (type2 == "(")
            return pushContext(state, stream, "parens");
          if (type2 == ")") {
            if (state.context.prev.type == "parens") {
              return popContext(state);
            }
            if (stream.string.match(/^[a-z][\w-]*\(/i) && endOfLine(stream) || wordIsBlock(firstWordOfLine(stream)) || /(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(firstWordOfLine(stream)) || !stream.string.match(/^-?[a-z][\w-\.\[\]\'\"]*\s*=/) && wordIsTag(firstWordOfLine(stream))) {
              return pushContext(state, stream, "block");
            }
            if (stream.string.match(/^[\$-]?[a-z][\w-\.\[\]\'\"]*\s*=/) || stream.string.match(/^\s*(\(|\)|[0-9])/) || stream.string.match(/^\s+[a-z][\w-]*\(/i) || stream.string.match(/^\s+[\$-]?[a-z]/i)) {
              return pushContext(state, stream, "block", 0);
            }
            if (endOfLine(stream))
              return pushContext(state, stream, "block");
            else
              return pushContext(state, stream, "block", 0);
          }
          if (type2 && type2.charAt(0) == "@" && wordIsProperty(stream.current().slice(1))) {
            override = "variable-2";
          }
          if (type2 == "word") {
            var word = stream.current();
            override = wordAsValue(word);
            if (override == "tag" && tagVariablesRegexp.test(word)) {
              override = "variable-2";
            }
            if (override == "property" || word == "to")
              override = "atom";
          }
          if (type2 == "variable-name") {
            return pushContext(state, stream, "variableName");
          }
          if (typeIsPseudo(type2, stream)) {
            return pushContext(state, stream, "pseudo");
          }
          return state.context.type;
        };
        states.vendorPrefixes = function(type2, stream, state) {
          if (type2 == "word") {
            override = "property";
            return pushContext(state, stream, "block", 0);
          }
          return popContext(state);
        };
        states.pseudo = function(type2, stream, state) {
          if (!wordIsProperty(firstWordOfLine(stream.string))) {
            stream.match(/^[a-z-]+/);
            override = "variable-3";
            if (endOfLine(stream))
              return pushContext(state, stream, "block");
            return popContext(state);
          }
          return popAndPass(type2, stream, state);
        };
        states.atBlock = function(type2, stream, state) {
          if (type2 == "(")
            return pushContext(state, stream, "atBlock_parens");
          if (typeIsBlock(type2, stream)) {
            return pushContext(state, stream, "block");
          }
          if (typeIsInterpolation(type2, stream)) {
            return pushContext(state, stream, "interpolation");
          }
          if (type2 == "word") {
            var word = stream.current().toLowerCase();
            if (/^(only|not|and|or)$/.test(word))
              override = "keyword";
            else if (documentTypes.hasOwnProperty(word))
              override = "tag";
            else if (mediaTypes.hasOwnProperty(word))
              override = "attribute";
            else if (mediaFeatures.hasOwnProperty(word))
              override = "property";
            else if (nonStandardPropertyKeywords.hasOwnProperty(word))
              override = "string-2";
            else
              override = wordAsValue(stream.current());
            if (override == "tag" && endOfLine(stream)) {
              return pushContext(state, stream, "block");
            }
          }
          if (type2 == "operator" && /^(not|and|or)$/.test(stream.current())) {
            override = "keyword";
          }
          return state.context.type;
        };
        states.atBlock_parens = function(type2, stream, state) {
          if (type2 == "{" || type2 == "}")
            return state.context.type;
          if (type2 == ")") {
            if (endOfLine(stream))
              return pushContext(state, stream, "block");
            else
              return pushContext(state, stream, "atBlock");
          }
          if (type2 == "word") {
            var word = stream.current().toLowerCase();
            override = wordAsValue(word);
            if (/^(max|min)/.test(word))
              override = "property";
            if (override == "tag") {
              tagVariablesRegexp.test(word) ? override = "variable-2" : override = "atom";
            }
            return state.context.type;
          }
          return states.atBlock(type2, stream, state);
        };
        states.keyframes = function(type2, stream, state) {
          if (stream.indentation() == "0" && (type2 == "}" && startOfLine(stream) || type2 == "]" || type2 == "hash" || type2 == "qualifier" || wordIsTag(stream.current()))) {
            return popAndPass(type2, stream, state);
          }
          if (type2 == "{")
            return pushContext(state, stream, "keyframes");
          if (type2 == "}") {
            if (startOfLine(stream))
              return popContext(state, true);
            else
              return pushContext(state, stream, "keyframes");
          }
          if (type2 == "unit" && /^[0-9]+\%$/.test(stream.current())) {
            return pushContext(state, stream, "keyframes");
          }
          if (type2 == "word") {
            override = wordAsValue(stream.current());
            if (override == "block-keyword") {
              override = "keyword";
              return pushContext(state, stream, "keyframes");
            }
          }
          if (/@(font-face|media|supports|(-moz-)?document)/.test(type2)) {
            return pushContext(state, stream, endOfLine(stream) ? "block" : "atBlock");
          }
          if (type2 == "mixin") {
            return pushContext(state, stream, "block", 0);
          }
          return state.context.type;
        };
        states.interpolation = function(type2, stream, state) {
          if (type2 == "{")
            popContext(state) && pushContext(state, stream, "block");
          if (type2 == "}") {
            if (stream.string.match(/^\s*(\.|#|:|\[|\*|&|>|~|\+|\/)/i) || stream.string.match(/^\s*[a-z]/i) && wordIsTag(firstWordOfLine(stream))) {
              return pushContext(state, stream, "block");
            }
            if (!stream.string.match(/^(\{|\s*\&)/) || stream.match(/\s*[\w-]/, false)) {
              return pushContext(state, stream, "block", 0);
            }
            return pushContext(state, stream, "block");
          }
          if (type2 == "variable-name") {
            return pushContext(state, stream, "variableName", 0);
          }
          if (type2 == "word") {
            override = wordAsValue(stream.current());
            if (override == "tag")
              override = "atom";
          }
          return state.context.type;
        };
        states.extend = function(type2, stream, state) {
          if (type2 == "[" || type2 == "=")
            return "extend";
          if (type2 == "]")
            return popContext(state);
          if (type2 == "word") {
            override = wordAsValue(stream.current());
            return "extend";
          }
          return popContext(state);
        };
        states.variableName = function(type2, stream, state) {
          if (type2 == "string" || type2 == "[" || type2 == "]" || stream.current().match(/^(\.|\$)/)) {
            if (stream.current().match(/^\.[\w-]+/i))
              override = "variable-2";
            return "variableName";
          }
          return popAndPass(type2, stream, state);
        };
        return {
          startState: function(base) {
            return {
              tokenize: null,
              state: "block",
              context: new Context("block", base || 0, null)
            };
          },
          token: function(stream, state) {
            if (!state.tokenize && stream.eatSpace())
              return null;
            style = (state.tokenize || tokenBase)(stream, state);
            if (style && typeof style == "object") {
              type = style[1];
              style = style[0];
            }
            override = style;
            state.state = states[state.state](type, stream, state);
            return override;
          },
          indent: function(state, textAfter, line) {
            var cx = state.context, ch2 = textAfter && textAfter.charAt(0), indent = cx.indent, lineFirstWord = firstWordOfLine(textAfter), lineIndent = line.match(/^\s*/)[0].replace(/\t/g, indentUnitString).length, prevLineFirstWord = state.context.prev ? state.context.prev.line.firstWord : "", prevLineIndent = state.context.prev ? state.context.prev.line.indent : lineIndent;
            if (cx.prev && (ch2 == "}" && (cx.type == "block" || cx.type == "atBlock" || cx.type == "keyframes") || ch2 == ")" && (cx.type == "parens" || cx.type == "atBlock_parens") || ch2 == "{" && cx.type == "at")) {
              indent = cx.indent - indentUnit;
            } else if (!/(\})/.test(ch2)) {
              if (/@|\$|\d/.test(ch2) || /^\{/.test(textAfter) || /^\s*\/(\/|\*)/.test(textAfter) || /^\s*\/\*/.test(prevLineFirstWord) || /^\s*[\w-\.\[\]\'\"]+\s*(\?|:|\+)?=/i.test(textAfter) || /^(\+|-)?[a-z][\w-]*\(/i.test(textAfter) || /^return/.test(textAfter) || wordIsBlock(lineFirstWord)) {
                indent = lineIndent;
              } else if (/(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(ch2) || wordIsTag(lineFirstWord)) {
                if (/\,\s*$/.test(prevLineFirstWord)) {
                  indent = prevLineIndent;
                } else if (/^\s+/.test(line) && (/(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(prevLineFirstWord) || wordIsTag(prevLineFirstWord))) {
                  indent = lineIndent <= prevLineIndent ? prevLineIndent : prevLineIndent + indentUnit;
                } else {
                  indent = lineIndent;
                }
              } else if (!/,\s*$/.test(line) && (wordIsVendorPrefix(lineFirstWord) || wordIsProperty(lineFirstWord))) {
                if (wordIsBlock(prevLineFirstWord)) {
                  indent = lineIndent <= prevLineIndent ? prevLineIndent : prevLineIndent + indentUnit;
                } else if (/^\{/.test(prevLineFirstWord)) {
                  indent = lineIndent <= prevLineIndent ? lineIndent : prevLineIndent + indentUnit;
                } else if (wordIsVendorPrefix(prevLineFirstWord) || wordIsProperty(prevLineFirstWord)) {
                  indent = lineIndent >= prevLineIndent ? prevLineIndent : lineIndent;
                } else if (/^(\.|#|:|\[|\*|&|@|\+|\-|>|~|\/)/.test(prevLineFirstWord) || /=\s*$/.test(prevLineFirstWord) || wordIsTag(prevLineFirstWord) || /^\$[\w-\.\[\]\'\"]/.test(prevLineFirstWord)) {
                  indent = prevLineIndent + indentUnit;
                } else {
                  indent = lineIndent;
                }
              }
            }
            return indent;
          },
          electricChars: "}",
          lineComment: "//",
          fold: "indent"
        };
      });
      var tagKeywords_ = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "bgsound", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "marquee", "menu", "menuitem", "meta", "meter", "nav", "nobr", "noframes", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "u", "ul", "var", "video"];
      var documentTypes_ = ["domain", "regexp", "url-prefix", "url"];
      var mediaTypes_ = ["all", "aural", "braille", "handheld", "print", "projection", "screen", "tty", "tv", "embossed"];
      var mediaFeatures_ = ["width", "min-width", "max-width", "height", "min-height", "max-height", "device-width", "min-device-width", "max-device-width", "device-height", "min-device-height", "max-device-height", "aspect-ratio", "min-aspect-ratio", "max-aspect-ratio", "device-aspect-ratio", "min-device-aspect-ratio", "max-device-aspect-ratio", "color", "min-color", "max-color", "color-index", "min-color-index", "max-color-index", "monochrome", "min-monochrome", "max-monochrome", "resolution", "min-resolution", "max-resolution", "scan", "grid"];
      var propertyKeywords_ = ["align-content", "align-items", "align-self", "alignment-adjust", "alignment-baseline", "anchor-point", "animation", "animation-delay", "animation-direction", "animation-duration", "animation-fill-mode", "animation-iteration-count", "animation-name", "animation-play-state", "animation-timing-function", "appearance", "azimuth", "backface-visibility", "background", "background-attachment", "background-clip", "background-color", "background-image", "background-origin", "background-position", "background-repeat", "background-size", "baseline-shift", "binding", "bleed", "bookmark-label", "bookmark-level", "bookmark-state", "bookmark-target", "border", "border-bottom", "border-bottom-color", "border-bottom-left-radius", "border-bottom-right-radius", "border-bottom-style", "border-bottom-width", "border-collapse", "border-color", "border-image", "border-image-outset", "border-image-repeat", "border-image-slice", "border-image-source", "border-image-width", "border-left", "border-left-color", "border-left-style", "border-left-width", "border-radius", "border-right", "border-right-color", "border-right-style", "border-right-width", "border-spacing", "border-style", "border-top", "border-top-color", "border-top-left-radius", "border-top-right-radius", "border-top-style", "border-top-width", "border-width", "bottom", "box-decoration-break", "box-shadow", "box-sizing", "break-after", "break-before", "break-inside", "caption-side", "clear", "clip", "color", "color-profile", "column-count", "column-fill", "column-gap", "column-rule", "column-rule-color", "column-rule-style", "column-rule-width", "column-span", "column-width", "columns", "content", "counter-increment", "counter-reset", "crop", "cue", "cue-after", "cue-before", "cursor", "direction", "display", "dominant-baseline", "drop-initial-after-adjust", "drop-initial-after-align", "drop-initial-before-adjust", "drop-initial-before-align", "drop-initial-size", "drop-initial-value", "elevation", "empty-cells", "fit", "fit-position", "flex", "flex-basis", "flex-direction", "flex-flow", "flex-grow", "flex-shrink", "flex-wrap", "float", "float-offset", "flow-from", "flow-into", "font", "font-feature-settings", "font-family", "font-kerning", "font-language-override", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-synthesis", "font-variant", "font-variant-alternates", "font-variant-caps", "font-variant-east-asian", "font-variant-ligatures", "font-variant-numeric", "font-variant-position", "font-weight", "grid", "grid-area", "grid-auto-columns", "grid-auto-flow", "grid-auto-position", "grid-auto-rows", "grid-column", "grid-column-end", "grid-column-start", "grid-row", "grid-row-end", "grid-row-start", "grid-template", "grid-template-areas", "grid-template-columns", "grid-template-rows", "hanging-punctuation", "height", "hyphens", "icon", "image-orientation", "image-rendering", "image-resolution", "inline-box-align", "justify-content", "left", "letter-spacing", "line-break", "line-height", "line-stacking", "line-stacking-ruby", "line-stacking-shift", "line-stacking-strategy", "list-style", "list-style-image", "list-style-position", "list-style-type", "margin", "margin-bottom", "margin-left", "margin-right", "margin-top", "marker-offset", "marks", "marquee-direction", "marquee-loop", "marquee-play-count", "marquee-speed", "marquee-style", "max-height", "max-width", "min-height", "min-width", "move-to", "nav-down", "nav-index", "nav-left", "nav-right", "nav-up", "object-fit", "object-position", "opacity", "order", "orphans", "outline", "outline-color", "outline-offset", "outline-style", "outline-width", "overflow", "overflow-style", "overflow-wrap", "overflow-x", "overflow-y", "padding", "padding-bottom", "padding-left", "padding-right", "padding-top", "page", "page-break-after", "page-break-before", "page-break-inside", "page-policy", "pause", "pause-after", "pause-before", "perspective", "perspective-origin", "pitch", "pitch-range", "play-during", "position", "presentation-level", "punctuation-trim", "quotes", "region-break-after", "region-break-before", "region-break-inside", "region-fragment", "rendering-intent", "resize", "rest", "rest-after", "rest-before", "richness", "right", "rotation", "rotation-point", "ruby-align", "ruby-overhang", "ruby-position", "ruby-span", "shape-image-threshold", "shape-inside", "shape-margin", "shape-outside", "size", "speak", "speak-as", "speak-header", "speak-numeral", "speak-punctuation", "speech-rate", "stress", "string-set", "tab-size", "table-layout", "target", "target-name", "target-new", "target-position", "text-align", "text-align-last", "text-decoration", "text-decoration-color", "text-decoration-line", "text-decoration-skip", "text-decoration-style", "text-emphasis", "text-emphasis-color", "text-emphasis-position", "text-emphasis-style", "text-height", "text-indent", "text-justify", "text-outline", "text-overflow", "text-shadow", "text-size-adjust", "text-space-collapse", "text-transform", "text-underline-position", "text-wrap", "top", "transform", "transform-origin", "transform-style", "transition", "transition-delay", "transition-duration", "transition-property", "transition-timing-function", "unicode-bidi", "vertical-align", "visibility", "voice-balance", "voice-duration", "voice-family", "voice-pitch", "voice-range", "voice-rate", "voice-stress", "voice-volume", "volume", "white-space", "widows", "width", "will-change", "word-break", "word-spacing", "word-wrap", "z-index", "clip-path", "clip-rule", "mask", "enable-background", "filter", "flood-color", "flood-opacity", "lighting-color", "stop-color", "stop-opacity", "pointer-events", "color-interpolation", "color-interpolation-filters", "color-rendering", "fill", "fill-opacity", "fill-rule", "image-rendering", "marker", "marker-end", "marker-mid", "marker-start", "shape-rendering", "stroke", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke-width", "text-rendering", "baseline-shift", "dominant-baseline", "glyph-orientation-horizontal", "glyph-orientation-vertical", "text-anchor", "writing-mode", "font-smoothing", "osx-font-smoothing"];
      var nonStandardPropertyKeywords_ = ["scrollbar-arrow-color", "scrollbar-base-color", "scrollbar-dark-shadow-color", "scrollbar-face-color", "scrollbar-highlight-color", "scrollbar-shadow-color", "scrollbar-3d-light-color", "scrollbar-track-color", "shape-inside", "searchfield-cancel-button", "searchfield-decoration", "searchfield-results-button", "searchfield-results-decoration", "zoom"];
      var fontProperties_ = ["font-family", "src", "unicode-range", "font-variant", "font-feature-settings", "font-stretch", "font-weight", "font-style"];
      var colorKeywords_ = ["aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown", "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightpink", "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray", "lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta", "maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple", "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise", "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin", "navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered", "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred", "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue", "purple", "rebeccapurple", "red", "rosybrown", "royalblue", "saddlebrown", "salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue", "slateblue", "slategray", "snow", "springgreen", "steelblue", "tan", "teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white", "whitesmoke", "yellow", "yellowgreen"];
      var valueKeywords_ = ["above", "absolute", "activeborder", "additive", "activecaption", "afar", "after-white-space", "ahead", "alias", "all", "all-scroll", "alphabetic", "alternate", "always", "amharic", "amharic-abegede", "antialiased", "appworkspace", "arabic-indic", "armenian", "asterisks", "attr", "auto", "avoid", "avoid-column", "avoid-page", "avoid-region", "background", "backwards", "baseline", "below", "bidi-override", "binary", "bengali", "blink", "block", "block-axis", "bold", "bolder", "border", "border-box", "both", "bottom", "break", "break-all", "break-word", "bullets", "button", "button-bevel", "buttonface", "buttonhighlight", "buttonshadow", "buttontext", "calc", "cambodian", "capitalize", "caps-lock-indicator", "caption", "captiontext", "caret", "cell", "center", "checkbox", "circle", "cjk-decimal", "cjk-earthly-branch", "cjk-heavenly-stem", "cjk-ideographic", "clear", "clip", "close-quote", "col-resize", "collapse", "column", "compact", "condensed", "contain", "content", "contents", "content-box", "context-menu", "continuous", "copy", "counter", "counters", "cover", "crop", "cross", "crosshair", "currentcolor", "cursive", "cyclic", "dashed", "decimal", "decimal-leading-zero", "default", "default-button", "destination-atop", "destination-in", "destination-out", "destination-over", "devanagari", "disc", "discard", "disclosure-closed", "disclosure-open", "document", "dot-dash", "dot-dot-dash", "dotted", "double", "down", "e-resize", "ease", "ease-in", "ease-in-out", "ease-out", "element", "ellipse", "ellipsis", "embed", "end", "ethiopic", "ethiopic-abegede", "ethiopic-abegede-am-et", "ethiopic-abegede-gez", "ethiopic-abegede-ti-er", "ethiopic-abegede-ti-et", "ethiopic-halehame-aa-er", "ethiopic-halehame-aa-et", "ethiopic-halehame-am-et", "ethiopic-halehame-gez", "ethiopic-halehame-om-et", "ethiopic-halehame-sid-et", "ethiopic-halehame-so-et", "ethiopic-halehame-ti-er", "ethiopic-halehame-ti-et", "ethiopic-halehame-tig", "ethiopic-numeric", "ew-resize", "expanded", "extends", "extra-condensed", "extra-expanded", "fantasy", "fast", "fill", "fixed", "flat", "flex", "footnotes", "forwards", "from", "geometricPrecision", "georgian", "graytext", "groove", "gujarati", "gurmukhi", "hand", "hangul", "hangul-consonant", "hebrew", "help", "hidden", "hide", "higher", "highlight", "highlighttext", "hiragana", "hiragana-iroha", "horizontal", "hsl", "hsla", "icon", "ignore", "inactiveborder", "inactivecaption", "inactivecaptiontext", "infinite", "infobackground", "infotext", "inherit", "initial", "inline", "inline-axis", "inline-block", "inline-flex", "inline-table", "inset", "inside", "intrinsic", "invert", "italic", "japanese-formal", "japanese-informal", "justify", "kannada", "katakana", "katakana-iroha", "keep-all", "khmer", "korean-hangul-formal", "korean-hanja-formal", "korean-hanja-informal", "landscape", "lao", "large", "larger", "left", "level", "lighter", "line-through", "linear", "linear-gradient", "lines", "list-item", "listbox", "listitem", "local", "logical", "loud", "lower", "lower-alpha", "lower-armenian", "lower-greek", "lower-hexadecimal", "lower-latin", "lower-norwegian", "lower-roman", "lowercase", "ltr", "malayalam", "match", "matrix", "matrix3d", "media-controls-background", "media-current-time-display", "media-fullscreen-button", "media-mute-button", "media-play-button", "media-return-to-realtime-button", "media-rewind-button", "media-seek-back-button", "media-seek-forward-button", "media-slider", "media-sliderthumb", "media-time-remaining-display", "media-volume-slider", "media-volume-slider-container", "media-volume-sliderthumb", "medium", "menu", "menulist", "menulist-button", "menulist-text", "menulist-textfield", "menutext", "message-box", "middle", "min-intrinsic", "mix", "mongolian", "monospace", "move", "multiple", "myanmar", "n-resize", "narrower", "ne-resize", "nesw-resize", "no-close-quote", "no-drop", "no-open-quote", "no-repeat", "none", "normal", "not-allowed", "nowrap", "ns-resize", "numbers", "numeric", "nw-resize", "nwse-resize", "oblique", "octal", "open-quote", "optimizeLegibility", "optimizeSpeed", "oriya", "oromo", "outset", "outside", "outside-shape", "overlay", "overline", "padding", "padding-box", "painted", "page", "paused", "persian", "perspective", "plus-darker", "plus-lighter", "pointer", "polygon", "portrait", "pre", "pre-line", "pre-wrap", "preserve-3d", "progress", "push-button", "radial-gradient", "radio", "read-only", "read-write", "read-write-plaintext-only", "rectangle", "region", "relative", "repeat", "repeating-linear-gradient", "repeating-radial-gradient", "repeat-x", "repeat-y", "reset", "reverse", "rgb", "rgba", "ridge", "right", "rotate", "rotate3d", "rotateX", "rotateY", "rotateZ", "round", "row-resize", "rtl", "run-in", "running", "s-resize", "sans-serif", "scale", "scale3d", "scaleX", "scaleY", "scaleZ", "scroll", "scrollbar", "scroll-position", "se-resize", "searchfield", "searchfield-cancel-button", "searchfield-decoration", "searchfield-results-button", "searchfield-results-decoration", "semi-condensed", "semi-expanded", "separate", "serif", "show", "sidama", "simp-chinese-formal", "simp-chinese-informal", "single", "skew", "skewX", "skewY", "skip-white-space", "slide", "slider-horizontal", "slider-vertical", "sliderthumb-horizontal", "sliderthumb-vertical", "slow", "small", "small-caps", "small-caption", "smaller", "solid", "somali", "source-atop", "source-in", "source-out", "source-over", "space", "spell-out", "square", "square-button", "start", "static", "status-bar", "stretch", "stroke", "sub", "subpixel-antialiased", "super", "sw-resize", "symbolic", "symbols", "table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row", "table-row-group", "tamil", "telugu", "text", "text-bottom", "text-top", "textarea", "textfield", "thai", "thick", "thin", "threeddarkshadow", "threedface", "threedhighlight", "threedlightshadow", "threedshadow", "tibetan", "tigre", "tigrinya-er", "tigrinya-er-abegede", "tigrinya-et", "tigrinya-et-abegede", "to", "top", "trad-chinese-formal", "trad-chinese-informal", "translate", "translate3d", "translateX", "translateY", "translateZ", "transparent", "ultra-condensed", "ultra-expanded", "underline", "up", "upper-alpha", "upper-armenian", "upper-greek", "upper-hexadecimal", "upper-latin", "upper-norwegian", "upper-roman", "uppercase", "urdu", "url", "var", "vertical", "vertical-text", "visible", "visibleFill", "visiblePainted", "visibleStroke", "visual", "w-resize", "wait", "wave", "wider", "window", "windowframe", "windowtext", "words", "x-large", "x-small", "xor", "xx-large", "xx-small", "bicubic", "optimizespeed", "grayscale", "row", "row-reverse", "wrap", "wrap-reverse", "column-reverse", "flex-start", "flex-end", "space-between", "space-around", "unset"];
      var wordOperatorKeywords_ = ["in", "and", "or", "not", "is not", "is a", "is", "isnt", "defined", "if unless"], blockKeywords_ = ["for", "if", "else", "unless", "from", "to"], commonAtoms_ = ["null", "true", "false", "href", "title", "type", "not-allowed", "readonly", "disabled"], commonDef_ = ["@font-face", "@keyframes", "@media", "@viewport", "@page", "@host", "@supports", "@block", "@css"];
      var hintWords = tagKeywords_.concat(
        documentTypes_,
        mediaTypes_,
        mediaFeatures_,
        propertyKeywords_,
        nonStandardPropertyKeywords_,
        colorKeywords_,
        valueKeywords_,
        fontProperties_,
        wordOperatorKeywords_,
        blockKeywords_,
        commonAtoms_,
        commonDef_
      );
      function wordRegexp(words) {
        words = words.sort(function(a, b) {
          return b > a;
        });
        return new RegExp("^((" + words.join(")|(") + "))\\b");
      }
      function keySet(array) {
        var keys = {};
        for (var i = 0; i < array.length; ++i)
          keys[array[i]] = true;
        return keys;
      }
      function escapeRegExp(text) {
        return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
      }
      CodeMirror2.registerHelper("hintWords", "stylus", hintWords);
      CodeMirror2.defineMIME("text/x-styl", "stylus");
    });
  }
});

// mode/swift/swift.js
var require_swift = __commonJS({
  "mode/swift/swift.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      function wordSet(words) {
        var set = {};
        for (var i = 0; i < words.length; i++)
          set[words[i]] = true;
        return set;
      }
      var keywords = wordSet([
        "_",
        "var",
        "let",
        "class",
        "enum",
        "extension",
        "import",
        "protocol",
        "struct",
        "func",
        "typealias",
        "associatedtype",
        "open",
        "public",
        "internal",
        "fileprivate",
        "private",
        "deinit",
        "init",
        "new",
        "override",
        "self",
        "subscript",
        "super",
        "convenience",
        "dynamic",
        "final",
        "indirect",
        "lazy",
        "required",
        "static",
        "unowned",
        "unowned(safe)",
        "unowned(unsafe)",
        "weak",
        "as",
        "is",
        "break",
        "case",
        "continue",
        "default",
        "else",
        "fallthrough",
        "for",
        "guard",
        "if",
        "in",
        "repeat",
        "switch",
        "where",
        "while",
        "defer",
        "return",
        "inout",
        "mutating",
        "nonmutating",
        "catch",
        "do",
        "rethrows",
        "throw",
        "throws",
        "try",
        "didSet",
        "get",
        "set",
        "willSet",
        "assignment",
        "associativity",
        "infix",
        "left",
        "none",
        "operator",
        "postfix",
        "precedence",
        "precedencegroup",
        "prefix",
        "right",
        "Any",
        "AnyObject",
        "Type",
        "dynamicType",
        "Self",
        "Protocol",
        "__COLUMN__",
        "__FILE__",
        "__FUNCTION__",
        "__LINE__"
      ]);
      var definingKeywords = wordSet(["var", "let", "class", "enum", "extension", "import", "protocol", "struct", "func", "typealias", "associatedtype", "for"]);
      var atoms = wordSet(["true", "false", "nil", "self", "super", "_"]);
      var types = wordSet([
        "Array",
        "Bool",
        "Character",
        "Dictionary",
        "Double",
        "Float",
        "Int",
        "Int8",
        "Int16",
        "Int32",
        "Int64",
        "Never",
        "Optional",
        "Set",
        "String",
        "UInt8",
        "UInt16",
        "UInt32",
        "UInt64",
        "Void"
      ]);
      var operators = "+-/*%=|&<>~^?!";
      var punc = ":;,.(){}[]";
      var binary = /^\-?0b[01][01_]*/;
      var octal = /^\-?0o[0-7][0-7_]*/;
      var hexadecimal = /^\-?0x[\dA-Fa-f][\dA-Fa-f_]*(?:(?:\.[\dA-Fa-f][\dA-Fa-f_]*)?[Pp]\-?\d[\d_]*)?/;
      var decimal = /^\-?\d[\d_]*(?:\.\d[\d_]*)?(?:[Ee]\-?\d[\d_]*)?/;
      var identifier = /^\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1/;
      var property = /^\.(?:\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1)/;
      var instruction = /^\#[A-Za-z]+/;
      var attribute = /^@(?:\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1)/;
      function tokenBase(stream, state, prev) {
        if (stream.sol())
          state.indented = stream.indentation();
        if (stream.eatSpace())
          return null;
        var ch = stream.peek();
        if (ch == "/") {
          if (stream.match("//")) {
            stream.skipToEnd();
            return "comment";
          }
          if (stream.match("/*")) {
            state.tokenize.push(tokenComment);
            return tokenComment(stream, state);
          }
        }
        if (stream.match(instruction))
          return "builtin";
        if (stream.match(attribute))
          return "attribute";
        if (stream.match(binary))
          return "number";
        if (stream.match(octal))
          return "number";
        if (stream.match(hexadecimal))
          return "number";
        if (stream.match(decimal))
          return "number";
        if (stream.match(property))
          return "property";
        if (operators.indexOf(ch) > -1) {
          stream.next();
          return "operator";
        }
        if (punc.indexOf(ch) > -1) {
          stream.next();
          stream.match("..");
          return "punctuation";
        }
        var stringMatch;
        if (stringMatch = stream.match(/("""|"|')/)) {
          var tokenize = tokenString.bind(null, stringMatch[0]);
          state.tokenize.push(tokenize);
          return tokenize(stream, state);
        }
        if (stream.match(identifier)) {
          var ident = stream.current();
          if (types.hasOwnProperty(ident))
            return "variable-2";
          if (atoms.hasOwnProperty(ident))
            return "atom";
          if (keywords.hasOwnProperty(ident)) {
            if (definingKeywords.hasOwnProperty(ident))
              state.prev = "define";
            return "keyword";
          }
          if (prev == "define")
            return "def";
          return "variable";
        }
        stream.next();
        return null;
      }
      function tokenUntilClosingParen() {
        var depth = 0;
        return function(stream, state, prev) {
          var inner = tokenBase(stream, state, prev);
          if (inner == "punctuation") {
            if (stream.current() == "(")
              ++depth;
            else if (stream.current() == ")") {
              if (depth == 0) {
                stream.backUp(1);
                state.tokenize.pop();
                return state.tokenize[state.tokenize.length - 1](stream, state);
              } else
                --depth;
            }
          }
          return inner;
        };
      }
      function tokenString(openQuote, stream, state) {
        var singleLine = openQuote.length == 1;
        var ch, escaped = false;
        while (ch = stream.peek()) {
          if (escaped) {
            stream.next();
            if (ch == "(") {
              state.tokenize.push(tokenUntilClosingParen());
              return "string";
            }
            escaped = false;
          } else if (stream.match(openQuote)) {
            state.tokenize.pop();
            return "string";
          } else {
            stream.next();
            escaped = ch == "\\";
          }
        }
        if (singleLine) {
          state.tokenize.pop();
        }
        return "string";
      }
      function tokenComment(stream, state) {
        var ch;
        while (true) {
          stream.match(/^[^/*]+/, true);
          ch = stream.next();
          if (!ch)
            break;
          if (ch === "/" && stream.eat("*")) {
            state.tokenize.push(tokenComment);
          } else if (ch === "*" && stream.eat("/")) {
            state.tokenize.pop();
          }
        }
        return "comment";
      }
      function Context(prev, align, indented) {
        this.prev = prev;
        this.align = align;
        this.indented = indented;
      }
      function pushContext(state, stream) {
        var align = stream.match(/^\s*($|\/[\/\*])/, false) ? null : stream.column() + 1;
        state.context = new Context(state.context, align, state.indented);
      }
      function popContext(state) {
        if (state.context) {
          state.indented = state.context.indented;
          state.context = state.context.prev;
        }
      }
      CodeMirror2.defineMode("swift", function(config) {
        return {
          startState: function() {
            return {
              prev: null,
              context: null,
              indented: 0,
              tokenize: []
            };
          },
          token: function(stream, state) {
            var prev = state.prev;
            state.prev = null;
            var tokenize = state.tokenize[state.tokenize.length - 1] || tokenBase;
            var style = tokenize(stream, state, prev);
            if (!style || style == "comment")
              state.prev = prev;
            else if (!state.prev)
              state.prev = style;
            if (style == "punctuation") {
              var bracket = /[\(\[\{]|([\]\)\}])/.exec(stream.current());
              if (bracket)
                (bracket[1] ? popContext : pushContext)(state, stream);
            }
            return style;
          },
          indent: function(state, textAfter) {
            var cx = state.context;
            if (!cx)
              return 0;
            var closing = /^[\]\}\)]/.test(textAfter);
            if (cx.align != null)
              return cx.align - (closing ? 1 : 0);
            return cx.indented + (closing ? 0 : config.indentUnit);
          },
          electricInput: /^\s*[\)\}\]]$/,
          lineComment: "//",
          blockCommentStart: "/*",
          blockCommentEnd: "*/",
          fold: "brace",
          closeBrackets: "()[]{}''\"\"``"
        };
      });
      CodeMirror2.defineMIME("text/x-swift", "swift");
    });
  }
});

// mode/tcl/tcl.js
var require_tcl = __commonJS({
  "mode/tcl/tcl.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("tcl", function() {
        function parseWords(str) {
          var obj = {}, words = str.split(" ");
          for (var i = 0; i < words.length; ++i)
            obj[words[i]] = true;
          return obj;
        }
        var keywords = parseWords("Tcl safe after append array auto_execok auto_import auto_load auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror binary break catch cd close concat continue dde eof encoding error eval exec exit expr fblocked fconfigure fcopy file fileevent filename filename flush for foreach format gets glob global history http if incr info interp join lappend lindex linsert list llength load lrange lreplace lsearch lset lsort memory msgcat namespace open package parray pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp registry regsub rename resource return scan seek set socket source split string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest tclvars tell time trace unknown unset update uplevel upvar variable vwait");
        var functions = parseWords("if elseif else and not or eq ne in ni for foreach while switch");
        var isOperatorChar = /[+\-*&%=<>!?^\/\|]/;
        function chain(stream, state, f) {
          state.tokenize = f;
          return f(stream, state);
        }
        function tokenBase(stream, state) {
          var beforeParams = state.beforeParams;
          state.beforeParams = false;
          var ch = stream.next();
          if ((ch == '"' || ch == "'") && state.inParams) {
            return chain(stream, state, tokenString(ch));
          } else if (/[\[\]{}\(\),;\.]/.test(ch)) {
            if (ch == "(" && beforeParams)
              state.inParams = true;
            else if (ch == ")")
              state.inParams = false;
            return null;
          } else if (/\d/.test(ch)) {
            stream.eatWhile(/[\w\.]/);
            return "number";
          } else if (ch == "#") {
            if (stream.eat("*"))
              return chain(stream, state, tokenComment);
            if (ch == "#" && stream.match(/ *\[ *\[/))
              return chain(stream, state, tokenUnparsed);
            stream.skipToEnd();
            return "comment";
          } else if (ch == '"') {
            stream.skipTo(/"/);
            return "comment";
          } else if (ch == "$") {
            stream.eatWhile(/[$_a-z0-9A-Z\.{:]/);
            stream.eatWhile(/}/);
            state.beforeParams = true;
            return "builtin";
          } else if (isOperatorChar.test(ch)) {
            stream.eatWhile(isOperatorChar);
            return "comment";
          } else {
            stream.eatWhile(/[\w\$_{}\xa1-\uffff]/);
            var word = stream.current().toLowerCase();
            if (keywords && keywords.propertyIsEnumerable(word))
              return "keyword";
            if (functions && functions.propertyIsEnumerable(word)) {
              state.beforeParams = true;
              return "keyword";
            }
            return null;
          }
        }
        function tokenString(quote) {
          return function(stream, state) {
            var escaped = false, next, end = false;
            while ((next = stream.next()) != null) {
              if (next == quote && !escaped) {
                end = true;
                break;
              }
              escaped = !escaped && next == "\\";
            }
            if (end)
              state.tokenize = tokenBase;
            return "string";
          };
        }
        function tokenComment(stream, state) {
          var maybeEnd = false, ch;
          while (ch = stream.next()) {
            if (ch == "#" && maybeEnd) {
              state.tokenize = tokenBase;
              break;
            }
            maybeEnd = ch == "*";
          }
          return "comment";
        }
        function tokenUnparsed(stream, state) {
          var maybeEnd = 0, ch;
          while (ch = stream.next()) {
            if (ch == "#" && maybeEnd == 2) {
              state.tokenize = tokenBase;
              break;
            }
            if (ch == "]")
              maybeEnd++;
            else if (ch != " ")
              maybeEnd = 0;
          }
          return "meta";
        }
        return {
          startState: function() {
            return {
              tokenize: tokenBase,
              beforeParams: false,
              inParams: false
            };
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            return state.tokenize(stream, state);
          },
          lineComment: "#"
        };
      });
      CodeMirror2.defineMIME("text/x-tcl", "tcl");
    });
  }
});

// mode/textile/textile.js
var require_textile = __commonJS({
  "mode/textile/textile.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object") {
        mod(require_codemirror());
      } else if (typeof define == "function" && define.amd) {
        define(["../../lib/codemirror"], mod);
      } else {
        mod(CodeMirror);
      }
    })(function(CodeMirror2) {
      "use strict";
      var TOKEN_STYLES = {
        addition: "positive",
        attributes: "attribute",
        bold: "strong",
        cite: "keyword",
        code: "atom",
        definitionList: "number",
        deletion: "negative",
        div: "punctuation",
        em: "em",
        footnote: "variable",
        footCite: "qualifier",
        header: "header",
        html: "comment",
        image: "string",
        italic: "em",
        link: "link",
        linkDefinition: "link",
        list1: "variable-2",
        list2: "variable-3",
        list3: "keyword",
        notextile: "string-2",
        pre: "operator",
        p: "property",
        quote: "bracket",
        span: "quote",
        specialChar: "tag",
        strong: "strong",
        sub: "builtin",
        sup: "builtin",
        table: "variable-3",
        tableHeading: "operator"
      };
      function startNewLine(stream, state) {
        state.mode = Modes.newLayout;
        state.tableHeading = false;
        if (state.layoutType === "definitionList" && state.spanningLayout && stream.match(RE("definitionListEnd"), false))
          state.spanningLayout = false;
      }
      function handlePhraseModifier(stream, state, ch) {
        if (ch === "_") {
          if (stream.eat("_"))
            return togglePhraseModifier(stream, state, "italic", /__/, 2);
          else
            return togglePhraseModifier(stream, state, "em", /_/, 1);
        }
        if (ch === "*") {
          if (stream.eat("*")) {
            return togglePhraseModifier(stream, state, "bold", /\*\*/, 2);
          }
          return togglePhraseModifier(stream, state, "strong", /\*/, 1);
        }
        if (ch === "[") {
          if (stream.match(/\d+\]/))
            state.footCite = true;
          return tokenStyles(state);
        }
        if (ch === "(") {
          var spec = stream.match(/^(r|tm|c)\)/);
          if (spec)
            return tokenStylesWith(state, TOKEN_STYLES.specialChar);
        }
        if (ch === "<" && stream.match(/(\w+)[^>]+>[^<]+<\/\1>/))
          return tokenStylesWith(state, TOKEN_STYLES.html);
        if (ch === "?" && stream.eat("?"))
          return togglePhraseModifier(stream, state, "cite", /\?\?/, 2);
        if (ch === "=" && stream.eat("="))
          return togglePhraseModifier(stream, state, "notextile", /==/, 2);
        if (ch === "-" && !stream.eat("-"))
          return togglePhraseModifier(stream, state, "deletion", /-/, 1);
        if (ch === "+")
          return togglePhraseModifier(stream, state, "addition", /\+/, 1);
        if (ch === "~")
          return togglePhraseModifier(stream, state, "sub", /~/, 1);
        if (ch === "^")
          return togglePhraseModifier(stream, state, "sup", /\^/, 1);
        if (ch === "%")
          return togglePhraseModifier(stream, state, "span", /%/, 1);
        if (ch === "@")
          return togglePhraseModifier(stream, state, "code", /@/, 1);
        if (ch === "!") {
          var type = togglePhraseModifier(stream, state, "image", /(?:\([^\)]+\))?!/, 1);
          stream.match(/^:\S+/);
          return type;
        }
        return tokenStyles(state);
      }
      function togglePhraseModifier(stream, state, phraseModifier, closeRE, openSize) {
        var charBefore = stream.pos > openSize ? stream.string.charAt(stream.pos - openSize - 1) : null;
        var charAfter = stream.peek();
        if (state[phraseModifier]) {
          if ((!charAfter || /\W/.test(charAfter)) && charBefore && /\S/.test(charBefore)) {
            var type = tokenStyles(state);
            state[phraseModifier] = false;
            return type;
          }
        } else if ((!charBefore || /\W/.test(charBefore)) && charAfter && /\S/.test(charAfter) && stream.match(new RegExp("^.*\\S" + closeRE.source + "(?:\\W|$)"), false)) {
          state[phraseModifier] = true;
          state.mode = Modes.attributes;
        }
        return tokenStyles(state);
      }
      ;
      function tokenStyles(state) {
        var disabled = textileDisabled(state);
        if (disabled)
          return disabled;
        var styles = [];
        if (state.layoutType)
          styles.push(TOKEN_STYLES[state.layoutType]);
        styles = styles.concat(activeStyles(
          state,
          "addition",
          "bold",
          "cite",
          "code",
          "deletion",
          "em",
          "footCite",
          "image",
          "italic",
          "link",
          "span",
          "strong",
          "sub",
          "sup",
          "table",
          "tableHeading"
        ));
        if (state.layoutType === "header")
          styles.push(TOKEN_STYLES.header + "-" + state.header);
        return styles.length ? styles.join(" ") : null;
      }
      function textileDisabled(state) {
        var type = state.layoutType;
        switch (type) {
          case "notextile":
          case "code":
          case "pre":
            return TOKEN_STYLES[type];
          default:
            if (state.notextile)
              return TOKEN_STYLES.notextile + (type ? " " + TOKEN_STYLES[type] : "");
            return null;
        }
      }
      function tokenStylesWith(state, extraStyles) {
        var disabled = textileDisabled(state);
        if (disabled)
          return disabled;
        var type = tokenStyles(state);
        if (extraStyles)
          return type ? type + " " + extraStyles : extraStyles;
        else
          return type;
      }
      function activeStyles(state) {
        var styles = [];
        for (var i = 1; i < arguments.length; ++i) {
          if (state[arguments[i]])
            styles.push(TOKEN_STYLES[arguments[i]]);
        }
        return styles;
      }
      function blankLine(state) {
        var spanningLayout = state.spanningLayout, type = state.layoutType;
        for (var key in state)
          if (state.hasOwnProperty(key))
            delete state[key];
        state.mode = Modes.newLayout;
        if (spanningLayout) {
          state.layoutType = type;
          state.spanningLayout = true;
        }
      }
      var REs = {
        cache: {},
        single: {
          bc: "bc",
          bq: "bq",
          definitionList: /- .*?:=+/,
          definitionListEnd: /.*=:\s*$/,
          div: "div",
          drawTable: /\|.*\|/,
          foot: /fn\d+/,
          header: /h[1-6]/,
          html: /\s*<(?:\/)?(\w+)(?:[^>]+)?>(?:[^<]+<\/\1>)?/,
          link: /[^"]+":\S/,
          linkDefinition: /\[[^\s\]]+\]\S+/,
          list: /(?:#+|\*+)/,
          notextile: "notextile",
          para: "p",
          pre: "pre",
          table: "table",
          tableCellAttributes: /[\/\\]\d+/,
          tableHeading: /\|_\./,
          tableText: /[^"_\*\[\(\?\+~\^%@|-]+/,
          text: /[^!"_=\*\[\(<\?\+~\^%@-]+/
        },
        attributes: {
          align: /(?:<>|<|>|=)/,
          selector: /\([^\(][^\)]+\)/,
          lang: /\[[^\[\]]+\]/,
          pad: /(?:\(+|\)+){1,2}/,
          css: /\{[^\}]+\}/
        },
        createRe: function(name) {
          switch (name) {
            case "drawTable":
              return REs.makeRe("^", REs.single.drawTable, "$");
            case "html":
              return REs.makeRe("^", REs.single.html, "(?:", REs.single.html, ")*", "$");
            case "linkDefinition":
              return REs.makeRe("^", REs.single.linkDefinition, "$");
            case "listLayout":
              return REs.makeRe("^", REs.single.list, RE("allAttributes"), "*\\s+");
            case "tableCellAttributes":
              return REs.makeRe("^", REs.choiceRe(
                REs.single.tableCellAttributes,
                RE("allAttributes")
              ), "+\\.");
            case "type":
              return REs.makeRe("^", RE("allTypes"));
            case "typeLayout":
              return REs.makeRe(
                "^",
                RE("allTypes"),
                RE("allAttributes"),
                "*\\.\\.?",
                "(\\s+|$)"
              );
            case "attributes":
              return REs.makeRe("^", RE("allAttributes"), "+");
            case "allTypes":
              return REs.choiceRe(
                REs.single.div,
                REs.single.foot,
                REs.single.header,
                REs.single.bc,
                REs.single.bq,
                REs.single.notextile,
                REs.single.pre,
                REs.single.table,
                REs.single.para
              );
            case "allAttributes":
              return REs.choiceRe(
                REs.attributes.selector,
                REs.attributes.css,
                REs.attributes.lang,
                REs.attributes.align,
                REs.attributes.pad
              );
            default:
              return REs.makeRe("^", REs.single[name]);
          }
        },
        makeRe: function() {
          var pattern = "";
          for (var i = 0; i < arguments.length; ++i) {
            var arg = arguments[i];
            pattern += typeof arg === "string" ? arg : arg.source;
          }
          return new RegExp(pattern);
        },
        choiceRe: function() {
          var parts = [arguments[0]];
          for (var i = 1; i < arguments.length; ++i) {
            parts[i * 2 - 1] = "|";
            parts[i * 2] = arguments[i];
          }
          parts.unshift("(?:");
          parts.push(")");
          return REs.makeRe.apply(null, parts);
        }
      };
      function RE(name) {
        return REs.cache[name] || (REs.cache[name] = REs.createRe(name));
      }
      var Modes = {
        newLayout: function(stream, state) {
          if (stream.match(RE("typeLayout"), false)) {
            state.spanningLayout = false;
            return (state.mode = Modes.blockType)(stream, state);
          }
          var newMode;
          if (!textileDisabled(state)) {
            if (stream.match(RE("listLayout"), false))
              newMode = Modes.list;
            else if (stream.match(RE("drawTable"), false))
              newMode = Modes.table;
            else if (stream.match(RE("linkDefinition"), false))
              newMode = Modes.linkDefinition;
            else if (stream.match(RE("definitionList")))
              newMode = Modes.definitionList;
            else if (stream.match(RE("html"), false))
              newMode = Modes.html;
          }
          return (state.mode = newMode || Modes.text)(stream, state);
        },
        blockType: function(stream, state) {
          var match, type;
          state.layoutType = null;
          if (match = stream.match(RE("type")))
            type = match[0];
          else
            return (state.mode = Modes.text)(stream, state);
          if (match = type.match(RE("header"))) {
            state.layoutType = "header";
            state.header = parseInt(match[0][1]);
          } else if (type.match(RE("bq"))) {
            state.layoutType = "quote";
          } else if (type.match(RE("bc"))) {
            state.layoutType = "code";
          } else if (type.match(RE("foot"))) {
            state.layoutType = "footnote";
          } else if (type.match(RE("notextile"))) {
            state.layoutType = "notextile";
          } else if (type.match(RE("pre"))) {
            state.layoutType = "pre";
          } else if (type.match(RE("div"))) {
            state.layoutType = "div";
          } else if (type.match(RE("table"))) {
            state.layoutType = "table";
          }
          state.mode = Modes.attributes;
          return tokenStyles(state);
        },
        text: function(stream, state) {
          if (stream.match(RE("text")))
            return tokenStyles(state);
          var ch = stream.next();
          if (ch === '"')
            return (state.mode = Modes.link)(stream, state);
          return handlePhraseModifier(stream, state, ch);
        },
        attributes: function(stream, state) {
          state.mode = Modes.layoutLength;
          if (stream.match(RE("attributes")))
            return tokenStylesWith(state, TOKEN_STYLES.attributes);
          else
            return tokenStyles(state);
        },
        layoutLength: function(stream, state) {
          if (stream.eat(".") && stream.eat("."))
            state.spanningLayout = true;
          state.mode = Modes.text;
          return tokenStyles(state);
        },
        list: function(stream, state) {
          var match = stream.match(RE("list"));
          state.listDepth = match[0].length;
          var listMod = (state.listDepth - 1) % 3;
          if (!listMod)
            state.layoutType = "list1";
          else if (listMod === 1)
            state.layoutType = "list2";
          else
            state.layoutType = "list3";
          state.mode = Modes.attributes;
          return tokenStyles(state);
        },
        link: function(stream, state) {
          state.mode = Modes.text;
          if (stream.match(RE("link"))) {
            stream.match(/\S+/);
            return tokenStylesWith(state, TOKEN_STYLES.link);
          }
          return tokenStyles(state);
        },
        linkDefinition: function(stream, state) {
          stream.skipToEnd();
          return tokenStylesWith(state, TOKEN_STYLES.linkDefinition);
        },
        definitionList: function(stream, state) {
          stream.match(RE("definitionList"));
          state.layoutType = "definitionList";
          if (stream.match(/\s*$/))
            state.spanningLayout = true;
          else
            state.mode = Modes.attributes;
          return tokenStyles(state);
        },
        html: function(stream, state) {
          stream.skipToEnd();
          return tokenStylesWith(state, TOKEN_STYLES.html);
        },
        table: function(stream, state) {
          state.layoutType = "table";
          return (state.mode = Modes.tableCell)(stream, state);
        },
        tableCell: function(stream, state) {
          if (stream.match(RE("tableHeading")))
            state.tableHeading = true;
          else
            stream.eat("|");
          state.mode = Modes.tableCellAttributes;
          return tokenStyles(state);
        },
        tableCellAttributes: function(stream, state) {
          state.mode = Modes.tableText;
          if (stream.match(RE("tableCellAttributes")))
            return tokenStylesWith(state, TOKEN_STYLES.attributes);
          else
            return tokenStyles(state);
        },
        tableText: function(stream, state) {
          if (stream.match(RE("tableText")))
            return tokenStyles(state);
          if (stream.peek() === "|") {
            state.mode = Modes.tableCell;
            return tokenStyles(state);
          }
          return handlePhraseModifier(stream, state, stream.next());
        }
      };
      CodeMirror2.defineMode("textile", function() {
        return {
          startState: function() {
            return { mode: Modes.newLayout };
          },
          token: function(stream, state) {
            if (stream.sol())
              startNewLine(stream, state);
            return state.mode(stream, state);
          },
          blankLine
        };
      });
      CodeMirror2.defineMIME("text/x-textile", "textile");
    });
  }
});

// mode/tiddlywiki/tiddlywiki.js
var require_tiddlywiki = __commonJS({
  "mode/tiddlywiki/tiddlywiki.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("tiddlywiki", function() {
        var textwords = {};
        var keywords = {
          "allTags": true,
          "closeAll": true,
          "list": true,
          "newJournal": true,
          "newTiddler": true,
          "permaview": true,
          "saveChanges": true,
          "search": true,
          "slider": true,
          "tabs": true,
          "tag": true,
          "tagging": true,
          "tags": true,
          "tiddler": true,
          "timeline": true,
          "today": true,
          "version": true,
          "option": true,
          "with": true,
          "filter": true
        };
        var isSpaceName = /[\w_\-]/i, reHR = /^\-\-\-\-+$/, reWikiCommentStart = /^\/\*\*\*$/, reWikiCommentStop = /^\*\*\*\/$/, reBlockQuote = /^<<<$/, reJsCodeStart = /^\/\/\{\{\{$/, reJsCodeStop = /^\/\/\}\}\}$/, reXmlCodeStart = /^<!--\{\{\{-->$/, reXmlCodeStop = /^<!--\}\}\}-->$/, reCodeBlockStart = /^\{\{\{$/, reCodeBlockStop = /^\}\}\}$/, reUntilCodeStop = /.*?\}\}\}/;
        function chain(stream, state, f) {
          state.tokenize = f;
          return f(stream, state);
        }
        function tokenBase(stream, state) {
          var sol = stream.sol(), ch = stream.peek();
          state.block = false;
          if (sol && /[<\/\*{}\-]/.test(ch)) {
            if (stream.match(reCodeBlockStart)) {
              state.block = true;
              return chain(stream, state, twTokenCode);
            }
            if (stream.match(reBlockQuote))
              return "quote";
            if (stream.match(reWikiCommentStart) || stream.match(reWikiCommentStop))
              return "comment";
            if (stream.match(reJsCodeStart) || stream.match(reJsCodeStop) || stream.match(reXmlCodeStart) || stream.match(reXmlCodeStop))
              return "comment";
            if (stream.match(reHR))
              return "hr";
          }
          stream.next();
          if (sol && /[\/\*!#;:>|]/.test(ch)) {
            if (ch == "!") {
              stream.skipToEnd();
              return "header";
            }
            if (ch == "*") {
              stream.eatWhile("*");
              return "comment";
            }
            if (ch == "#") {
              stream.eatWhile("#");
              return "comment";
            }
            if (ch == ";") {
              stream.eatWhile(";");
              return "comment";
            }
            if (ch == ":") {
              stream.eatWhile(":");
              return "comment";
            }
            if (ch == ">") {
              stream.eatWhile(">");
              return "quote";
            }
            if (ch == "|")
              return "header";
          }
          if (ch == "{" && stream.match(/\{\{/))
            return chain(stream, state, twTokenCode);
          if (/[hf]/i.test(ch) && /[ti]/i.test(stream.peek()) && stream.match(/\b(ttps?|tp|ile):\/\/[\-A-Z0-9+&@#\/%?=~_|$!:,.;]*[A-Z0-9+&@#\/%=~_|$]/i))
            return "link";
          if (ch == '"')
            return "string";
          if (ch == "~")
            return "brace";
          if (/[\[\]]/.test(ch) && stream.match(ch))
            return "brace";
          if (ch == "@") {
            stream.eatWhile(isSpaceName);
            return "link";
          }
          if (/\d/.test(ch)) {
            stream.eatWhile(/\d/);
            return "number";
          }
          if (ch == "/") {
            if (stream.eat("%")) {
              return chain(stream, state, twTokenComment);
            } else if (stream.eat("/")) {
              return chain(stream, state, twTokenEm);
            }
          }
          if (ch == "_" && stream.eat("_"))
            return chain(stream, state, twTokenUnderline);
          if (ch == "-" && stream.eat("-")) {
            if (stream.peek() != " ")
              return chain(stream, state, twTokenStrike);
            if (stream.peek() == " ")
              return "brace";
          }
          if (ch == "'" && stream.eat("'"))
            return chain(stream, state, twTokenStrong);
          if (ch == "<" && stream.eat("<"))
            return chain(stream, state, twTokenMacro);
          stream.eatWhile(/[\w\$_]/);
          return textwords.propertyIsEnumerable(stream.current()) ? "keyword" : null;
        }
        function twTokenComment(stream, state) {
          var maybeEnd = false, ch;
          while (ch = stream.next()) {
            if (ch == "/" && maybeEnd) {
              state.tokenize = tokenBase;
              break;
            }
            maybeEnd = ch == "%";
          }
          return "comment";
        }
        function twTokenStrong(stream, state) {
          var maybeEnd = false, ch;
          while (ch = stream.next()) {
            if (ch == "'" && maybeEnd) {
              state.tokenize = tokenBase;
              break;
            }
            maybeEnd = ch == "'";
          }
          return "strong";
        }
        function twTokenCode(stream, state) {
          var sb = state.block;
          if (sb && stream.current()) {
            return "comment";
          }
          if (!sb && stream.match(reUntilCodeStop)) {
            state.tokenize = tokenBase;
            return "comment";
          }
          if (sb && stream.sol() && stream.match(reCodeBlockStop)) {
            state.tokenize = tokenBase;
            return "comment";
          }
          stream.next();
          return "comment";
        }
        function twTokenEm(stream, state) {
          var maybeEnd = false, ch;
          while (ch = stream.next()) {
            if (ch == "/" && maybeEnd) {
              state.tokenize = tokenBase;
              break;
            }
            maybeEnd = ch == "/";
          }
          return "em";
        }
        function twTokenUnderline(stream, state) {
          var maybeEnd = false, ch;
          while (ch = stream.next()) {
            if (ch == "_" && maybeEnd) {
              state.tokenize = tokenBase;
              break;
            }
            maybeEnd = ch == "_";
          }
          return "underlined";
        }
        function twTokenStrike(stream, state) {
          var maybeEnd = false, ch;
          while (ch = stream.next()) {
            if (ch == "-" && maybeEnd) {
              state.tokenize = tokenBase;
              break;
            }
            maybeEnd = ch == "-";
          }
          return "strikethrough";
        }
        function twTokenMacro(stream, state) {
          if (stream.current() == "<<") {
            return "macro";
          }
          var ch = stream.next();
          if (!ch) {
            state.tokenize = tokenBase;
            return null;
          }
          if (ch == ">") {
            if (stream.peek() == ">") {
              stream.next();
              state.tokenize = tokenBase;
              return "macro";
            }
          }
          stream.eatWhile(/[\w\$_]/);
          return keywords.propertyIsEnumerable(stream.current()) ? "keyword" : null;
        }
        return {
          startState: function() {
            return { tokenize: tokenBase };
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            var style = state.tokenize(stream, state);
            return style;
          }
        };
      });
      CodeMirror2.defineMIME("text/x-tiddlywiki", "tiddlywiki");
    });
  }
});

// mode/tiki/tiki.js
var require_tiki = __commonJS({
  "mode/tiki/tiki.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("tiki", function(config) {
        function inBlock(style, terminator, returnTokenizer) {
          return function(stream, state) {
            while (!stream.eol()) {
              if (stream.match(terminator)) {
                state.tokenize = inText;
                break;
              }
              stream.next();
            }
            if (returnTokenizer)
              state.tokenize = returnTokenizer;
            return style;
          };
        }
        function inLine(style) {
          return function(stream, state) {
            while (!stream.eol()) {
              stream.next();
            }
            state.tokenize = inText;
            return style;
          };
        }
        function inText(stream, state) {
          function chain(parser) {
            state.tokenize = parser;
            return parser(stream, state);
          }
          var sol = stream.sol();
          var ch = stream.next();
          switch (ch) {
            case "{":
              stream.eat("/");
              stream.eatSpace();
              stream.eatWhile(/[^\s\u00a0=\"\'\/?(}]/);
              state.tokenize = inPlugin;
              return "tag";
            case "_":
              if (stream.eat("_"))
                return chain(inBlock("strong", "__", inText));
              break;
            case "'":
              if (stream.eat("'"))
                return chain(inBlock("em", "''", inText));
              break;
            case "(":
              if (stream.eat("("))
                return chain(inBlock("variable-2", "))", inText));
              break;
            case "[":
              return chain(inBlock("variable-3", "]", inText));
              break;
            case "|":
              if (stream.eat("|"))
                return chain(inBlock("comment", "||"));
              break;
            case "-":
              if (stream.eat("=")) {
                return chain(inBlock("header string", "=-", inText));
              } else if (stream.eat("-")) {
                return chain(inBlock("error tw-deleted", "--", inText));
              }
              break;
            case "=":
              if (stream.match("=="))
                return chain(inBlock("tw-underline", "===", inText));
              break;
            case ":":
              if (stream.eat(":"))
                return chain(inBlock("comment", "::"));
              break;
            case "^":
              return chain(inBlock("tw-box", "^"));
              break;
            case "~":
              if (stream.match("np~"))
                return chain(inBlock("meta", "~/np~"));
              break;
          }
          if (sol) {
            switch (ch) {
              case "!":
                if (stream.match("!!!!!")) {
                  return chain(inLine("header string"));
                } else if (stream.match("!!!!")) {
                  return chain(inLine("header string"));
                } else if (stream.match("!!!")) {
                  return chain(inLine("header string"));
                } else if (stream.match("!!")) {
                  return chain(inLine("header string"));
                } else {
                  return chain(inLine("header string"));
                }
                break;
              case "*":
              case "#":
              case "+":
                return chain(inLine("tw-listitem bracket"));
                break;
            }
          }
          return null;
        }
        var indentUnit = config.indentUnit;
        var pluginName, type;
        function inPlugin(stream, state) {
          var ch = stream.next();
          var peek = stream.peek();
          if (ch == "}") {
            state.tokenize = inText;
            return "tag";
          } else if (ch == "(" || ch == ")") {
            return "bracket";
          } else if (ch == "=") {
            type = "equals";
            if (peek == ">") {
              stream.next();
              peek = stream.peek();
            }
            if (!/[\'\"]/.test(peek)) {
              state.tokenize = inAttributeNoQuote();
            }
            return "operator";
          } else if (/[\'\"]/.test(ch)) {
            state.tokenize = inAttribute(ch);
            return state.tokenize(stream, state);
          } else {
            stream.eatWhile(/[^\s\u00a0=\"\'\/?]/);
            return "keyword";
          }
        }
        function inAttribute(quote) {
          return function(stream, state) {
            while (!stream.eol()) {
              if (stream.next() == quote) {
                state.tokenize = inPlugin;
                break;
              }
            }
            return "string";
          };
        }
        function inAttributeNoQuote() {
          return function(stream, state) {
            while (!stream.eol()) {
              var ch = stream.next();
              var peek = stream.peek();
              if (ch == " " || ch == "," || /[ )}]/.test(peek)) {
                state.tokenize = inPlugin;
                break;
              }
            }
            return "string";
          };
        }
        var curState, setStyle;
        function pass() {
          for (var i = arguments.length - 1; i >= 0; i--)
            curState.cc.push(arguments[i]);
        }
        function cont() {
          pass.apply(null, arguments);
          return true;
        }
        function pushContext(pluginName2, startOfLine) {
          var noIndent = curState.context && curState.context.noIndent;
          curState.context = {
            prev: curState.context,
            pluginName: pluginName2,
            indent: curState.indented,
            startOfLine,
            noIndent
          };
        }
        function popContext() {
          if (curState.context)
            curState.context = curState.context.prev;
        }
        function element(type2) {
          if (type2 == "openPlugin") {
            curState.pluginName = pluginName;
            return cont(attributes, endplugin(curState.startOfLine));
          } else if (type2 == "closePlugin") {
            var err = false;
            if (curState.context) {
              err = curState.context.pluginName != pluginName;
              popContext();
            } else {
              err = true;
            }
            if (err)
              setStyle = "error";
            return cont(endcloseplugin(err));
          } else if (type2 == "string") {
            if (!curState.context || curState.context.name != "!cdata")
              pushContext("!cdata");
            if (curState.tokenize == inText)
              popContext();
            return cont();
          } else
            return cont();
        }
        function endplugin(startOfLine) {
          return function(type2) {
            if (type2 == "selfclosePlugin" || type2 == "endPlugin")
              return cont();
            if (type2 == "endPlugin") {
              pushContext(curState.pluginName, startOfLine);
              return cont();
            }
            return cont();
          };
        }
        function endcloseplugin(err) {
          return function(type2) {
            if (err)
              setStyle = "error";
            if (type2 == "endPlugin")
              return cont();
            return pass();
          };
        }
        function attributes(type2) {
          if (type2 == "keyword") {
            setStyle = "attribute";
            return cont(attributes);
          }
          if (type2 == "equals")
            return cont(attvalue, attributes);
          return pass();
        }
        function attvalue(type2) {
          if (type2 == "keyword") {
            setStyle = "string";
            return cont();
          }
          if (type2 == "string")
            return cont(attvaluemaybe);
          return pass();
        }
        function attvaluemaybe(type2) {
          if (type2 == "string")
            return cont(attvaluemaybe);
          else
            return pass();
        }
        return {
          startState: function() {
            return { tokenize: inText, cc: [], indented: 0, startOfLine: true, pluginName: null, context: null };
          },
          token: function(stream, state) {
            if (stream.sol()) {
              state.startOfLine = true;
              state.indented = stream.indentation();
            }
            if (stream.eatSpace())
              return null;
            setStyle = type = pluginName = null;
            var style = state.tokenize(stream, state);
            if ((style || type) && style != "comment") {
              curState = state;
              while (true) {
                var comb = state.cc.pop() || element;
                if (comb(type || style))
                  break;
              }
            }
            state.startOfLine = false;
            return setStyle || style;
          },
          indent: function(state, textAfter) {
            var context = state.context;
            if (context && context.noIndent)
              return 0;
            if (context && /^{\//.test(textAfter))
              context = context.prev;
            while (context && !context.startOfLine)
              context = context.prev;
            if (context)
              return context.indent + indentUnit;
            else
              return 0;
          },
          electricChars: "/"
        };
      });
      CodeMirror2.defineMIME("text/tiki", "tiki");
    });
  }
});

// mode/toml/toml.js
var require_toml = __commonJS({
  "mode/toml/toml.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("toml", function() {
        return {
          startState: function() {
            return {
              inString: false,
              stringType: "",
              lhs: true,
              inArray: 0
            };
          },
          token: function(stream, state) {
            if (!state.inString && (stream.peek() == '"' || stream.peek() == "'")) {
              state.stringType = stream.peek();
              stream.next();
              state.inString = true;
            }
            if (stream.sol() && state.inArray === 0) {
              state.lhs = true;
            }
            if (state.inString) {
              while (state.inString && !stream.eol()) {
                if (stream.peek() === state.stringType) {
                  stream.next();
                  state.inString = false;
                } else if (stream.peek() === "\\") {
                  stream.next();
                  stream.next();
                } else {
                  stream.match(/^.[^\\\"\']*/);
                }
              }
              return state.lhs ? "property string" : "string";
            } else if (state.inArray && stream.peek() === "]") {
              stream.next();
              state.inArray--;
              return "bracket";
            } else if (state.lhs && stream.peek() === "[" && stream.skipTo("]")) {
              stream.next();
              if (stream.peek() === "]")
                stream.next();
              return "atom";
            } else if (stream.peek() === "#") {
              stream.skipToEnd();
              return "comment";
            } else if (stream.eatSpace()) {
              return null;
            } else if (state.lhs && stream.eatWhile(function(c) {
              return c != "=" && c != " ";
            })) {
              return "property";
            } else if (state.lhs && stream.peek() === "=") {
              stream.next();
              state.lhs = false;
              return null;
            } else if (!state.lhs && stream.match(/^\d\d\d\d[\d\-\:\.T]*Z/)) {
              return "atom";
            } else if (!state.lhs && (stream.match("true") || stream.match("false"))) {
              return "atom";
            } else if (!state.lhs && stream.peek() === "[") {
              state.inArray++;
              stream.next();
              return "bracket";
            } else if (!state.lhs && stream.match(/^\-?\d+(?:\.\d+)?/)) {
              return "number";
            } else if (!stream.eatSpace()) {
              stream.next();
            }
            return null;
          }
        };
      });
      CodeMirror2.defineMIME("text/x-toml", "toml");
    });
  }
});

// mode/tornado/tornado.js
var require_tornado = __commonJS({
  "mode/tornado/tornado.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(
          require_codemirror(),
          require_htmlmixed(),
          require_overlay()
        );
      else if (typeof define == "function" && define.amd)
        define([
          "../../lib/codemirror",
          "../htmlmixed/htmlmixed",
          "../../addon/mode/overlay"
        ], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("tornado:inner", function() {
        var keywords = [
          "and",
          "as",
          "assert",
          "autoescape",
          "block",
          "break",
          "class",
          "comment",
          "context",
          "continue",
          "datetime",
          "def",
          "del",
          "elif",
          "else",
          "end",
          "escape",
          "except",
          "exec",
          "extends",
          "false",
          "finally",
          "for",
          "from",
          "global",
          "if",
          "import",
          "in",
          "include",
          "is",
          "json_encode",
          "lambda",
          "length",
          "linkify",
          "load",
          "module",
          "none",
          "not",
          "or",
          "pass",
          "print",
          "put",
          "raise",
          "raw",
          "return",
          "self",
          "set",
          "squeeze",
          "super",
          "true",
          "try",
          "url_escape",
          "while",
          "with",
          "without",
          "xhtml_escape",
          "yield"
        ];
        keywords = new RegExp("^((" + keywords.join(")|(") + "))\\b");
        function tokenBase(stream, state) {
          stream.eatWhile(/[^\{]/);
          var ch = stream.next();
          if (ch == "{") {
            if (ch = stream.eat(/\{|%|#/)) {
              state.tokenize = inTag(ch);
              return "tag";
            }
          }
        }
        function inTag(close) {
          if (close == "{") {
            close = "}";
          }
          return function(stream, state) {
            var ch = stream.next();
            if (ch == close && stream.eat("}")) {
              state.tokenize = tokenBase;
              return "tag";
            }
            if (stream.match(keywords)) {
              return "keyword";
            }
            return close == "#" ? "comment" : "string";
          };
        }
        return {
          startState: function() {
            return { tokenize: tokenBase };
          },
          token: function(stream, state) {
            return state.tokenize(stream, state);
          }
        };
      });
      CodeMirror2.defineMode("tornado", function(config) {
        var htmlBase = CodeMirror2.getMode(config, "text/html");
        var tornadoInner = CodeMirror2.getMode(config, "tornado:inner");
        return CodeMirror2.overlayMode(htmlBase, tornadoInner);
      });
      CodeMirror2.defineMIME("text/x-tornado", "tornado");
    });
  }
});

// mode/troff/troff.js
var require_troff = __commonJS({
  "mode/troff/troff.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("troff", function() {
        var words = {};
        function tokenBase(stream) {
          if (stream.eatSpace())
            return null;
          var sol = stream.sol();
          var ch = stream.next();
          if (ch === "\\") {
            if (stream.match("fB") || stream.match("fR") || stream.match("fI") || stream.match("u") || stream.match("d") || stream.match("%") || stream.match("&")) {
              return "string";
            }
            if (stream.match("m[")) {
              stream.skipTo("]");
              stream.next();
              return "string";
            }
            if (stream.match("s+") || stream.match("s-")) {
              stream.eatWhile(/[\d-]/);
              return "string";
            }
            if (stream.match("(") || stream.match("*(")) {
              stream.eatWhile(/[\w-]/);
              return "string";
            }
            return "string";
          }
          if (sol && (ch === "." || ch === "'")) {
            if (stream.eat("\\") && stream.eat('"')) {
              stream.skipToEnd();
              return "comment";
            }
          }
          if (sol && ch === ".") {
            if (stream.match("B ") || stream.match("I ") || stream.match("R ")) {
              return "attribute";
            }
            if (stream.match("TH ") || stream.match("SH ") || stream.match("SS ") || stream.match("HP ")) {
              stream.skipToEnd();
              return "quote";
            }
            if (stream.match(/[A-Z]/) && stream.match(/[A-Z]/) || stream.match(/[a-z]/) && stream.match(/[a-z]/)) {
              return "attribute";
            }
          }
          stream.eatWhile(/[\w-]/);
          var cur = stream.current();
          return words.hasOwnProperty(cur) ? words[cur] : null;
        }
        function tokenize(stream, state) {
          return (state.tokens[0] || tokenBase)(stream, state);
        }
        ;
        return {
          startState: function() {
            return { tokens: [] };
          },
          token: function(stream, state) {
            return tokenize(stream, state);
          }
        };
      });
      CodeMirror2.defineMIME("text/troff", "troff");
      CodeMirror2.defineMIME("text/x-troff", "troff");
      CodeMirror2.defineMIME("application/x-troff", "troff");
    });
  }
});

// mode/ttcn/ttcn.js
var require_ttcn = __commonJS({
  "mode/ttcn/ttcn.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("ttcn", function(config, parserConfig) {
        var indentUnit = config.indentUnit, keywords = parserConfig.keywords || {}, builtin = parserConfig.builtin || {}, timerOps = parserConfig.timerOps || {}, portOps = parserConfig.portOps || {}, configOps = parserConfig.configOps || {}, verdictOps = parserConfig.verdictOps || {}, sutOps = parserConfig.sutOps || {}, functionOps = parserConfig.functionOps || {}, verdictConsts = parserConfig.verdictConsts || {}, booleanConsts = parserConfig.booleanConsts || {}, otherConsts = parserConfig.otherConsts || {}, types = parserConfig.types || {}, visibilityModifiers = parserConfig.visibilityModifiers || {}, templateMatch = parserConfig.templateMatch || {}, multiLineStrings = parserConfig.multiLineStrings, indentStatements = parserConfig.indentStatements !== false;
        var isOperatorChar = /[+\-*&@=<>!\/]/;
        var curPunc;
        function tokenBase(stream, state) {
          var ch = stream.next();
          if (ch == '"' || ch == "'") {
            state.tokenize = tokenString(ch);
            return state.tokenize(stream, state);
          }
          if (/[\[\]{}\(\),;\\:\?\.]/.test(ch)) {
            curPunc = ch;
            return "punctuation";
          }
          if (ch == "#") {
            stream.skipToEnd();
            return "atom preprocessor";
          }
          if (ch == "%") {
            stream.eatWhile(/\b/);
            return "atom ttcn3Macros";
          }
          if (/\d/.test(ch)) {
            stream.eatWhile(/[\w\.]/);
            return "number";
          }
          if (ch == "/") {
            if (stream.eat("*")) {
              state.tokenize = tokenComment;
              return tokenComment(stream, state);
            }
            if (stream.eat("/")) {
              stream.skipToEnd();
              return "comment";
            }
          }
          if (isOperatorChar.test(ch)) {
            if (ch == "@") {
              if (stream.match("try") || stream.match("catch") || stream.match("lazy")) {
                return "keyword";
              }
            }
            stream.eatWhile(isOperatorChar);
            return "operator";
          }
          stream.eatWhile(/[\w\$_\xa1-\uffff]/);
          var cur = stream.current();
          if (keywords.propertyIsEnumerable(cur))
            return "keyword";
          if (builtin.propertyIsEnumerable(cur))
            return "builtin";
          if (timerOps.propertyIsEnumerable(cur))
            return "def timerOps";
          if (configOps.propertyIsEnumerable(cur))
            return "def configOps";
          if (verdictOps.propertyIsEnumerable(cur))
            return "def verdictOps";
          if (portOps.propertyIsEnumerable(cur))
            return "def portOps";
          if (sutOps.propertyIsEnumerable(cur))
            return "def sutOps";
          if (functionOps.propertyIsEnumerable(cur))
            return "def functionOps";
          if (verdictConsts.propertyIsEnumerable(cur))
            return "string verdictConsts";
          if (booleanConsts.propertyIsEnumerable(cur))
            return "string booleanConsts";
          if (otherConsts.propertyIsEnumerable(cur))
            return "string otherConsts";
          if (types.propertyIsEnumerable(cur))
            return "builtin types";
          if (visibilityModifiers.propertyIsEnumerable(cur))
            return "builtin visibilityModifiers";
          if (templateMatch.propertyIsEnumerable(cur))
            return "atom templateMatch";
          return "variable";
        }
        function tokenString(quote) {
          return function(stream, state) {
            var escaped = false, next, end = false;
            while ((next = stream.next()) != null) {
              if (next == quote && !escaped) {
                var afterQuote = stream.peek();
                if (afterQuote) {
                  afterQuote = afterQuote.toLowerCase();
                  if (afterQuote == "b" || afterQuote == "h" || afterQuote == "o")
                    stream.next();
                }
                end = true;
                break;
              }
              escaped = !escaped && next == "\\";
            }
            if (end || !(escaped || multiLineStrings))
              state.tokenize = null;
            return "string";
          };
        }
        function tokenComment(stream, state) {
          var maybeEnd = false, ch;
          while (ch = stream.next()) {
            if (ch == "/" && maybeEnd) {
              state.tokenize = null;
              break;
            }
            maybeEnd = ch == "*";
          }
          return "comment";
        }
        function Context(indented, column, type, align, prev) {
          this.indented = indented;
          this.column = column;
          this.type = type;
          this.align = align;
          this.prev = prev;
        }
        function pushContext(state, col, type) {
          var indent = state.indented;
          if (state.context && state.context.type == "statement")
            indent = state.context.indented;
          return state.context = new Context(indent, col, type, null, state.context);
        }
        function popContext(state) {
          var t = state.context.type;
          if (t == ")" || t == "]" || t == "}")
            state.indented = state.context.indented;
          return state.context = state.context.prev;
        }
        return {
          startState: function(basecolumn) {
            return {
              tokenize: null,
              context: new Context((basecolumn || 0) - indentUnit, 0, "top", false),
              indented: 0,
              startOfLine: true
            };
          },
          token: function(stream, state) {
            var ctx = state.context;
            if (stream.sol()) {
              if (ctx.align == null)
                ctx.align = false;
              state.indented = stream.indentation();
              state.startOfLine = true;
            }
            if (stream.eatSpace())
              return null;
            curPunc = null;
            var style = (state.tokenize || tokenBase)(stream, state);
            if (style == "comment")
              return style;
            if (ctx.align == null)
              ctx.align = true;
            if ((curPunc == ";" || curPunc == ":" || curPunc == ",") && ctx.type == "statement") {
              popContext(state);
            } else if (curPunc == "{")
              pushContext(state, stream.column(), "}");
            else if (curPunc == "[")
              pushContext(state, stream.column(), "]");
            else if (curPunc == "(")
              pushContext(state, stream.column(), ")");
            else if (curPunc == "}") {
              while (ctx.type == "statement")
                ctx = popContext(state);
              if (ctx.type == "}")
                ctx = popContext(state);
              while (ctx.type == "statement")
                ctx = popContext(state);
            } else if (curPunc == ctx.type)
              popContext(state);
            else if (indentStatements && ((ctx.type == "}" || ctx.type == "top") && curPunc != ";" || ctx.type == "statement" && curPunc == "newstatement"))
              pushContext(state, stream.column(), "statement");
            state.startOfLine = false;
            return style;
          },
          electricChars: "{}",
          blockCommentStart: "/*",
          blockCommentEnd: "*/",
          lineComment: "//",
          fold: "brace"
        };
      });
      function words(str) {
        var obj = {}, words2 = str.split(" ");
        for (var i = 0; i < words2.length; ++i)
          obj[words2[i]] = true;
        return obj;
      }
      function def(mimes, mode) {
        if (typeof mimes == "string")
          mimes = [mimes];
        var words2 = [];
        function add(obj) {
          if (obj) {
            for (var prop in obj)
              if (obj.hasOwnProperty(prop))
                words2.push(prop);
          }
        }
        add(mode.keywords);
        add(mode.builtin);
        add(mode.timerOps);
        add(mode.portOps);
        if (words2.length) {
          mode.helperType = mimes[0];
          CodeMirror2.registerHelper("hintWords", mimes[0], words2);
        }
        for (var i = 0; i < mimes.length; ++i)
          CodeMirror2.defineMIME(mimes[i], mode);
      }
      def(["text/x-ttcn", "text/x-ttcn3", "text/x-ttcnpp"], {
        name: "ttcn",
        keywords: words("activate address alive all alt altstep and and4b any break case component const continue control deactivate display do else encode enumerated except exception execute extends extension external for from function goto group if import in infinity inout interleave label language length log match message mixed mod modifies module modulepar mtc noblock not not4b nowait of on optional or or4b out override param pattern port procedure record recursive rem repeat return runs select self sender set signature system template testcase to type union value valueof var variant while with xor xor4b"),
        builtin: words("bit2hex bit2int bit2oct bit2str char2int char2oct encvalue decomp decvalue float2int float2str hex2bit hex2int hex2oct hex2str int2bit int2char int2float int2hex int2oct int2str int2unichar isbound ischosen ispresent isvalue lengthof log2str oct2bit oct2char oct2hex oct2int oct2str regexp replace rnd sizeof str2bit str2float str2hex str2int str2oct substr unichar2int unichar2char enum2int"),
        types: words("anytype bitstring boolean char charstring default float hexstring integer objid octetstring universal verdicttype timer"),
        timerOps: words("read running start stop timeout"),
        portOps: words("call catch check clear getcall getreply halt raise receive reply send trigger"),
        configOps: words("create connect disconnect done kill killed map unmap"),
        verdictOps: words("getverdict setverdict"),
        sutOps: words("action"),
        functionOps: words("apply derefers refers"),
        verdictConsts: words("error fail inconc none pass"),
        booleanConsts: words("true false"),
        otherConsts: words("null NULL omit"),
        visibilityModifiers: words("private public friend"),
        templateMatch: words("complement ifpresent subset superset permutation"),
        multiLineStrings: true
      });
    });
  }
});

// mode/ttcn-cfg/ttcn-cfg.js
var require_ttcn_cfg = __commonJS({
  "mode/ttcn-cfg/ttcn-cfg.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("ttcn-cfg", function(config, parserConfig) {
        var indentUnit = config.indentUnit, keywords = parserConfig.keywords || {}, fileNCtrlMaskOptions = parserConfig.fileNCtrlMaskOptions || {}, externalCommands = parserConfig.externalCommands || {}, multiLineStrings = parserConfig.multiLineStrings, indentStatements = parserConfig.indentStatements !== false;
        var isOperatorChar = /[\|]/;
        var curPunc;
        function tokenBase(stream, state) {
          var ch = stream.next();
          if (ch == '"' || ch == "'") {
            state.tokenize = tokenString(ch);
            return state.tokenize(stream, state);
          }
          if (/[:=]/.test(ch)) {
            curPunc = ch;
            return "punctuation";
          }
          if (ch == "#") {
            stream.skipToEnd();
            return "comment";
          }
          if (/\d/.test(ch)) {
            stream.eatWhile(/[\w\.]/);
            return "number";
          }
          if (isOperatorChar.test(ch)) {
            stream.eatWhile(isOperatorChar);
            return "operator";
          }
          if (ch == "[") {
            stream.eatWhile(/[\w_\]]/);
            return "number sectionTitle";
          }
          stream.eatWhile(/[\w\$_]/);
          var cur = stream.current();
          if (keywords.propertyIsEnumerable(cur))
            return "keyword";
          if (fileNCtrlMaskOptions.propertyIsEnumerable(cur))
            return "negative fileNCtrlMaskOptions";
          if (externalCommands.propertyIsEnumerable(cur))
            return "negative externalCommands";
          return "variable";
        }
        function tokenString(quote) {
          return function(stream, state) {
            var escaped = false, next, end = false;
            while ((next = stream.next()) != null) {
              if (next == quote && !escaped) {
                var afterNext = stream.peek();
                if (afterNext) {
                  afterNext = afterNext.toLowerCase();
                  if (afterNext == "b" || afterNext == "h" || afterNext == "o")
                    stream.next();
                }
                end = true;
                break;
              }
              escaped = !escaped && next == "\\";
            }
            if (end || !(escaped || multiLineStrings))
              state.tokenize = null;
            return "string";
          };
        }
        function Context(indented, column, type, align, prev) {
          this.indented = indented;
          this.column = column;
          this.type = type;
          this.align = align;
          this.prev = prev;
        }
        function pushContext(state, col, type) {
          var indent = state.indented;
          if (state.context && state.context.type == "statement")
            indent = state.context.indented;
          return state.context = new Context(indent, col, type, null, state.context);
        }
        function popContext(state) {
          var t = state.context.type;
          if (t == ")" || t == "]" || t == "}")
            state.indented = state.context.indented;
          return state.context = state.context.prev;
        }
        return {
          startState: function(basecolumn) {
            return {
              tokenize: null,
              context: new Context((basecolumn || 0) - indentUnit, 0, "top", false),
              indented: 0,
              startOfLine: true
            };
          },
          token: function(stream, state) {
            var ctx = state.context;
            if (stream.sol()) {
              if (ctx.align == null)
                ctx.align = false;
              state.indented = stream.indentation();
              state.startOfLine = true;
            }
            if (stream.eatSpace())
              return null;
            curPunc = null;
            var style = (state.tokenize || tokenBase)(stream, state);
            if (style == "comment")
              return style;
            if (ctx.align == null)
              ctx.align = true;
            if ((curPunc == ";" || curPunc == ":" || curPunc == ",") && ctx.type == "statement") {
              popContext(state);
            } else if (curPunc == "{")
              pushContext(state, stream.column(), "}");
            else if (curPunc == "[")
              pushContext(state, stream.column(), "]");
            else if (curPunc == "(")
              pushContext(state, stream.column(), ")");
            else if (curPunc == "}") {
              while (ctx.type == "statement")
                ctx = popContext(state);
              if (ctx.type == "}")
                ctx = popContext(state);
              while (ctx.type == "statement")
                ctx = popContext(state);
            } else if (curPunc == ctx.type)
              popContext(state);
            else if (indentStatements && ((ctx.type == "}" || ctx.type == "top") && curPunc != ";" || ctx.type == "statement" && curPunc == "newstatement"))
              pushContext(state, stream.column(), "statement");
            state.startOfLine = false;
            return style;
          },
          electricChars: "{}",
          lineComment: "#",
          fold: "brace"
        };
      });
      function words(str) {
        var obj = {}, words2 = str.split(" ");
        for (var i = 0; i < words2.length; ++i)
          obj[words2[i]] = true;
        return obj;
      }
      CodeMirror2.defineMIME("text/x-ttcn-cfg", {
        name: "ttcn-cfg",
        keywords: words("Yes No LogFile FileMask ConsoleMask AppendFile TimeStampFormat LogEventTypes SourceInfoFormat LogEntityName LogSourceInfo DiskFullAction LogFileNumber LogFileSize MatchingHints Detailed Compact SubCategories Stack Single None Seconds DateTime Time Stop Error Retry Delete TCPPort KillTimer NumHCs UnixSocketsEnabled LocalAddress"),
        fileNCtrlMaskOptions: words("TTCN_EXECUTOR TTCN_ERROR TTCN_WARNING TTCN_PORTEVENT TTCN_TIMEROP TTCN_VERDICTOP TTCN_DEFAULTOP TTCN_TESTCASE TTCN_ACTION TTCN_USER TTCN_FUNCTION TTCN_STATISTICS TTCN_PARALLEL TTCN_MATCHING TTCN_DEBUG EXECUTOR ERROR WARNING PORTEVENT TIMEROP VERDICTOP DEFAULTOP TESTCASE ACTION USER FUNCTION STATISTICS PARALLEL MATCHING DEBUG LOG_ALL LOG_NOTHING ACTION_UNQUALIFIED DEBUG_ENCDEC DEBUG_TESTPORT DEBUG_UNQUALIFIED DEFAULTOP_ACTIVATE DEFAULTOP_DEACTIVATE DEFAULTOP_EXIT DEFAULTOP_UNQUALIFIED ERROR_UNQUALIFIED EXECUTOR_COMPONENT EXECUTOR_CONFIGDATA EXECUTOR_EXTCOMMAND EXECUTOR_LOGOPTIONS EXECUTOR_RUNTIME EXECUTOR_UNQUALIFIED FUNCTION_RND FUNCTION_UNQUALIFIED MATCHING_DONE MATCHING_MCSUCCESS MATCHING_MCUNSUCC MATCHING_MMSUCCESS MATCHING_MMUNSUCC MATCHING_PCSUCCESS MATCHING_PCUNSUCC MATCHING_PMSUCCESS MATCHING_PMUNSUCC MATCHING_PROBLEM MATCHING_TIMEOUT MATCHING_UNQUALIFIED PARALLEL_PORTCONN PARALLEL_PORTMAP PARALLEL_PTC PARALLEL_UNQUALIFIED PORTEVENT_DUALRECV PORTEVENT_DUALSEND PORTEVENT_MCRECV PORTEVENT_MCSEND PORTEVENT_MMRECV PORTEVENT_MMSEND PORTEVENT_MQUEUE PORTEVENT_PCIN PORTEVENT_PCOUT PORTEVENT_PMIN PORTEVENT_PMOUT PORTEVENT_PQUEUE PORTEVENT_STATE PORTEVENT_UNQUALIFIED STATISTICS_UNQUALIFIED STATISTICS_VERDICT TESTCASE_FINISH TESTCASE_START TESTCASE_UNQUALIFIED TIMEROP_GUARD TIMEROP_READ TIMEROP_START TIMEROP_STOP TIMEROP_TIMEOUT TIMEROP_UNQUALIFIED USER_UNQUALIFIED VERDICTOP_FINAL VERDICTOP_GETVERDICT VERDICTOP_SETVERDICT VERDICTOP_UNQUALIFIED WARNING_UNQUALIFIED"),
        externalCommands: words("BeginControlPart EndControlPart BeginTestCase EndTestCase"),
        multiLineStrings: true
      });
    });
  }
});

// mode/turtle/turtle.js
var require_turtle = __commonJS({
  "mode/turtle/turtle.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("turtle", function(config) {
        var indentUnit = config.indentUnit;
        var curPunc;
        function wordRegexp(words) {
          return new RegExp("^(?:" + words.join("|") + ")$", "i");
        }
        var ops = wordRegexp([]);
        var keywords = wordRegexp(["@prefix", "@base", "a"]);
        var operatorChars = /[*+\-<>=&|]/;
        function tokenBase(stream, state) {
          var ch = stream.next();
          curPunc = null;
          if (ch == "<" && !stream.match(/^[\s\u00a0=]/, false)) {
            stream.match(/^[^\s\u00a0>]*>?/);
            return "atom";
          } else if (ch == '"' || ch == "'") {
            state.tokenize = tokenLiteral(ch);
            return state.tokenize(stream, state);
          } else if (/[{}\(\),\.;\[\]]/.test(ch)) {
            curPunc = ch;
            return null;
          } else if (ch == "#") {
            stream.skipToEnd();
            return "comment";
          } else if (operatorChars.test(ch)) {
            stream.eatWhile(operatorChars);
            return null;
          } else if (ch == ":") {
            return "operator";
          } else {
            stream.eatWhile(/[_\w\d]/);
            if (stream.peek() == ":") {
              return "variable-3";
            } else {
              var word = stream.current();
              if (keywords.test(word)) {
                return "meta";
              }
              if (ch >= "A" && ch <= "Z") {
                return "comment";
              } else {
                return "keyword";
              }
            }
            var word = stream.current();
            if (ops.test(word))
              return null;
            else if (keywords.test(word))
              return "meta";
            else
              return "variable";
          }
        }
        function tokenLiteral(quote) {
          return function(stream, state) {
            var escaped = false, ch;
            while ((ch = stream.next()) != null) {
              if (ch == quote && !escaped) {
                state.tokenize = tokenBase;
                break;
              }
              escaped = !escaped && ch == "\\";
            }
            return "string";
          };
        }
        function pushContext(state, type, col) {
          state.context = { prev: state.context, indent: state.indent, col, type };
        }
        function popContext(state) {
          state.indent = state.context.indent;
          state.context = state.context.prev;
        }
        return {
          startState: function() {
            return {
              tokenize: tokenBase,
              context: null,
              indent: 0,
              col: 0
            };
          },
          token: function(stream, state) {
            if (stream.sol()) {
              if (state.context && state.context.align == null)
                state.context.align = false;
              state.indent = stream.indentation();
            }
            if (stream.eatSpace())
              return null;
            var style = state.tokenize(stream, state);
            if (style != "comment" && state.context && state.context.align == null && state.context.type != "pattern") {
              state.context.align = true;
            }
            if (curPunc == "(")
              pushContext(state, ")", stream.column());
            else if (curPunc == "[")
              pushContext(state, "]", stream.column());
            else if (curPunc == "{")
              pushContext(state, "}", stream.column());
            else if (/[\]\}\)]/.test(curPunc)) {
              while (state.context && state.context.type == "pattern")
                popContext(state);
              if (state.context && curPunc == state.context.type)
                popContext(state);
            } else if (curPunc == "." && state.context && state.context.type == "pattern")
              popContext(state);
            else if (/atom|string|variable/.test(style) && state.context) {
              if (/[\}\]]/.test(state.context.type))
                pushContext(state, "pattern", stream.column());
              else if (state.context.type == "pattern" && !state.context.align) {
                state.context.align = true;
                state.context.col = stream.column();
              }
            }
            return style;
          },
          indent: function(state, textAfter) {
            var firstChar = textAfter && textAfter.charAt(0);
            var context = state.context;
            if (/[\]\}]/.test(firstChar))
              while (context && context.type == "pattern")
                context = context.prev;
            var closing = context && firstChar == context.type;
            if (!context)
              return 0;
            else if (context.type == "pattern")
              return context.col;
            else if (context.align)
              return context.col + (closing ? 0 : 1);
            else
              return context.indent + (closing ? 0 : indentUnit);
          },
          lineComment: "#"
        };
      });
      CodeMirror2.defineMIME("text/turtle", "turtle");
    });
  }
});

// mode/twig/twig.js
var require_twig = __commonJS({
  "mode/twig/twig.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror(), require_multiplex());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror", "../../addon/mode/multiplex"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("twig:inner", function() {
        var keywords = ["and", "as", "autoescape", "endautoescape", "block", "do", "endblock", "else", "elseif", "extends", "for", "endfor", "embed", "endembed", "filter", "endfilter", "flush", "from", "if", "endif", "in", "is", "include", "import", "not", "or", "set", "spaceless", "endspaceless", "with", "endwith", "trans", "endtrans", "blocktrans", "endblocktrans", "macro", "endmacro", "use", "verbatim", "endverbatim"], operator = /^[+\-*&%=<>!?|~^]/, sign = /^[:\[\(\{]/, atom = ["true", "false", "null", "empty", "defined", "divisibleby", "divisible by", "even", "odd", "iterable", "sameas", "same as"], number = /^(\d[+\-\*\/])?\d+(\.\d+)?/;
        keywords = new RegExp("((" + keywords.join(")|(") + "))\\b");
        atom = new RegExp("((" + atom.join(")|(") + "))\\b");
        function tokenBase(stream, state) {
          var ch = stream.peek();
          if (state.incomment) {
            if (!stream.skipTo("#}")) {
              stream.skipToEnd();
            } else {
              stream.eatWhile(/\#|}/);
              state.incomment = false;
            }
            return "comment";
          } else if (state.intag) {
            if (state.operator) {
              state.operator = false;
              if (stream.match(atom)) {
                return "atom";
              }
              if (stream.match(number)) {
                return "number";
              }
            }
            if (state.sign) {
              state.sign = false;
              if (stream.match(atom)) {
                return "atom";
              }
              if (stream.match(number)) {
                return "number";
              }
            }
            if (state.instring) {
              if (ch == state.instring) {
                state.instring = false;
              }
              stream.next();
              return "string";
            } else if (ch == "'" || ch == '"') {
              state.instring = ch;
              stream.next();
              return "string";
            } else if (stream.match(state.intag + "}") || stream.eat("-") && stream.match(state.intag + "}")) {
              state.intag = false;
              return "tag";
            } else if (stream.match(operator)) {
              state.operator = true;
              return "operator";
            } else if (stream.match(sign)) {
              state.sign = true;
            } else {
              if (stream.eat(" ") || stream.sol()) {
                if (stream.match(keywords)) {
                  return "keyword";
                }
                if (stream.match(atom)) {
                  return "atom";
                }
                if (stream.match(number)) {
                  return "number";
                }
                if (stream.sol()) {
                  stream.next();
                }
              } else {
                stream.next();
              }
            }
            return "variable";
          } else if (stream.eat("{")) {
            if (stream.eat("#")) {
              state.incomment = true;
              if (!stream.skipTo("#}")) {
                stream.skipToEnd();
              } else {
                stream.eatWhile(/\#|}/);
                state.incomment = false;
              }
              return "comment";
            } else if (ch = stream.eat(/\{|%/)) {
              state.intag = ch;
              if (ch == "{") {
                state.intag = "}";
              }
              stream.eat("-");
              return "tag";
            }
          }
          stream.next();
        }
        ;
        return {
          startState: function() {
            return {};
          },
          token: function(stream, state) {
            return tokenBase(stream, state);
          }
        };
      });
      CodeMirror2.defineMode("twig", function(config, parserConfig) {
        var twigInner = CodeMirror2.getMode(config, "twig:inner");
        if (!parserConfig || !parserConfig.base)
          return twigInner;
        return CodeMirror2.multiplexingMode(
          CodeMirror2.getMode(config, parserConfig.base),
          {
            open: /\{[{#%]/,
            close: /[}#%]\}/,
            mode: twigInner,
            parseDelimiters: true
          }
        );
      });
      CodeMirror2.defineMIME("text/x-twig", "twig");
    });
  }
});

// mode/vb/vb.js
var require_vb = __commonJS({
  "mode/vb/vb.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("vb", function(conf, parserConf) {
        var ERRORCLASS = "error";
        function wordRegexp(words) {
          return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
        }
        var singleOperators = new RegExp("^[\\+\\-\\*/%&\\\\|\\^~<>!]");
        var singleDelimiters = new RegExp("^[\\(\\)\\[\\]\\{\\}@,:`=;\\.]");
        var doubleOperators = new RegExp("^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\*\\*))");
        var doubleDelimiters = new RegExp("^((\\+=)|(\\-=)|(\\*=)|(%=)|(/=)|(&=)|(\\|=)|(\\^=))");
        var tripleDelimiters = new RegExp("^((//=)|(>>=)|(<<=)|(\\*\\*=))");
        var identifiers = new RegExp("^[_A-Za-z][_A-Za-z0-9]*");
        var openingKeywords = ["class", "module", "sub", "enum", "select", "while", "if", "function", "get", "set", "property", "try", "structure", "synclock", "using", "with"];
        var middleKeywords = ["else", "elseif", "case", "catch", "finally"];
        var endKeywords = ["next", "loop"];
        var operatorKeywords = ["and", "andalso", "or", "orelse", "xor", "in", "not", "is", "isnot", "like"];
        var wordOperators = wordRegexp(operatorKeywords);
        var commonKeywords = ["#const", "#else", "#elseif", "#end", "#if", "#region", "addhandler", "addressof", "alias", "as", "byref", "byval", "cbool", "cbyte", "cchar", "cdate", "cdbl", "cdec", "cint", "clng", "cobj", "compare", "const", "continue", "csbyte", "cshort", "csng", "cstr", "cuint", "culng", "cushort", "declare", "default", "delegate", "dim", "directcast", "each", "erase", "error", "event", "exit", "explicit", "false", "for", "friend", "gettype", "goto", "handles", "implements", "imports", "infer", "inherits", "interface", "isfalse", "istrue", "lib", "me", "mod", "mustinherit", "mustoverride", "my", "mybase", "myclass", "namespace", "narrowing", "new", "nothing", "notinheritable", "notoverridable", "of", "off", "on", "operator", "option", "optional", "out", "overloads", "overridable", "overrides", "paramarray", "partial", "private", "protected", "public", "raiseevent", "readonly", "redim", "removehandler", "resume", "return", "shadows", "shared", "static", "step", "stop", "strict", "then", "throw", "to", "true", "trycast", "typeof", "until", "until", "when", "widening", "withevents", "writeonly"];
        var commontypes = ["object", "boolean", "char", "string", "byte", "sbyte", "short", "ushort", "int16", "uint16", "integer", "uinteger", "int32", "uint32", "long", "ulong", "int64", "uint64", "decimal", "single", "double", "float", "date", "datetime", "intptr", "uintptr"];
        var keywords = wordRegexp(commonKeywords);
        var types = wordRegexp(commontypes);
        var stringPrefixes = '"';
        var opening = wordRegexp(openingKeywords);
        var middle = wordRegexp(middleKeywords);
        var closing = wordRegexp(endKeywords);
        var doubleClosing = wordRegexp(["end"]);
        var doOpening = wordRegexp(["do"]);
        var indentInfo = null;
        CodeMirror2.registerHelper("hintWords", "vb", openingKeywords.concat(middleKeywords).concat(endKeywords).concat(operatorKeywords).concat(commonKeywords).concat(commontypes));
        function indent(_stream, state) {
          state.currentIndent++;
        }
        function dedent(_stream, state) {
          state.currentIndent--;
        }
        function tokenBase(stream, state) {
          if (stream.eatSpace()) {
            return null;
          }
          var ch = stream.peek();
          if (ch === "'") {
            stream.skipToEnd();
            return "comment";
          }
          if (stream.match(/^((&H)|(&O))?[0-9\.a-f]/i, false)) {
            var floatLiteral = false;
            if (stream.match(/^\d*\.\d+F?/i)) {
              floatLiteral = true;
            } else if (stream.match(/^\d+\.\d*F?/)) {
              floatLiteral = true;
            } else if (stream.match(/^\.\d+F?/)) {
              floatLiteral = true;
            }
            if (floatLiteral) {
              stream.eat(/J/i);
              return "number";
            }
            var intLiteral = false;
            if (stream.match(/^&H[0-9a-f]+/i)) {
              intLiteral = true;
            } else if (stream.match(/^&O[0-7]+/i)) {
              intLiteral = true;
            } else if (stream.match(/^[1-9]\d*F?/)) {
              stream.eat(/J/i);
              intLiteral = true;
            } else if (stream.match(/^0(?![\dx])/i)) {
              intLiteral = true;
            }
            if (intLiteral) {
              stream.eat(/L/i);
              return "number";
            }
          }
          if (stream.match(stringPrefixes)) {
            state.tokenize = tokenStringFactory(stream.current());
            return state.tokenize(stream, state);
          }
          if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters)) {
            return null;
          }
          if (stream.match(doubleOperators) || stream.match(singleOperators) || stream.match(wordOperators)) {
            return "operator";
          }
          if (stream.match(singleDelimiters)) {
            return null;
          }
          if (stream.match(doOpening)) {
            indent(stream, state);
            state.doInCurrentLine = true;
            return "keyword";
          }
          if (stream.match(opening)) {
            if (!state.doInCurrentLine)
              indent(stream, state);
            else
              state.doInCurrentLine = false;
            return "keyword";
          }
          if (stream.match(middle)) {
            return "keyword";
          }
          if (stream.match(doubleClosing)) {
            dedent(stream, state);
            dedent(stream, state);
            return "keyword";
          }
          if (stream.match(closing)) {
            dedent(stream, state);
            return "keyword";
          }
          if (stream.match(types)) {
            return "keyword";
          }
          if (stream.match(keywords)) {
            return "keyword";
          }
          if (stream.match(identifiers)) {
            return "variable";
          }
          stream.next();
          return ERRORCLASS;
        }
        function tokenStringFactory(delimiter) {
          var singleline = delimiter.length == 1;
          var OUTCLASS = "string";
          return function(stream, state) {
            while (!stream.eol()) {
              stream.eatWhile(/[^'"]/);
              if (stream.match(delimiter)) {
                state.tokenize = tokenBase;
                return OUTCLASS;
              } else {
                stream.eat(/['"]/);
              }
            }
            if (singleline) {
              if (parserConf.singleLineStringErrors) {
                return ERRORCLASS;
              } else {
                state.tokenize = tokenBase;
              }
            }
            return OUTCLASS;
          };
        }
        function tokenLexer(stream, state) {
          var style = state.tokenize(stream, state);
          var current = stream.current();
          if (current === ".") {
            style = state.tokenize(stream, state);
            if (style === "variable") {
              return "variable";
            } else {
              return ERRORCLASS;
            }
          }
          var delimiter_index = "[({".indexOf(current);
          if (delimiter_index !== -1) {
            indent(stream, state);
          }
          if (indentInfo === "dedent") {
            if (dedent(stream, state)) {
              return ERRORCLASS;
            }
          }
          delimiter_index = "])}".indexOf(current);
          if (delimiter_index !== -1) {
            if (dedent(stream, state)) {
              return ERRORCLASS;
            }
          }
          return style;
        }
        var external = {
          electricChars: "dDpPtTfFeE ",
          startState: function() {
            return {
              tokenize: tokenBase,
              lastToken: null,
              currentIndent: 0,
              nextLineIndent: 0,
              doInCurrentLine: false
            };
          },
          token: function(stream, state) {
            if (stream.sol()) {
              state.currentIndent += state.nextLineIndent;
              state.nextLineIndent = 0;
              state.doInCurrentLine = 0;
            }
            var style = tokenLexer(stream, state);
            state.lastToken = { style, content: stream.current() };
            return style;
          },
          indent: function(state, textAfter) {
            var trueText = textAfter.replace(/^\s+|\s+$/g, "");
            if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle))
              return conf.indentUnit * (state.currentIndent - 1);
            if (state.currentIndent < 0)
              return 0;
            return state.currentIndent * conf.indentUnit;
          },
          lineComment: "'"
        };
        return external;
      });
      CodeMirror2.defineMIME("text/x-vb", "vb");
    });
  }
});

// mode/vbscript/vbscript.js
var require_vbscript = __commonJS({
  "mode/vbscript/vbscript.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("vbscript", function(conf, parserConf) {
        var ERRORCLASS = "error";
        function wordRegexp(words) {
          return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
        }
        var singleOperators = new RegExp("^[\\+\\-\\*/&\\\\\\^<>=]");
        var doubleOperators = new RegExp("^((<>)|(<=)|(>=))");
        var singleDelimiters = new RegExp("^[\\.,]");
        var brakets = new RegExp("^[\\(\\)]");
        var identifiers = new RegExp("^[A-Za-z][_A-Za-z0-9]*");
        var openingKeywords = ["class", "sub", "select", "while", "if", "function", "property", "with", "for"];
        var middleKeywords = ["else", "elseif", "case"];
        var endKeywords = ["next", "loop", "wend"];
        var wordOperators = wordRegexp(["and", "or", "not", "xor", "is", "mod", "eqv", "imp"]);
        var commonkeywords = [
          "dim",
          "redim",
          "then",
          "until",
          "randomize",
          "byval",
          "byref",
          "new",
          "property",
          "exit",
          "in",
          "const",
          "private",
          "public",
          "get",
          "set",
          "let",
          "stop",
          "on error resume next",
          "on error goto 0",
          "option explicit",
          "call",
          "me"
        ];
        var atomWords = ["true", "false", "nothing", "empty", "null"];
        var builtinFuncsWords = [
          "abs",
          "array",
          "asc",
          "atn",
          "cbool",
          "cbyte",
          "ccur",
          "cdate",
          "cdbl",
          "chr",
          "cint",
          "clng",
          "cos",
          "csng",
          "cstr",
          "date",
          "dateadd",
          "datediff",
          "datepart",
          "dateserial",
          "datevalue",
          "day",
          "escape",
          "eval",
          "execute",
          "exp",
          "filter",
          "formatcurrency",
          "formatdatetime",
          "formatnumber",
          "formatpercent",
          "getlocale",
          "getobject",
          "getref",
          "hex",
          "hour",
          "inputbox",
          "instr",
          "instrrev",
          "int",
          "fix",
          "isarray",
          "isdate",
          "isempty",
          "isnull",
          "isnumeric",
          "isobject",
          "join",
          "lbound",
          "lcase",
          "left",
          "len",
          "loadpicture",
          "log",
          "ltrim",
          "rtrim",
          "trim",
          "maths",
          "mid",
          "minute",
          "month",
          "monthname",
          "msgbox",
          "now",
          "oct",
          "replace",
          "rgb",
          "right",
          "rnd",
          "round",
          "scriptengine",
          "scriptenginebuildversion",
          "scriptenginemajorversion",
          "scriptengineminorversion",
          "second",
          "setlocale",
          "sgn",
          "sin",
          "space",
          "split",
          "sqr",
          "strcomp",
          "string",
          "strreverse",
          "tan",
          "time",
          "timer",
          "timeserial",
          "timevalue",
          "typename",
          "ubound",
          "ucase",
          "unescape",
          "vartype",
          "weekday",
          "weekdayname",
          "year"
        ];
        var builtinConsts = [
          "vbBlack",
          "vbRed",
          "vbGreen",
          "vbYellow",
          "vbBlue",
          "vbMagenta",
          "vbCyan",
          "vbWhite",
          "vbBinaryCompare",
          "vbTextCompare",
          "vbSunday",
          "vbMonday",
          "vbTuesday",
          "vbWednesday",
          "vbThursday",
          "vbFriday",
          "vbSaturday",
          "vbUseSystemDayOfWeek",
          "vbFirstJan1",
          "vbFirstFourDays",
          "vbFirstFullWeek",
          "vbGeneralDate",
          "vbLongDate",
          "vbShortDate",
          "vbLongTime",
          "vbShortTime",
          "vbObjectError",
          "vbOKOnly",
          "vbOKCancel",
          "vbAbortRetryIgnore",
          "vbYesNoCancel",
          "vbYesNo",
          "vbRetryCancel",
          "vbCritical",
          "vbQuestion",
          "vbExclamation",
          "vbInformation",
          "vbDefaultButton1",
          "vbDefaultButton2",
          "vbDefaultButton3",
          "vbDefaultButton4",
          "vbApplicationModal",
          "vbSystemModal",
          "vbOK",
          "vbCancel",
          "vbAbort",
          "vbRetry",
          "vbIgnore",
          "vbYes",
          "vbNo",
          "vbCr",
          "VbCrLf",
          "vbFormFeed",
          "vbLf",
          "vbNewLine",
          "vbNullChar",
          "vbNullString",
          "vbTab",
          "vbVerticalTab",
          "vbUseDefault",
          "vbTrue",
          "vbFalse",
          "vbEmpty",
          "vbNull",
          "vbInteger",
          "vbLong",
          "vbSingle",
          "vbDouble",
          "vbCurrency",
          "vbDate",
          "vbString",
          "vbObject",
          "vbError",
          "vbBoolean",
          "vbVariant",
          "vbDataObject",
          "vbDecimal",
          "vbByte",
          "vbArray"
        ];
        var builtinObjsWords = ["WScript", "err", "debug", "RegExp"];
        var knownProperties = ["description", "firstindex", "global", "helpcontext", "helpfile", "ignorecase", "length", "number", "pattern", "source", "value", "count"];
        var knownMethods = ["clear", "execute", "raise", "replace", "test", "write", "writeline", "close", "open", "state", "eof", "update", "addnew", "end", "createobject", "quit"];
        var aspBuiltinObjsWords = ["server", "response", "request", "session", "application"];
        var aspKnownProperties = [
          "buffer",
          "cachecontrol",
          "charset",
          "contenttype",
          "expires",
          "expiresabsolute",
          "isclientconnected",
          "pics",
          "status",
          //response
          "clientcertificate",
          "cookies",
          "form",
          "querystring",
          "servervariables",
          "totalbytes",
          //request
          "contents",
          "staticobjects",
          //application
          "codepage",
          "lcid",
          "sessionid",
          "timeout",
          //session
          "scripttimeout"
        ];
        var aspKnownMethods = [
          "addheader",
          "appendtolog",
          "binarywrite",
          "end",
          "flush",
          "redirect",
          //response
          "binaryread",
          //request
          "remove",
          "removeall",
          "lock",
          "unlock",
          //application
          "abandon",
          //session
          "getlasterror",
          "htmlencode",
          "mappath",
          "transfer",
          "urlencode"
        ];
        var knownWords = knownMethods.concat(knownProperties);
        builtinObjsWords = builtinObjsWords.concat(builtinConsts);
        if (conf.isASP) {
          builtinObjsWords = builtinObjsWords.concat(aspBuiltinObjsWords);
          knownWords = knownWords.concat(aspKnownMethods, aspKnownProperties);
        }
        ;
        var keywords = wordRegexp(commonkeywords);
        var atoms = wordRegexp(atomWords);
        var builtinFuncs = wordRegexp(builtinFuncsWords);
        var builtinObjs = wordRegexp(builtinObjsWords);
        var known = wordRegexp(knownWords);
        var stringPrefixes = '"';
        var opening = wordRegexp(openingKeywords);
        var middle = wordRegexp(middleKeywords);
        var closing = wordRegexp(endKeywords);
        var doubleClosing = wordRegexp(["end"]);
        var doOpening = wordRegexp(["do"]);
        var noIndentWords = wordRegexp(["on error resume next", "exit"]);
        var comment = wordRegexp(["rem"]);
        function indent(_stream, state) {
          state.currentIndent++;
        }
        function dedent(_stream, state) {
          state.currentIndent--;
        }
        function tokenBase(stream, state) {
          if (stream.eatSpace()) {
            return "space";
          }
          var ch = stream.peek();
          if (ch === "'") {
            stream.skipToEnd();
            return "comment";
          }
          if (stream.match(comment)) {
            stream.skipToEnd();
            return "comment";
          }
          if (stream.match(/^((&H)|(&O))?[0-9\.]/i, false) && !stream.match(/^((&H)|(&O))?[0-9\.]+[a-z_]/i, false)) {
            var floatLiteral = false;
            if (stream.match(/^\d*\.\d+/i)) {
              floatLiteral = true;
            } else if (stream.match(/^\d+\.\d*/)) {
              floatLiteral = true;
            } else if (stream.match(/^\.\d+/)) {
              floatLiteral = true;
            }
            if (floatLiteral) {
              stream.eat(/J/i);
              return "number";
            }
            var intLiteral = false;
            if (stream.match(/^&H[0-9a-f]+/i)) {
              intLiteral = true;
            } else if (stream.match(/^&O[0-7]+/i)) {
              intLiteral = true;
            } else if (stream.match(/^[1-9]\d*F?/)) {
              stream.eat(/J/i);
              intLiteral = true;
            } else if (stream.match(/^0(?![\dx])/i)) {
              intLiteral = true;
            }
            if (intLiteral) {
              stream.eat(/L/i);
              return "number";
            }
          }
          if (stream.match(stringPrefixes)) {
            state.tokenize = tokenStringFactory(stream.current());
            return state.tokenize(stream, state);
          }
          if (stream.match(doubleOperators) || stream.match(singleOperators) || stream.match(wordOperators)) {
            return "operator";
          }
          if (stream.match(singleDelimiters)) {
            return null;
          }
          if (stream.match(brakets)) {
            return "bracket";
          }
          if (stream.match(noIndentWords)) {
            state.doInCurrentLine = true;
            return "keyword";
          }
          if (stream.match(doOpening)) {
            indent(stream, state);
            state.doInCurrentLine = true;
            return "keyword";
          }
          if (stream.match(opening)) {
            if (!state.doInCurrentLine)
              indent(stream, state);
            else
              state.doInCurrentLine = false;
            return "keyword";
          }
          if (stream.match(middle)) {
            return "keyword";
          }
          if (stream.match(doubleClosing)) {
            dedent(stream, state);
            dedent(stream, state);
            return "keyword";
          }
          if (stream.match(closing)) {
            if (!state.doInCurrentLine)
              dedent(stream, state);
            else
              state.doInCurrentLine = false;
            return "keyword";
          }
          if (stream.match(keywords)) {
            return "keyword";
          }
          if (stream.match(atoms)) {
            return "atom";
          }
          if (stream.match(known)) {
            return "variable-2";
          }
          if (stream.match(builtinFuncs)) {
            return "builtin";
          }
          if (stream.match(builtinObjs)) {
            return "variable-2";
          }
          if (stream.match(identifiers)) {
            return "variable";
          }
          stream.next();
          return ERRORCLASS;
        }
        function tokenStringFactory(delimiter) {
          var singleline = delimiter.length == 1;
          var OUTCLASS = "string";
          return function(stream, state) {
            while (!stream.eol()) {
              stream.eatWhile(/[^'"]/);
              if (stream.match(delimiter)) {
                state.tokenize = tokenBase;
                return OUTCLASS;
              } else {
                stream.eat(/['"]/);
              }
            }
            if (singleline) {
              if (parserConf.singleLineStringErrors) {
                return ERRORCLASS;
              } else {
                state.tokenize = tokenBase;
              }
            }
            return OUTCLASS;
          };
        }
        function tokenLexer(stream, state) {
          var style = state.tokenize(stream, state);
          var current = stream.current();
          if (current === ".") {
            style = state.tokenize(stream, state);
            current = stream.current();
            if (style && (style.substr(0, 8) === "variable" || style === "builtin" || style === "keyword")) {
              if (style === "builtin" || style === "keyword")
                style = "variable";
              if (knownWords.indexOf(current.substr(1)) > -1)
                style = "variable-2";
              return style;
            } else {
              return ERRORCLASS;
            }
          }
          return style;
        }
        var external = {
          electricChars: "dDpPtTfFeE ",
          startState: function() {
            return {
              tokenize: tokenBase,
              lastToken: null,
              currentIndent: 0,
              nextLineIndent: 0,
              doInCurrentLine: false,
              ignoreKeyword: false
            };
          },
          token: function(stream, state) {
            if (stream.sol()) {
              state.currentIndent += state.nextLineIndent;
              state.nextLineIndent = 0;
              state.doInCurrentLine = 0;
            }
            var style = tokenLexer(stream, state);
            state.lastToken = { style, content: stream.current() };
            if (style === "space")
              style = null;
            return style;
          },
          indent: function(state, textAfter) {
            var trueText = textAfter.replace(/^\s+|\s+$/g, "");
            if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle))
              return conf.indentUnit * (state.currentIndent - 1);
            if (state.currentIndent < 0)
              return 0;
            return state.currentIndent * conf.indentUnit;
          }
        };
        return external;
      });
      CodeMirror2.defineMIME("text/vbscript", "vbscript");
    });
  }
});

// mode/velocity/velocity.js
var require_velocity = __commonJS({
  "mode/velocity/velocity.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("velocity", function() {
        function parseWords(str) {
          var obj = {}, words = str.split(" ");
          for (var i = 0; i < words.length; ++i)
            obj[words[i]] = true;
          return obj;
        }
        var keywords = parseWords("#end #else #break #stop #[[ #]] #{end} #{else} #{break} #{stop}");
        var functions = parseWords("#if #elseif #foreach #set #include #parse #macro #define #evaluate #{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}");
        var specials = parseWords("$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent");
        var isOperatorChar = /[+\-*&%=<>!?:\/|]/;
        function chain(stream, state, f) {
          state.tokenize = f;
          return f(stream, state);
        }
        function tokenBase(stream, state) {
          var beforeParams = state.beforeParams;
          state.beforeParams = false;
          var ch = stream.next();
          if (ch == "'" && !state.inString && state.inParams) {
            state.lastTokenWasBuiltin = false;
            return chain(stream, state, tokenString(ch));
          } else if (ch == '"') {
            state.lastTokenWasBuiltin = false;
            if (state.inString) {
              state.inString = false;
              return "string";
            } else if (state.inParams)
              return chain(stream, state, tokenString(ch));
          } else if (/[\[\]{}\(\),;\.]/.test(ch)) {
            if (ch == "(" && beforeParams)
              state.inParams = true;
            else if (ch == ")") {
              state.inParams = false;
              state.lastTokenWasBuiltin = true;
            }
            return null;
          } else if (/\d/.test(ch)) {
            state.lastTokenWasBuiltin = false;
            stream.eatWhile(/[\w\.]/);
            return "number";
          } else if (ch == "#" && stream.eat("*")) {
            state.lastTokenWasBuiltin = false;
            return chain(stream, state, tokenComment);
          } else if (ch == "#" && stream.match(/ *\[ *\[/)) {
            state.lastTokenWasBuiltin = false;
            return chain(stream, state, tokenUnparsed);
          } else if (ch == "#" && stream.eat("#")) {
            state.lastTokenWasBuiltin = false;
            stream.skipToEnd();
            return "comment";
          } else if (ch == "$") {
            stream.eatWhile(/[\w\d\$_\.{}-]/);
            if (specials && specials.propertyIsEnumerable(stream.current())) {
              return "keyword";
            } else {
              state.lastTokenWasBuiltin = true;
              state.beforeParams = true;
              return "builtin";
            }
          } else if (isOperatorChar.test(ch)) {
            state.lastTokenWasBuiltin = false;
            stream.eatWhile(isOperatorChar);
            return "operator";
          } else {
            stream.eatWhile(/[\w\$_{}@]/);
            var word = stream.current();
            if (keywords && keywords.propertyIsEnumerable(word))
              return "keyword";
            if (functions && functions.propertyIsEnumerable(word) || stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek() == "(" && !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {
              state.beforeParams = true;
              state.lastTokenWasBuiltin = false;
              return "keyword";
            }
            if (state.inString) {
              state.lastTokenWasBuiltin = false;
              return "string";
            }
            if (stream.pos > word.length && stream.string.charAt(stream.pos - word.length - 1) == "." && state.lastTokenWasBuiltin)
              return "builtin";
            state.lastTokenWasBuiltin = false;
            return null;
          }
        }
        function tokenString(quote) {
          return function(stream, state) {
            var escaped = false, next, end = false;
            while ((next = stream.next()) != null) {
              if (next == quote && !escaped) {
                end = true;
                break;
              }
              if (quote == '"' && stream.peek() == "$" && !escaped) {
                state.inString = true;
                end = true;
                break;
              }
              escaped = !escaped && next == "\\";
            }
            if (end)
              state.tokenize = tokenBase;
            return "string";
          };
        }
        function tokenComment(stream, state) {
          var maybeEnd = false, ch;
          while (ch = stream.next()) {
            if (ch == "#" && maybeEnd) {
              state.tokenize = tokenBase;
              break;
            }
            maybeEnd = ch == "*";
          }
          return "comment";
        }
        function tokenUnparsed(stream, state) {
          var maybeEnd = 0, ch;
          while (ch = stream.next()) {
            if (ch == "#" && maybeEnd == 2) {
              state.tokenize = tokenBase;
              break;
            }
            if (ch == "]")
              maybeEnd++;
            else if (ch != " ")
              maybeEnd = 0;
          }
          return "meta";
        }
        return {
          startState: function() {
            return {
              tokenize: tokenBase,
              beforeParams: false,
              inParams: false,
              inString: false,
              lastTokenWasBuiltin: false
            };
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            return state.tokenize(stream, state);
          },
          blockCommentStart: "#*",
          blockCommentEnd: "*#",
          lineComment: "##",
          fold: "velocity"
        };
      });
      CodeMirror2.defineMIME("text/velocity", "velocity");
    });
  }
});

// mode/verilog/verilog.js
var require_verilog = __commonJS({
  "mode/verilog/verilog.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("verilog", function(config, parserConfig) {
        var indentUnit = config.indentUnit, statementIndentUnit = parserConfig.statementIndentUnit || indentUnit, dontAlignCalls = parserConfig.dontAlignCalls, noIndentKeywords = parserConfig.noIndentKeywords || [], multiLineStrings = parserConfig.multiLineStrings, hooks = parserConfig.hooks || {};
        function words(str) {
          var obj = {}, words2 = str.split(" ");
          for (var i2 = 0; i2 < words2.length; ++i2)
            obj[words2[i2]] = true;
          return obj;
        }
        var keywords = words(
          "accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind bins binsof bit break buf bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin function generate genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import incdir include initial inout input inside instance int integer interconnect interface intersect join join_any join_none large let liblist library local localparam logic longint macromodule matches medium modport module nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 null or output package packed parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor"
        );
        var isOperatorChar = /[\+\-\*\/!~&|^%=?:]/;
        var isBracketChar = /[\[\]{}()]/;
        var unsignedNumber = /\d[0-9_]*/;
        var decimalLiteral = /\d*\s*'s?d\s*\d[0-9_]*/i;
        var binaryLiteral = /\d*\s*'s?b\s*[xz01][xz01_]*/i;
        var octLiteral = /\d*\s*'s?o\s*[xz0-7][xz0-7_]*/i;
        var hexLiteral = /\d*\s*'s?h\s*[0-9a-fxz?][0-9a-fxz?_]*/i;
        var realLiteral = /(\d[\d_]*(\.\d[\d_]*)?E-?[\d_]+)|(\d[\d_]*\.\d[\d_]*)/i;
        var closingBracketOrWord = /^((\w+)|[)}\]])/;
        var closingBracket = /[)}\]]/;
        var curPunc;
        var curKeyword;
        var blockKeywords = words(
          "case checker class clocking config function generate interface module package primitive program property specify sequence table task"
        );
        var openClose = {};
        for (var keyword in blockKeywords) {
          openClose[keyword] = "end" + keyword;
        }
        openClose["begin"] = "end";
        openClose["casex"] = "endcase";
        openClose["casez"] = "endcase";
        openClose["do"] = "while";
        openClose["fork"] = "join;join_any;join_none";
        openClose["covergroup"] = "endgroup";
        for (var i in noIndentKeywords) {
          var keyword = noIndentKeywords[i];
          if (openClose[keyword]) {
            openClose[keyword] = void 0;
          }
        }
        var statementKeywords = words("always always_comb always_ff always_latch assert assign assume else export for foreach forever if import initial repeat while");
        function tokenBase(stream, state) {
          var ch = stream.peek(), style;
          if (hooks[ch] && (style = hooks[ch](stream, state)) != false)
            return style;
          if (hooks.tokenBase && (style = hooks.tokenBase(stream, state)) != false)
            return style;
          if (/[,;:\.]/.test(ch)) {
            curPunc = stream.next();
            return null;
          }
          if (isBracketChar.test(ch)) {
            curPunc = stream.next();
            return "bracket";
          }
          if (ch == "`") {
            stream.next();
            if (stream.eatWhile(/[\w\$_]/)) {
              return "def";
            } else {
              return null;
            }
          }
          if (ch == "$") {
            stream.next();
            if (stream.eatWhile(/[\w\$_]/)) {
              return "meta";
            } else {
              return null;
            }
          }
          if (ch == "#") {
            stream.next();
            stream.eatWhile(/[\d_.]/);
            return "def";
          }
          if (ch == '"') {
            stream.next();
            state.tokenize = tokenString(ch);
            return state.tokenize(stream, state);
          }
          if (ch == "/") {
            stream.next();
            if (stream.eat("*")) {
              state.tokenize = tokenComment;
              return tokenComment(stream, state);
            }
            if (stream.eat("/")) {
              stream.skipToEnd();
              return "comment";
            }
            stream.backUp(1);
          }
          if (stream.match(realLiteral) || stream.match(decimalLiteral) || stream.match(binaryLiteral) || stream.match(octLiteral) || stream.match(hexLiteral) || stream.match(unsignedNumber) || stream.match(realLiteral)) {
            return "number";
          }
          if (stream.eatWhile(isOperatorChar)) {
            return "meta";
          }
          if (stream.eatWhile(/[\w\$_]/)) {
            var cur = stream.current();
            if (keywords[cur]) {
              if (openClose[cur]) {
                curPunc = "newblock";
              }
              if (statementKeywords[cur]) {
                curPunc = "newstatement";
              }
              curKeyword = cur;
              return "keyword";
            }
            return "variable";
          }
          stream.next();
          return null;
        }
        function tokenString(quote) {
          return function(stream, state) {
            var escaped = false, next, end = false;
            while ((next = stream.next()) != null) {
              if (next == quote && !escaped) {
                end = true;
                break;
              }
              escaped = !escaped && next == "\\";
            }
            if (end || !(escaped || multiLineStrings))
              state.tokenize = tokenBase;
            return "string";
          };
        }
        function tokenComment(stream, state) {
          var maybeEnd = false, ch;
          while (ch = stream.next()) {
            if (ch == "/" && maybeEnd) {
              state.tokenize = tokenBase;
              break;
            }
            maybeEnd = ch == "*";
          }
          return "comment";
        }
        function Context(indented, column, type, align, prev) {
          this.indented = indented;
          this.column = column;
          this.type = type;
          this.align = align;
          this.prev = prev;
        }
        function pushContext(state, col, type) {
          var indent = state.indented;
          var c = new Context(indent, col, type, null, state.context);
          return state.context = c;
        }
        function popContext(state) {
          var t = state.context.type;
          if (t == ")" || t == "]" || t == "}") {
            state.indented = state.context.indented;
          }
          return state.context = state.context.prev;
        }
        function isClosing(text, contextClosing) {
          if (text == contextClosing) {
            return true;
          } else {
            var closingKeywords = contextClosing.split(";");
            for (var i2 in closingKeywords) {
              if (text == closingKeywords[i2]) {
                return true;
              }
            }
            return false;
          }
        }
        function buildElectricInputRegEx() {
          var allClosings = [];
          for (var i2 in openClose) {
            if (openClose[i2]) {
              var closings = openClose[i2].split(";");
              for (var j in closings) {
                allClosings.push(closings[j]);
              }
            }
          }
          var re = new RegExp("[{}()\\[\\]]|(" + allClosings.join("|") + ")$");
          return re;
        }
        return {
          // Regex to force current line to reindent
          electricInput: buildElectricInputRegEx(),
          startState: function(basecolumn) {
            var state = {
              tokenize: null,
              context: new Context((basecolumn || 0) - indentUnit, 0, "top", false),
              indented: 0,
              startOfLine: true
            };
            if (hooks.startState)
              hooks.startState(state);
            return state;
          },
          token: function(stream, state) {
            var ctx = state.context;
            if (stream.sol()) {
              if (ctx.align == null)
                ctx.align = false;
              state.indented = stream.indentation();
              state.startOfLine = true;
            }
            if (hooks.token) {
              var style = hooks.token(stream, state);
              if (style !== void 0) {
                return style;
              }
            }
            if (stream.eatSpace())
              return null;
            curPunc = null;
            curKeyword = null;
            var style = (state.tokenize || tokenBase)(stream, state);
            if (style == "comment" || style == "meta" || style == "variable")
              return style;
            if (ctx.align == null)
              ctx.align = true;
            if (curPunc == ctx.type) {
              popContext(state);
            } else if (curPunc == ";" && ctx.type == "statement" || ctx.type && isClosing(curKeyword, ctx.type)) {
              ctx = popContext(state);
              while (ctx && ctx.type == "statement")
                ctx = popContext(state);
            } else if (curPunc == "{") {
              pushContext(state, stream.column(), "}");
            } else if (curPunc == "[") {
              pushContext(state, stream.column(), "]");
            } else if (curPunc == "(") {
              pushContext(state, stream.column(), ")");
            } else if (ctx && ctx.type == "endcase" && curPunc == ":") {
              pushContext(state, stream.column(), "statement");
            } else if (curPunc == "newstatement") {
              pushContext(state, stream.column(), "statement");
            } else if (curPunc == "newblock") {
              if (curKeyword == "function" && ctx && (ctx.type == "statement" || ctx.type == "endgroup")) {
              } else if (curKeyword == "task" && ctx && ctx.type == "statement") {
              } else {
                var close = openClose[curKeyword];
                pushContext(state, stream.column(), close);
              }
            }
            state.startOfLine = false;
            return style;
          },
          indent: function(state, textAfter) {
            if (state.tokenize != tokenBase && state.tokenize != null)
              return CodeMirror2.Pass;
            if (hooks.indent) {
              var fromHook = hooks.indent(state);
              if (fromHook >= 0)
                return fromHook;
            }
            var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
            if (ctx.type == "statement" && firstChar == "}")
              ctx = ctx.prev;
            var closing = false;
            var possibleClosing = textAfter.match(closingBracketOrWord);
            if (possibleClosing)
              closing = isClosing(possibleClosing[0], ctx.type);
            if (ctx.type == "statement")
              return ctx.indented + (firstChar == "{" ? 0 : statementIndentUnit);
            else if (closingBracket.test(ctx.type) && ctx.align && !dontAlignCalls)
              return ctx.column + (closing ? 0 : 1);
            else if (ctx.type == ")" && !closing)
              return ctx.indented + statementIndentUnit;
            else
              return ctx.indented + (closing ? 0 : indentUnit);
          },
          blockCommentStart: "/*",
          blockCommentEnd: "*/",
          lineComment: "//",
          fold: "indent"
        };
      });
      CodeMirror2.defineMIME("text/x-verilog", {
        name: "verilog"
      });
      CodeMirror2.defineMIME("text/x-systemverilog", {
        name: "verilog"
      });
      var tlvIdentifierStyle = {
        "|": "link",
        ">": "property",
        // Should condition this off for > TLV 1c.
        "$": "variable",
        "$$": "variable",
        "?$": "qualifier",
        "?*": "qualifier",
        "-": "hr",
        "/": "property",
        "/-": "property",
        "@": "variable-3",
        "@-": "variable-3",
        "@++": "variable-3",
        "@+=": "variable-3",
        "@+=-": "variable-3",
        "@--": "variable-3",
        "@-=": "variable-3",
        "%+": "tag",
        "%-": "tag",
        "%": "tag",
        ">>": "tag",
        "<<": "tag",
        "<>": "tag",
        "#": "tag",
        // Need to choose a style for this.
        "^": "attribute",
        "^^": "attribute",
        "^!": "attribute",
        "*": "variable-2",
        "**": "variable-2",
        "\\": "keyword",
        '"': "comment"
      };
      var tlvScopePrefixChars = {
        "/": "beh-hier",
        ">": "beh-hier",
        "-": "phys-hier",
        "|": "pipe",
        "?": "when",
        "@": "stage",
        "\\": "keyword"
      };
      var tlvIndentUnit = 3;
      var tlvTrackStatements = false;
      var tlvIdentMatch = /^([~!@#\$%\^&\*-\+=\?\/\\\|'"<>]+)([\d\w_]*)/;
      var tlvFirstLevelIndentMatch = /^[! ]  /;
      var tlvLineIndentationMatch = /^[! ] */;
      var tlvCommentMatch = /^\/[\/\*]/;
      function tlvScopeStyle(state, indentation, type) {
        var depth = indentation / tlvIndentUnit;
        return "tlv-" + state.tlvIndentationStyle[depth] + "-" + type;
      }
      function tlvIdentNext(stream) {
        var match;
        return (match = stream.match(tlvIdentMatch, false)) && match[2].length > 0;
      }
      CodeMirror2.defineMIME("text/x-tlv", {
        name: "verilog",
        hooks: {
          electricInput: false,
          // Return undefined for verilog tokenizing, or style for TLV token (null not used).
          // Standard CM styles are used for most formatting, but some TL-Verilog-specific highlighting
          // can be enabled with the definition of cm-tlv-* styles, including highlighting for:
          //   - M4 tokens
          //   - TLV scope indentation
          //   - Statement delimitation (enabled by tlvTrackStatements)
          token: function(stream, state) {
            var style = void 0;
            var match;
            if (stream.sol() && !state.tlvInBlockComment) {
              if (stream.peek() == "\\") {
                style = "def";
                stream.skipToEnd();
                if (stream.string.match(/\\SV/)) {
                  state.tlvCodeActive = false;
                } else if (stream.string.match(/\\TLV/)) {
                  state.tlvCodeActive = true;
                }
              }
              if (state.tlvCodeActive && stream.pos == 0 && state.indented == 0 && (match = stream.match(tlvLineIndentationMatch, false))) {
                state.indented = match[0].length;
              }
              var indented = state.indented;
              var depth = indented / tlvIndentUnit;
              if (depth <= state.tlvIndentationStyle.length) {
                var blankline = stream.string.length == indented;
                var chPos = depth * tlvIndentUnit;
                if (chPos < stream.string.length) {
                  var bodyString = stream.string.slice(chPos);
                  var ch = bodyString[0];
                  if (tlvScopePrefixChars[ch] && ((match = bodyString.match(tlvIdentMatch)) && tlvIdentifierStyle[match[1]])) {
                    indented += tlvIndentUnit;
                    if (!(ch == "\\" && chPos > 0)) {
                      state.tlvIndentationStyle[depth] = tlvScopePrefixChars[ch];
                      if (tlvTrackStatements) {
                        state.statementComment = false;
                      }
                      depth++;
                    }
                  }
                }
                if (!blankline) {
                  while (state.tlvIndentationStyle.length > depth) {
                    state.tlvIndentationStyle.pop();
                  }
                }
              }
              state.tlvNextIndent = indented;
            }
            if (state.tlvCodeActive) {
              var beginStatement = false;
              if (tlvTrackStatements) {
                beginStatement = stream.peek() != " " && // not a space
                style === void 0 && // not a region identifier
                !state.tlvInBlockComment && // not in block comment
                //!stream.match(tlvCommentMatch, false) && // not comment start
                stream.column() == state.tlvIndentationStyle.length * tlvIndentUnit;
                if (beginStatement) {
                  if (state.statementComment) {
                    beginStatement = false;
                  }
                  state.statementComment = stream.match(tlvCommentMatch, false);
                }
              }
              var match;
              if (style !== void 0) {
                style += " " + tlvScopeStyle(state, 0, "scope-ident");
              } else if (stream.pos / tlvIndentUnit < state.tlvIndentationStyle.length && (match = stream.match(stream.sol() ? tlvFirstLevelIndentMatch : /^   /))) {
                style = // make this style distinct from the previous one to prevent
                // codemirror from combining spans
                "tlv-indent-" + (stream.pos % 2 == 0 ? "even" : "odd") + // and style it
                " " + tlvScopeStyle(state, stream.pos - tlvIndentUnit, "indent");
                if (match[0].charAt(0) == "!") {
                  style += " tlv-alert-line-prefix";
                }
                if (tlvIdentNext(stream)) {
                  style += " " + tlvScopeStyle(state, stream.pos, "before-scope-ident");
                }
              } else if (state.tlvInBlockComment) {
                if (stream.match(/^.*?\*\//)) {
                  state.tlvInBlockComment = false;
                  if (tlvTrackStatements && !stream.eol()) {
                    state.statementComment = false;
                  }
                } else {
                  stream.skipToEnd();
                }
                style = "comment";
              } else if ((match = stream.match(tlvCommentMatch)) && !state.tlvInBlockComment) {
                if (match[0] == "//") {
                  stream.skipToEnd();
                } else {
                  state.tlvInBlockComment = true;
                }
                style = "comment";
              } else if (match = stream.match(tlvIdentMatch)) {
                var prefix = match[1];
                var mnemonic = match[2];
                if (
                  // is identifier prefix
                  tlvIdentifierStyle.hasOwnProperty(prefix) && // has mnemonic or we're at the end of the line (maybe it hasn't been typed yet)
                  (mnemonic.length > 0 || stream.eol())
                ) {
                  style = tlvIdentifierStyle[prefix];
                  if (stream.column() == state.indented) {
                    style += " " + tlvScopeStyle(state, stream.column(), "scope-ident");
                  }
                } else {
                  stream.backUp(stream.current().length - 1);
                  style = "tlv-default";
                }
              } else if (stream.match(/^\t+/)) {
                style = "tlv-tab";
              } else if (stream.match(/^[\[\]{}\(\);\:]+/)) {
                style = "meta";
              } else if (match = stream.match(/^[mM]4([\+_])?[\w\d_]*/)) {
                style = match[1] == "+" ? "tlv-m4-plus" : "tlv-m4";
              } else if (stream.match(/^ +/)) {
                if (stream.eol()) {
                  style = "error";
                } else {
                  style = "tlv-default";
                }
              } else if (stream.match(/^[\w\d_]+/)) {
                style = "number";
              } else {
                stream.next();
                style = "tlv-default";
              }
              if (beginStatement) {
                style += " tlv-statement";
              }
            } else {
              if (stream.match(/^[mM]4([\w\d_]*)/)) {
                style = "tlv-m4";
              }
            }
            return style;
          },
          indent: function(state) {
            return state.tlvCodeActive == true ? state.tlvNextIndent : -1;
          },
          startState: function(state) {
            state.tlvIndentationStyle = [];
            state.tlvCodeActive = true;
            state.tlvNextIndent = -1;
            state.tlvInBlockComment = false;
            if (tlvTrackStatements) {
              state.statementComment = false;
            }
          }
        }
      });
    });
  }
});

// mode/vhdl/vhdl.js
var require_vhdl = __commonJS({
  "mode/vhdl/vhdl.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      function words(str) {
        var obj = {}, words2 = str.split(",");
        for (var i = 0; i < words2.length; ++i) {
          var allCaps = words2[i].toUpperCase();
          var firstCap = words2[i].charAt(0).toUpperCase() + words2[i].slice(1);
          obj[words2[i]] = true;
          obj[allCaps] = true;
          obj[firstCap] = true;
        }
        return obj;
      }
      function metaHook(stream) {
        stream.eatWhile(/[\w\$_]/);
        return "meta";
      }
      CodeMirror2.defineMode("vhdl", function(config, parserConfig) {
        var indentUnit = config.indentUnit, atoms = parserConfig.atoms || words("null"), hooks = parserConfig.hooks || { "`": metaHook, "$": metaHook }, multiLineStrings = parserConfig.multiLineStrings;
        var keywords = words("abs,access,after,alias,all,and,architecture,array,assert,attribute,begin,block,body,buffer,bus,case,component,configuration,constant,disconnect,downto,else,elsif,end,end block,end case,end component,end for,end generate,end if,end loop,end process,end record,end units,entity,exit,file,for,function,generate,generic,generic map,group,guarded,if,impure,in,inertial,inout,is,label,library,linkage,literal,loop,map,mod,nand,new,next,nor,null,of,on,open,or,others,out,package,package body,port,port map,postponed,procedure,process,pure,range,record,register,reject,rem,report,return,rol,ror,select,severity,signal,sla,sll,sra,srl,subtype,then,to,transport,type,unaffected,units,until,use,variable,wait,when,while,with,xnor,xor");
        var blockKeywords = words("architecture,entity,begin,case,port,else,elsif,end,for,function,if");
        var isOperatorChar = /[&|~><!\)\(*#%@+\/=?\:;}{,\.\^\-\[\]]/;
        var curPunc;
        function tokenBase(stream, state) {
          var ch = stream.next();
          if (hooks[ch]) {
            var result = hooks[ch](stream, state);
            if (result !== false)
              return result;
          }
          if (ch == '"') {
            state.tokenize = tokenString2(ch);
            return state.tokenize(stream, state);
          }
          if (ch == "'") {
            state.tokenize = tokenString(ch);
            return state.tokenize(stream, state);
          }
          if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
            curPunc = ch;
            return null;
          }
          if (/[\d']/.test(ch)) {
            stream.eatWhile(/[\w\.']/);
            return "number";
          }
          if (ch == "-") {
            if (stream.eat("-")) {
              stream.skipToEnd();
              return "comment";
            }
          }
          if (isOperatorChar.test(ch)) {
            stream.eatWhile(isOperatorChar);
            return "operator";
          }
          stream.eatWhile(/[\w\$_]/);
          var cur = stream.current();
          if (keywords.propertyIsEnumerable(cur.toLowerCase())) {
            if (blockKeywords.propertyIsEnumerable(cur))
              curPunc = "newstatement";
            return "keyword";
          }
          if (atoms.propertyIsEnumerable(cur))
            return "atom";
          return "variable";
        }
        function tokenString(quote) {
          return function(stream, state) {
            var escaped = false, next, end = false;
            while ((next = stream.next()) != null) {
              if (next == quote && !escaped) {
                end = true;
                break;
              }
              escaped = !escaped && next == "--";
            }
            if (end || !(escaped || multiLineStrings))
              state.tokenize = tokenBase;
            return "string";
          };
        }
        function tokenString2(quote) {
          return function(stream, state) {
            var escaped = false, next, end = false;
            while ((next = stream.next()) != null) {
              if (next == quote && !escaped) {
                end = true;
                break;
              }
              escaped = !escaped && next == "--";
            }
            if (end || !(escaped || multiLineStrings))
              state.tokenize = tokenBase;
            return "string-2";
          };
        }
        function Context(indented, column, type, align, prev) {
          this.indented = indented;
          this.column = column;
          this.type = type;
          this.align = align;
          this.prev = prev;
        }
        function pushContext(state, col, type) {
          return state.context = new Context(state.indented, col, type, null, state.context);
        }
        function popContext(state) {
          var t = state.context.type;
          if (t == ")" || t == "]" || t == "}")
            state.indented = state.context.indented;
          return state.context = state.context.prev;
        }
        return {
          startState: function(basecolumn) {
            return {
              tokenize: null,
              context: new Context((basecolumn || 0) - indentUnit, 0, "top", false),
              indented: 0,
              startOfLine: true
            };
          },
          token: function(stream, state) {
            var ctx = state.context;
            if (stream.sol()) {
              if (ctx.align == null)
                ctx.align = false;
              state.indented = stream.indentation();
              state.startOfLine = true;
            }
            if (stream.eatSpace())
              return null;
            curPunc = null;
            var style = (state.tokenize || tokenBase)(stream, state);
            if (style == "comment" || style == "meta")
              return style;
            if (ctx.align == null)
              ctx.align = true;
            if ((curPunc == ";" || curPunc == ":") && ctx.type == "statement")
              popContext(state);
            else if (curPunc == "{")
              pushContext(state, stream.column(), "}");
            else if (curPunc == "[")
              pushContext(state, stream.column(), "]");
            else if (curPunc == "(")
              pushContext(state, stream.column(), ")");
            else if (curPunc == "}") {
              while (ctx.type == "statement")
                ctx = popContext(state);
              if (ctx.type == "}")
                ctx = popContext(state);
              while (ctx.type == "statement")
                ctx = popContext(state);
            } else if (curPunc == ctx.type)
              popContext(state);
            else if (ctx.type == "}" || ctx.type == "top" || ctx.type == "statement" && curPunc == "newstatement")
              pushContext(state, stream.column(), "statement");
            state.startOfLine = false;
            return style;
          },
          indent: function(state, textAfter) {
            if (state.tokenize != tokenBase && state.tokenize != null)
              return 0;
            var firstChar = textAfter && textAfter.charAt(0), ctx = state.context, closing = firstChar == ctx.type;
            if (ctx.type == "statement")
              return ctx.indented + (firstChar == "{" ? 0 : indentUnit);
            else if (ctx.align)
              return ctx.column + (closing ? 0 : 1);
            else
              return ctx.indented + (closing ? 0 : indentUnit);
          },
          electricChars: "{}"
        };
      });
      CodeMirror2.defineMIME("text/x-vhdl", "vhdl");
    });
  }
});

// mode/vue/vue.js
var require_vue = __commonJS({
  "mode/vue/vue.js"(exports, module2) {
    "use strict";
    (function(mod) {
      "use strict";
      if (typeof exports === "object" && typeof module2 === "object") {
        mod(
          require_codemirror(),
          require_overlay(),
          require_xml(),
          require_javascript(),
          require_coffeescript(),
          require_css(),
          require_sass(),
          require_stylus(),
          require_pug(),
          require_handlebars()
        );
      } else if (typeof define === "function" && define.amd) {
        define([
          "../../lib/codemirror",
          "../../addon/mode/overlay",
          "../xml/xml",
          "../javascript/javascript",
          "../coffeescript/coffeescript",
          "../css/css",
          "../sass/sass",
          "../stylus/stylus",
          "../pug/pug",
          "../handlebars/handlebars"
        ], mod);
      } else {
        mod(CodeMirror);
      }
    })(function(CodeMirror2) {
      var tagLanguages = {
        script: [
          ["lang", /coffee(script)?/, "coffeescript"],
          ["type", /^(?:text|application)\/(?:x-)?coffee(?:script)?$/, "coffeescript"],
          ["lang", /^babel$/, "javascript"],
          ["type", /^text\/babel$/, "javascript"],
          ["type", /^text\/ecmascript-\d+$/, "javascript"]
        ],
        style: [
          ["lang", /^stylus$/i, "stylus"],
          ["lang", /^sass$/i, "sass"],
          ["lang", /^less$/i, "text/x-less"],
          ["lang", /^scss$/i, "text/x-scss"],
          ["type", /^(text\/)?(x-)?styl(us)?$/i, "stylus"],
          ["type", /^text\/sass/i, "sass"],
          ["type", /^(text\/)?(x-)?scss$/i, "text/x-scss"],
          ["type", /^(text\/)?(x-)?less$/i, "text/x-less"]
        ],
        template: [
          ["lang", /^vue-template$/i, "vue"],
          ["lang", /^pug$/i, "pug"],
          ["lang", /^handlebars$/i, "handlebars"],
          ["type", /^(text\/)?(x-)?pug$/i, "pug"],
          ["type", /^text\/x-handlebars-template$/i, "handlebars"],
          [null, null, "vue-template"]
        ]
      };
      CodeMirror2.defineMode("vue-template", function(config, parserConfig) {
        var mustacheOverlay = {
          token: function(stream) {
            if (stream.match(/^\{\{.*?\}\}/))
              return "meta mustache";
            while (stream.next() && !stream.match("{{", false)) {
            }
            return null;
          }
        };
        return CodeMirror2.overlayMode(CodeMirror2.getMode(config, parserConfig.backdrop || "text/html"), mustacheOverlay);
      });
      CodeMirror2.defineMode("vue", function(config) {
        return CodeMirror2.getMode(config, { name: "htmlmixed", tags: tagLanguages });
      }, "htmlmixed", "xml", "javascript", "coffeescript", "css", "sass", "stylus", "pug", "handlebars");
      CodeMirror2.defineMIME("script/x-vue", "vue");
      CodeMirror2.defineMIME("text/x-vue", "vue");
    });
  }
});

// mode/wast/wast.js
var require_wast = __commonJS({
  "mode/wast/wast.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror(), require_simple());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror", "../../addon/mode/simple"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineSimpleMode("wast", {
        start: [
          { regex: /[+\-]?(?:nan(?::0x[0-9a-fA-F]+)?|infinity|inf|0x[0-9a-fA-F]+\.?[0-9a-fA-F]*p[+\/-]?\d+|\d+(?:\.\d*)?[eE][+\-]?\d*|\d+\.\d*|0x[0-9a-fA-F]+|\d+)/, token: "number" },
          { regex: /mut|nop|block|if|then|else|loop|br_if|br_table|br|call(_indirect)?|drop|end|return(_call(_indirect)?)?|local\.(get|set|tee)|global\.(get|set)|i(32|64)\.(store(8|16)|(load(8|16)_[su]))|i64\.(load32_[su]|store32)|[fi](32|64)\.(const|load|store)|f(32|64)\.(abs|add|ceil|copysign|div|eq|floor|[gl][et]|max|min|mul|nearest|neg?|sqrt|sub|trunc)|i(32|64)\.(a[dn]d|c[lt]z|(div|rem)_[su]|eqz?|[gl][te]_[su]|mul|ne|popcnt|rot[lr]|sh(l|r_[su])|sub|x?or)|i64\.extend_[su]_i32|i32\.wrap_i64|i(32|64)\.trunc_f(32|64)_[su]|f(32|64)\.convert_i(32|64)_[su]|f64\.promote_f32|f32\.demote_f64|f32\.reinterpret_i32|i32\.reinterpret_f32|f64\.reinterpret_i64|i64\.reinterpret_f64|select|unreachable|current_memory|memory(\.((atomic\.(notify|wait(32|64)))|grow|size))?|type|func|param|result|local|global|module|table|start|elem|data|align|offset|import|export|i64\.atomic\.(load32_u|store32|rmw32\.(a[dn]d|sub|x?or|(cmp)?xchg)_u)|i(32|64)\.atomic\.(load((8|16)_u)?|store(8|16)?|rmw(\.(a[dn]d|sub|x?or|(cmp)?xchg)|(8|16)\.(a[dn]d|sub|x?or|(cmp)?xchg)_u))|v128\.(load|store|const|not|andnot|and|or|xor|bitselect)|i(8x16|16x8|32x4|64x2)\.(shl|shr_[su])|i(8x16|16x8)\.(extract_lane_[su]|((add|sub)_saturate_[su])|avgr_u)|(i(8x16|16x8|32x4|64x2)|f(32x4|64x2))\.(splat|replace_lane|neg|add|sub)|i(8x16|16x8|32x4)\.(eq|ne|([lg][te]_[su])|abs|any_true|all_true|bitmask|((min|max)_[su]))|f(32x4|64x2)\.(eq|ne|[lg][te]|abs|sqrt|mul|div|min|max)|[fi](32x4|64x2)\.extract_lane|v8x16\.(shuffle|swizzle)|i16x8\.(load8x8_[su]|narrow_i32x4_[su]|widen_(low|high)_i8x16_[su]|mul)|i32x4\.(load16x4_[su]|widen_(low|high)_i16x8_[su]|mul|trunc_sat_f32x4_[su])|i64x2\.(load32x2_[su]|mul)|(v(8x16|16x8|32x4|64x2)\.load_splat)|i8x16\.narrow_i16x8_[su]|f32x4\.convert_i32x4_[su]/, token: "keyword" },
          { regex: /\b(anyfunc|[fi](32|64))\b/, token: "atom" },
          { regex: /\$([a-zA-Z0-9_`\+\-\*\/\\\^~=<>!\?@#$%&|:\.]+)/, token: "variable-2" },
          { regex: /"(?:[^"\\\x00-\x1f\x7f]|\\[nt\\'"]|\\[0-9a-fA-F][0-9a-fA-F])*"/, token: "string" },
          { regex: /\(;.*?/, token: "comment", next: "comment" },
          { regex: /;;.*$/, token: "comment" },
          { regex: /\(/, indent: true },
          { regex: /\)/, dedent: true }
        ],
        comment: [
          { regex: /.*?;\)/, token: "comment", next: "start" },
          { regex: /.*/, token: "comment" }
        ],
        meta: {
          dontIndentStates: ["comment"]
        }
      });
      CodeMirror2.defineMIME("text/webassembly", "wast");
    });
  }
});

// mode/webidl/webidl.js
var require_webidl = __commonJS({
  "mode/webidl/webidl.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      function wordRegexp(words) {
        return new RegExp("^((" + words.join(")|(") + "))\\b");
      }
      ;
      var builtinArray = [
        "Clamp",
        "Constructor",
        "EnforceRange",
        "Exposed",
        "ImplicitThis",
        "Global",
        "PrimaryGlobal",
        "LegacyArrayClass",
        "LegacyUnenumerableNamedProperties",
        "LenientThis",
        "NamedConstructor",
        "NewObject",
        "NoInterfaceObject",
        "OverrideBuiltins",
        "PutForwards",
        "Replaceable",
        "SameObject",
        "TreatNonObjectAsNull",
        "TreatNullAs",
        "EmptyString",
        "Unforgeable",
        "Unscopeable"
      ];
      var builtins = wordRegexp(builtinArray);
      var typeArray = [
        "unsigned",
        "short",
        "long",
        // UnsignedIntegerType
        "unrestricted",
        "float",
        "double",
        // UnrestrictedFloatType
        "boolean",
        "byte",
        "octet",
        // Rest of PrimitiveType
        "Promise",
        // PromiseType
        "ArrayBuffer",
        "DataView",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Uint8Array",
        "Uint16Array",
        "Uint32Array",
        "Uint8ClampedArray",
        "Float32Array",
        "Float64Array",
        // BufferRelatedType
        "ByteString",
        "DOMString",
        "USVString",
        "sequence",
        "object",
        "RegExp",
        "Error",
        "DOMException",
        "FrozenArray",
        // Rest of NonAnyType
        "any",
        // Rest of SingleType
        "void"
        // Rest of ReturnType
      ];
      var types = wordRegexp(typeArray);
      var keywordArray = [
        "attribute",
        "callback",
        "const",
        "deleter",
        "dictionary",
        "enum",
        "getter",
        "implements",
        "inherit",
        "interface",
        "iterable",
        "legacycaller",
        "maplike",
        "partial",
        "required",
        "serializer",
        "setlike",
        "setter",
        "static",
        "stringifier",
        "typedef",
        // ArgumentNameKeyword except
        // "unrestricted"
        "optional",
        "readonly",
        "or"
      ];
      var keywords = wordRegexp(keywordArray);
      var atomArray = [
        "true",
        "false",
        // BooleanLiteral
        "Infinity",
        "NaN",
        // FloatLiteral
        "null"
        // Rest of ConstValue
      ];
      var atoms = wordRegexp(atomArray);
      CodeMirror2.registerHelper(
        "hintWords",
        "webidl",
        builtinArray.concat(typeArray).concat(keywordArray).concat(atomArray)
      );
      var startDefArray = ["callback", "dictionary", "enum", "interface"];
      var startDefs = wordRegexp(startDefArray);
      var endDefArray = ["typedef"];
      var endDefs = wordRegexp(endDefArray);
      var singleOperators = /^[:<=>?]/;
      var integers = /^-?([1-9][0-9]*|0[Xx][0-9A-Fa-f]+|0[0-7]*)/;
      var floats = /^-?(([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)/;
      var identifiers = /^_?[A-Za-z][0-9A-Z_a-z-]*/;
      var identifiersEnd = /^_?[A-Za-z][0-9A-Z_a-z-]*(?=\s*;)/;
      var strings = /^"[^"]*"/;
      var multilineComments = /^\/\*.*?\*\//;
      var multilineCommentsStart = /^\/\*.*/;
      var multilineCommentsEnd = /^.*?\*\//;
      function readToken(stream, state) {
        if (stream.eatSpace())
          return null;
        if (state.inComment) {
          if (stream.match(multilineCommentsEnd)) {
            state.inComment = false;
            return "comment";
          }
          stream.skipToEnd();
          return "comment";
        }
        if (stream.match("//")) {
          stream.skipToEnd();
          return "comment";
        }
        if (stream.match(multilineComments))
          return "comment";
        if (stream.match(multilineCommentsStart)) {
          state.inComment = true;
          return "comment";
        }
        if (stream.match(/^-?[0-9\.]/, false)) {
          if (stream.match(integers) || stream.match(floats))
            return "number";
        }
        if (stream.match(strings))
          return "string";
        if (state.startDef && stream.match(identifiers))
          return "def";
        if (state.endDef && stream.match(identifiersEnd)) {
          state.endDef = false;
          return "def";
        }
        if (stream.match(keywords))
          return "keyword";
        if (stream.match(types)) {
          var lastToken = state.lastToken;
          var nextToken = (stream.match(/^\s*(.+?)\b/, false) || [])[1];
          if (lastToken === ":" || lastToken === "implements" || nextToken === "implements" || nextToken === "=") {
            return "builtin";
          } else {
            return "variable-3";
          }
        }
        if (stream.match(builtins))
          return "builtin";
        if (stream.match(atoms))
          return "atom";
        if (stream.match(identifiers))
          return "variable";
        if (stream.match(singleOperators))
          return "operator";
        stream.next();
        return null;
      }
      ;
      CodeMirror2.defineMode("webidl", function() {
        return {
          startState: function() {
            return {
              // Is in multiline comment
              inComment: false,
              // Last non-whitespace, matched token
              lastToken: "",
              // Next token is a definition
              startDef: false,
              // Last token of the statement is a definition
              endDef: false
            };
          },
          token: function(stream, state) {
            var style = readToken(stream, state);
            if (style) {
              var cur = stream.current();
              state.lastToken = cur;
              if (style === "keyword") {
                state.startDef = startDefs.test(cur);
                state.endDef = state.endDef || endDefs.test(cur);
              } else {
                state.startDef = false;
              }
            }
            return style;
          }
        };
      });
      CodeMirror2.defineMIME("text/x-webidl", "webidl");
    });
  }
});

// mode/xquery/xquery.js
var require_xquery = __commonJS({
  "mode/xquery/xquery.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("xquery", function() {
        var keywords = function() {
          function kw(type) {
            return { type, style: "keyword" };
          }
          var operator = kw("operator"), atom = { type: "atom", style: "atom" }, punctuation = { type: "punctuation", style: null }, qualifier = { type: "axis_specifier", style: "qualifier" };
          var kwObj = {
            ",": punctuation
          };
          var basic = [
            "after",
            "all",
            "allowing",
            "ancestor",
            "ancestor-or-self",
            "any",
            "array",
            "as",
            "ascending",
            "at",
            "attribute",
            "base-uri",
            "before",
            "boundary-space",
            "by",
            "case",
            "cast",
            "castable",
            "catch",
            "child",
            "collation",
            "comment",
            "construction",
            "contains",
            "content",
            "context",
            "copy",
            "copy-namespaces",
            "count",
            "decimal-format",
            "declare",
            "default",
            "delete",
            "descendant",
            "descendant-or-self",
            "descending",
            "diacritics",
            "different",
            "distance",
            "document",
            "document-node",
            "element",
            "else",
            "empty",
            "empty-sequence",
            "encoding",
            "end",
            "entire",
            "every",
            "exactly",
            "except",
            "external",
            "first",
            "following",
            "following-sibling",
            "for",
            "from",
            "ftand",
            "ftnot",
            "ft-option",
            "ftor",
            "function",
            "fuzzy",
            "greatest",
            "group",
            "if",
            "import",
            "in",
            "inherit",
            "insensitive",
            "insert",
            "instance",
            "intersect",
            "into",
            "invoke",
            "is",
            "item",
            "language",
            "last",
            "lax",
            "least",
            "let",
            "levels",
            "lowercase",
            "map",
            "modify",
            "module",
            "most",
            "namespace",
            "next",
            "no",
            "node",
            "nodes",
            "no-inherit",
            "no-preserve",
            "not",
            "occurs",
            "of",
            "only",
            "option",
            "order",
            "ordered",
            "ordering",
            "paragraph",
            "paragraphs",
            "parent",
            "phrase",
            "preceding",
            "preceding-sibling",
            "preserve",
            "previous",
            "processing-instruction",
            "relationship",
            "rename",
            "replace",
            "return",
            "revalidation",
            "same",
            "satisfies",
            "schema",
            "schema-attribute",
            "schema-element",
            "score",
            "self",
            "sensitive",
            "sentence",
            "sentences",
            "sequence",
            "skip",
            "sliding",
            "some",
            "stable",
            "start",
            "stemming",
            "stop",
            "strict",
            "strip",
            "switch",
            "text",
            "then",
            "thesaurus",
            "times",
            "to",
            "transform",
            "treat",
            "try",
            "tumbling",
            "type",
            "typeswitch",
            "union",
            "unordered",
            "update",
            "updating",
            "uppercase",
            "using",
            "validate",
            "value",
            "variable",
            "version",
            "weight",
            "when",
            "where",
            "wildcards",
            "window",
            "with",
            "without",
            "word",
            "words",
            "xquery"
          ];
          for (var i = 0, l = basic.length; i < l; i++) {
            kwObj[basic[i]] = kw(basic[i]);
          }
          ;
          var types = [
            "xs:anyAtomicType",
            "xs:anySimpleType",
            "xs:anyType",
            "xs:anyURI",
            "xs:base64Binary",
            "xs:boolean",
            "xs:byte",
            "xs:date",
            "xs:dateTime",
            "xs:dateTimeStamp",
            "xs:dayTimeDuration",
            "xs:decimal",
            "xs:double",
            "xs:duration",
            "xs:ENTITIES",
            "xs:ENTITY",
            "xs:float",
            "xs:gDay",
            "xs:gMonth",
            "xs:gMonthDay",
            "xs:gYear",
            "xs:gYearMonth",
            "xs:hexBinary",
            "xs:ID",
            "xs:IDREF",
            "xs:IDREFS",
            "xs:int",
            "xs:integer",
            "xs:item",
            "xs:java",
            "xs:language",
            "xs:long",
            "xs:Name",
            "xs:NCName",
            "xs:negativeInteger",
            "xs:NMTOKEN",
            "xs:NMTOKENS",
            "xs:nonNegativeInteger",
            "xs:nonPositiveInteger",
            "xs:normalizedString",
            "xs:NOTATION",
            "xs:numeric",
            "xs:positiveInteger",
            "xs:precisionDecimal",
            "xs:QName",
            "xs:short",
            "xs:string",
            "xs:time",
            "xs:token",
            "xs:unsignedByte",
            "xs:unsignedInt",
            "xs:unsignedLong",
            "xs:unsignedShort",
            "xs:untyped",
            "xs:untypedAtomic",
            "xs:yearMonthDuration"
          ];
          for (var i = 0, l = types.length; i < l; i++) {
            kwObj[types[i]] = atom;
          }
          ;
          var operators = ["eq", "ne", "lt", "le", "gt", "ge", ":=", "=", ">", ">=", "<", "<=", ".", "|", "?", "and", "or", "div", "idiv", "mod", "*", "/", "+", "-"];
          for (var i = 0, l = operators.length; i < l; i++) {
            kwObj[operators[i]] = operator;
          }
          ;
          var axis_specifiers = [
            "self::",
            "attribute::",
            "child::",
            "descendant::",
            "descendant-or-self::",
            "parent::",
            "ancestor::",
            "ancestor-or-self::",
            "following::",
            "preceding::",
            "following-sibling::",
            "preceding-sibling::"
          ];
          for (var i = 0, l = axis_specifiers.length; i < l; i++) {
            kwObj[axis_specifiers[i]] = qualifier;
          }
          ;
          return kwObj;
        }();
        function chain(stream, state, f) {
          state.tokenize = f;
          return f(stream, state);
        }
        function tokenBase(stream, state) {
          var ch = stream.next(), mightBeFunction = false, isEQName = isEQNameAhead(stream);
          if (ch == "<") {
            if (stream.match("!--", true))
              return chain(stream, state, tokenXMLComment);
            if (stream.match("![CDATA", false)) {
              state.tokenize = tokenCDATA;
              return "tag";
            }
            if (stream.match("?", false)) {
              return chain(stream, state, tokenPreProcessing);
            }
            var isclose = stream.eat("/");
            stream.eatSpace();
            var tagName = "", c;
            while (c = stream.eat(/[^\s\u00a0=<>\"\'\/?]/))
              tagName += c;
            return chain(stream, state, tokenTag(tagName, isclose));
          } else if (ch == "{") {
            pushStateStack(state, { type: "codeblock" });
            return null;
          } else if (ch == "}") {
            popStateStack(state);
            return null;
          } else if (isInXmlBlock(state)) {
            if (ch == ">")
              return "tag";
            else if (ch == "/" && stream.eat(">")) {
              popStateStack(state);
              return "tag";
            } else
              return "variable";
          } else if (/\d/.test(ch)) {
            stream.match(/^\d*(?:\.\d*)?(?:E[+\-]?\d+)?/);
            return "atom";
          } else if (ch === "(" && stream.eat(":")) {
            pushStateStack(state, { type: "comment" });
            return chain(stream, state, tokenComment);
          } else if (!isEQName && (ch === '"' || ch === "'"))
            return chain(stream, state, tokenString(ch));
          else if (ch === "$") {
            return chain(stream, state, tokenVariable);
          } else if (ch === ":" && stream.eat("=")) {
            return "keyword";
          } else if (ch === "(") {
            pushStateStack(state, { type: "paren" });
            return null;
          } else if (ch === ")") {
            popStateStack(state);
            return null;
          } else if (ch === "[") {
            pushStateStack(state, { type: "bracket" });
            return null;
          } else if (ch === "]") {
            popStateStack(state);
            return null;
          } else {
            var known = keywords.propertyIsEnumerable(ch) && keywords[ch];
            if (isEQName && ch === '"')
              while (stream.next() !== '"') {
              }
            if (isEQName && ch === "'")
              while (stream.next() !== "'") {
              }
            if (!known)
              stream.eatWhile(/[\w\$_-]/);
            var foundColon = stream.eat(":");
            if (!stream.eat(":") && foundColon) {
              stream.eatWhile(/[\w\$_-]/);
            }
            if (stream.match(/^[ \t]*\(/, false)) {
              mightBeFunction = true;
            }
            var word = stream.current();
            known = keywords.propertyIsEnumerable(word) && keywords[word];
            if (mightBeFunction && !known)
              known = { type: "function_call", style: "variable def" };
            if (isInXmlConstructor(state)) {
              popStateStack(state);
              return "variable";
            }
            if (word == "element" || word == "attribute" || known.type == "axis_specifier")
              pushStateStack(state, { type: "xmlconstructor" });
            return known ? known.style : "variable";
          }
        }
        function tokenComment(stream, state) {
          var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;
          while (ch = stream.next()) {
            if (ch == ")" && maybeEnd) {
              if (nestedCount > 0)
                nestedCount--;
              else {
                popStateStack(state);
                break;
              }
            } else if (ch == ":" && maybeNested) {
              nestedCount++;
            }
            maybeEnd = ch == ":";
            maybeNested = ch == "(";
          }
          return "comment";
        }
        function tokenString(quote, f) {
          return function(stream, state) {
            var ch;
            if (isInString(state) && stream.current() == quote) {
              popStateStack(state);
              if (f)
                state.tokenize = f;
              return "string";
            }
            pushStateStack(state, { type: "string", name: quote, tokenize: tokenString(quote, f) });
            if (stream.match("{", false) && isInXmlAttributeBlock(state)) {
              state.tokenize = tokenBase;
              return "string";
            }
            while (ch = stream.next()) {
              if (ch == quote) {
                popStateStack(state);
                if (f)
                  state.tokenize = f;
                break;
              } else {
                if (stream.match("{", false) && isInXmlAttributeBlock(state)) {
                  state.tokenize = tokenBase;
                  return "string";
                }
              }
            }
            return "string";
          };
        }
        function tokenVariable(stream, state) {
          var isVariableChar = /[\w\$_-]/;
          if (stream.eat('"')) {
            while (stream.next() !== '"') {
            }
            ;
            stream.eat(":");
          } else {
            stream.eatWhile(isVariableChar);
            if (!stream.match(":=", false))
              stream.eat(":");
          }
          stream.eatWhile(isVariableChar);
          state.tokenize = tokenBase;
          return "variable";
        }
        function tokenTag(name, isclose) {
          return function(stream, state) {
            stream.eatSpace();
            if (isclose && stream.eat(">")) {
              popStateStack(state);
              state.tokenize = tokenBase;
              return "tag";
            }
            if (!stream.eat("/"))
              pushStateStack(state, { type: "tag", name, tokenize: tokenBase });
            if (!stream.eat(">")) {
              state.tokenize = tokenAttribute;
              return "tag";
            } else {
              state.tokenize = tokenBase;
            }
            return "tag";
          };
        }
        function tokenAttribute(stream, state) {
          var ch = stream.next();
          if (ch == "/" && stream.eat(">")) {
            if (isInXmlAttributeBlock(state))
              popStateStack(state);
            if (isInXmlBlock(state))
              popStateStack(state);
            return "tag";
          }
          if (ch == ">") {
            if (isInXmlAttributeBlock(state))
              popStateStack(state);
            return "tag";
          }
          if (ch == "=")
            return null;
          if (ch == '"' || ch == "'")
            return chain(stream, state, tokenString(ch, tokenAttribute));
          if (!isInXmlAttributeBlock(state))
            pushStateStack(state, { type: "attribute", tokenize: tokenAttribute });
          stream.eat(/[a-zA-Z_:]/);
          stream.eatWhile(/[-a-zA-Z0-9_:.]/);
          stream.eatSpace();
          if (stream.match(">", false) || stream.match("/", false)) {
            popStateStack(state);
            state.tokenize = tokenBase;
          }
          return "attribute";
        }
        function tokenXMLComment(stream, state) {
          var ch;
          while (ch = stream.next()) {
            if (ch == "-" && stream.match("->", true)) {
              state.tokenize = tokenBase;
              return "comment";
            }
          }
        }
        function tokenCDATA(stream, state) {
          var ch;
          while (ch = stream.next()) {
            if (ch == "]" && stream.match("]", true)) {
              state.tokenize = tokenBase;
              return "comment";
            }
          }
        }
        function tokenPreProcessing(stream, state) {
          var ch;
          while (ch = stream.next()) {
            if (ch == "?" && stream.match(">", true)) {
              state.tokenize = tokenBase;
              return "comment meta";
            }
          }
        }
        function isInXmlBlock(state) {
          return isIn(state, "tag");
        }
        function isInXmlAttributeBlock(state) {
          return isIn(state, "attribute");
        }
        function isInXmlConstructor(state) {
          return isIn(state, "xmlconstructor");
        }
        function isInString(state) {
          return isIn(state, "string");
        }
        function isEQNameAhead(stream) {
          if (stream.current() === '"')
            return stream.match(/^[^\"]+\"\:/, false);
          else if (stream.current() === "'")
            return stream.match(/^[^\"]+\'\:/, false);
          else
            return false;
        }
        function isIn(state, type) {
          return state.stack.length && state.stack[state.stack.length - 1].type == type;
        }
        function pushStateStack(state, newState) {
          state.stack.push(newState);
        }
        function popStateStack(state) {
          state.stack.pop();
          var reinstateTokenize = state.stack.length && state.stack[state.stack.length - 1].tokenize;
          state.tokenize = reinstateTokenize || tokenBase;
        }
        return {
          startState: function() {
            return {
              tokenize: tokenBase,
              cc: [],
              stack: []
            };
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            var style = state.tokenize(stream, state);
            return style;
          },
          blockCommentStart: "(:",
          blockCommentEnd: ":)"
        };
      });
      CodeMirror2.defineMIME("application/xquery", "xquery");
    });
  }
});

// mode/yacas/yacas.js
var require_yacas = __commonJS({
  "mode/yacas/yacas.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("yacas", function(_config, _parserConfig) {
        function words(str) {
          var obj = {}, words2 = str.split(" ");
          for (var i = 0; i < words2.length; ++i)
            obj[words2[i]] = true;
          return obj;
        }
        var bodiedOps = words("Assert BackQuote D Defun Deriv For ForEach FromFile FromString Function Integrate InverseTaylor Limit LocalSymbols Macro MacroRule MacroRulePattern NIntegrate Rule RulePattern Subst TD TExplicitSum TSum Taylor Taylor1 Taylor2 Taylor3 ToFile ToStdout ToString TraceRule Until While");
        var pFloatForm = "(?:(?:\\.\\d+|\\d+\\.\\d*|\\d+)(?:[eE][+-]?\\d+)?)";
        var pIdentifier = "(?:[a-zA-Z\\$'][a-zA-Z0-9\\$']*)";
        var reFloatForm = new RegExp(pFloatForm);
        var reIdentifier = new RegExp(pIdentifier);
        var rePattern = new RegExp(pIdentifier + "?_" + pIdentifier);
        var reFunctionLike = new RegExp(pIdentifier + "\\s*\\(");
        function tokenBase(stream, state) {
          var ch;
          ch = stream.next();
          if (ch === '"') {
            state.tokenize = tokenString;
            return state.tokenize(stream, state);
          }
          if (ch === "/") {
            if (stream.eat("*")) {
              state.tokenize = tokenComment;
              return state.tokenize(stream, state);
            }
            if (stream.eat("/")) {
              stream.skipToEnd();
              return "comment";
            }
          }
          stream.backUp(1);
          var m = stream.match(/^(\w+)\s*\(/, false);
          if (m !== null && bodiedOps.hasOwnProperty(m[1]))
            state.scopes.push("bodied");
          var scope = currentScope(state);
          if (scope === "bodied" && ch === "[")
            state.scopes.pop();
          if (ch === "[" || ch === "{" || ch === "(")
            state.scopes.push(ch);
          scope = currentScope(state);
          if (scope === "[" && ch === "]" || scope === "{" && ch === "}" || scope === "(" && ch === ")")
            state.scopes.pop();
          if (ch === ";") {
            while (scope === "bodied") {
              state.scopes.pop();
              scope = currentScope(state);
            }
          }
          if (stream.match(/\d+ *#/, true, false)) {
            return "qualifier";
          }
          if (stream.match(reFloatForm, true, false)) {
            return "number";
          }
          if (stream.match(rePattern, true, false)) {
            return "variable-3";
          }
          if (stream.match(/(?:\[|\]|{|}|\(|\))/, true, false)) {
            return "bracket";
          }
          if (stream.match(reFunctionLike, true, false)) {
            stream.backUp(1);
            return "variable";
          }
          if (stream.match(reIdentifier, true, false)) {
            return "variable-2";
          }
          if (stream.match(/(?:\\|\+|\-|\*|\/|,|;|\.|:|@|~|=|>|<|&|\||_|`|'|\^|\?|!|%|#)/, true, false)) {
            return "operator";
          }
          return "error";
        }
        function tokenString(stream, state) {
          var next, end = false, escaped = false;
          while ((next = stream.next()) != null) {
            if (next === '"' && !escaped) {
              end = true;
              break;
            }
            escaped = !escaped && next === "\\";
          }
          if (end && !escaped) {
            state.tokenize = tokenBase;
          }
          return "string";
        }
        ;
        function tokenComment(stream, state) {
          var prev, next;
          while ((next = stream.next()) != null) {
            if (prev === "*" && next === "/") {
              state.tokenize = tokenBase;
              break;
            }
            prev = next;
          }
          return "comment";
        }
        function currentScope(state) {
          var scope = null;
          if (state.scopes.length > 0)
            scope = state.scopes[state.scopes.length - 1];
          return scope;
        }
        return {
          startState: function() {
            return {
              tokenize: tokenBase,
              scopes: []
            };
          },
          token: function(stream, state) {
            if (stream.eatSpace())
              return null;
            return state.tokenize(stream, state);
          },
          indent: function(state, textAfter) {
            if (state.tokenize !== tokenBase && state.tokenize !== null)
              return CodeMirror2.Pass;
            var delta = 0;
            if (textAfter === "]" || textAfter === "];" || textAfter === "}" || textAfter === "};" || textAfter === ");")
              delta = -1;
            return (state.scopes.length + delta) * _config.indentUnit;
          },
          electricChars: "{}[]();",
          blockCommentStart: "/*",
          blockCommentEnd: "*/",
          lineComment: "//"
        };
      });
      CodeMirror2.defineMIME("text/x-yacas", {
        name: "yacas"
      });
    });
  }
});

// mode/yaml/yaml.js
var require_yaml = __commonJS({
  "mode/yaml/yaml.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("yaml", function() {
        var cons = ["true", "false", "on", "off", "yes", "no"];
        var keywordRegex = new RegExp("\\b((" + cons.join(")|(") + "))$", "i");
        return {
          token: function(stream, state) {
            var ch = stream.peek();
            var esc = state.escaped;
            state.escaped = false;
            if (ch == "#" && (stream.pos == 0 || /\s/.test(stream.string.charAt(stream.pos - 1)))) {
              stream.skipToEnd();
              return "comment";
            }
            if (stream.match(/^('([^']|\\.)*'?|"([^"]|\\.)*"?)/))
              return "string";
            if (state.literal && stream.indentation() > state.keyCol) {
              stream.skipToEnd();
              return "string";
            } else if (state.literal) {
              state.literal = false;
            }
            if (stream.sol()) {
              state.keyCol = 0;
              state.pair = false;
              state.pairStart = false;
              if (stream.match(/---/)) {
                return "def";
              }
              if (stream.match(/\.\.\./)) {
                return "def";
              }
              if (stream.match(/\s*-\s+/)) {
                return "meta";
              }
            }
            if (stream.match(/^(\{|\}|\[|\])/)) {
              if (ch == "{")
                state.inlinePairs++;
              else if (ch == "}")
                state.inlinePairs--;
              else if (ch == "[")
                state.inlineList++;
              else
                state.inlineList--;
              return "meta";
            }
            if (state.inlineList > 0 && !esc && ch == ",") {
              stream.next();
              return "meta";
            }
            if (state.inlinePairs > 0 && !esc && ch == ",") {
              state.keyCol = 0;
              state.pair = false;
              state.pairStart = false;
              stream.next();
              return "meta";
            }
            if (state.pairStart) {
              if (stream.match(/^\s*(\||\>)\s*/)) {
                state.literal = true;
                return "meta";
              }
              ;
              if (stream.match(/^\s*(\&|\*)[a-z0-9\._-]+\b/i)) {
                return "variable-2";
              }
              if (state.inlinePairs == 0 && stream.match(/^\s*-?[0-9\.\,]+\s?$/)) {
                return "number";
              }
              if (state.inlinePairs > 0 && stream.match(/^\s*-?[0-9\.\,]+\s?(?=(,|}))/)) {
                return "number";
              }
              if (stream.match(keywordRegex)) {
                return "keyword";
              }
            }
            if (!state.pair && stream.match(/^\s*(?:[,\[\]{}&*!|>'"%@`][^\s'":]|[^,\[\]{}#&*!|>'"%@`])[^#]*?(?=\s*:($|\s))/)) {
              state.pair = true;
              state.keyCol = stream.indentation();
              return "atom";
            }
            if (state.pair && stream.match(/^:\s*/)) {
              state.pairStart = true;
              return "meta";
            }
            state.pairStart = false;
            state.escaped = ch == "\\";
            stream.next();
            return null;
          },
          startState: function() {
            return {
              pair: false,
              pairStart: false,
              keyCol: 0,
              inlinePairs: 0,
              inlineList: 0,
              literal: false,
              escaped: false
            };
          },
          lineComment: "#",
          fold: "indent"
        };
      });
      CodeMirror2.defineMIME("text/x-yaml", "yaml");
      CodeMirror2.defineMIME("text/yaml", "yaml");
    });
  }
});

// mode/yaml-frontmatter/yaml-frontmatter.js
var require_yaml_frontmatter = __commonJS({
  "mode/yaml-frontmatter/yaml-frontmatter.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror(), require_yaml());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror", "../yaml/yaml"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      var START = 0, FRONTMATTER = 1, BODY = 2;
      CodeMirror2.defineMode("yaml-frontmatter", function(config, parserConfig) {
        var yamlMode = CodeMirror2.getMode(config, "yaml");
        var innerMode = CodeMirror2.getMode(config, parserConfig && parserConfig.base || "gfm");
        function curMode(state) {
          return state.state == BODY ? innerMode : yamlMode;
        }
        return {
          startState: function() {
            return {
              state: START,
              inner: CodeMirror2.startState(yamlMode)
            };
          },
          copyState: function(state) {
            return {
              state: state.state,
              inner: CodeMirror2.copyState(curMode(state), state.inner)
            };
          },
          token: function(stream, state) {
            if (state.state == START) {
              if (stream.match(/---/, false)) {
                state.state = FRONTMATTER;
                return yamlMode.token(stream, state.inner);
              } else {
                state.state = BODY;
                state.inner = CodeMirror2.startState(innerMode);
                return innerMode.token(stream, state.inner);
              }
            } else if (state.state == FRONTMATTER) {
              var end = stream.sol() && stream.match(/(---|\.\.\.)/, false);
              var style = yamlMode.token(stream, state.inner);
              if (end) {
                state.state = BODY;
                state.inner = CodeMirror2.startState(innerMode);
              }
              return style;
            } else {
              return innerMode.token(stream, state.inner);
            }
          },
          innerMode: function(state) {
            return { mode: curMode(state), state: state.inner };
          },
          blankLine: function(state) {
            var mode = curMode(state);
            if (mode.blankLine)
              return mode.blankLine(state.inner);
          }
        };
      });
    });
  }
});

// mode/z80/z80.js
var require_z80 = __commonJS({
  "mode/z80/z80.js"(exports, module2) {
    "use strict";
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      CodeMirror2.defineMode("z80", function(_config, parserConfig) {
        var ez80 = parserConfig.ez80;
        var keywords1, keywords2;
        if (ez80) {
          keywords1 = /^(exx?|(ld|cp)([di]r?)?|[lp]ea|pop|push|ad[cd]|cpl|daa|dec|inc|neg|sbc|sub|and|bit|[cs]cf|x?or|res|set|r[lr]c?a?|r[lr]d|s[lr]a|srl|djnz|nop|[de]i|halt|im|in([di]mr?|ir?|irx|2r?)|ot(dmr?|[id]rx|imr?)|out(0?|[di]r?|[di]2r?)|tst(io)?|slp)(\.([sl]?i)?[sl])?\b/i;
          keywords2 = /^(((call|j[pr]|rst|ret[in]?)(\.([sl]?i)?[sl])?)|(rs|st)mix)\b/i;
        } else {
          keywords1 = /^(exx?|(ld|cp|in)([di]r?)?|pop|push|ad[cd]|cpl|daa|dec|inc|neg|sbc|sub|and|bit|[cs]cf|x?or|res|set|r[lr]c?a?|r[lr]d|s[lr]a|srl|djnz|nop|rst|[de]i|halt|im|ot[di]r|out[di]?)\b/i;
          keywords2 = /^(call|j[pr]|ret[in]?|b_?(call|jump))\b/i;
        }
        var variables1 = /^(af?|bc?|c|de?|e|hl?|l|i[xy]?|r|sp)\b/i;
        var variables2 = /^(n?[zc]|p[oe]?|m)\b/i;
        var errors = /^([hl][xy]|i[xy][hl]|slia|sll)\b/i;
        var numbers = /^([\da-f]+h|[0-7]+o|[01]+b|\d+d?)\b/i;
        return {
          startState: function() {
            return {
              context: 0
            };
          },
          token: function(stream, state) {
            if (!stream.column())
              state.context = 0;
            if (stream.eatSpace())
              return null;
            var w;
            if (stream.eatWhile(/\w/)) {
              if (ez80 && stream.eat(".")) {
                stream.eatWhile(/\w/);
              }
              w = stream.current();
              if (stream.indentation()) {
                if ((state.context == 1 || state.context == 4) && variables1.test(w)) {
                  state.context = 4;
                  return "var2";
                }
                if (state.context == 2 && variables2.test(w)) {
                  state.context = 4;
                  return "var3";
                }
                if (keywords1.test(w)) {
                  state.context = 1;
                  return "keyword";
                } else if (keywords2.test(w)) {
                  state.context = 2;
                  return "keyword";
                } else if (state.context == 4 && numbers.test(w)) {
                  return "number";
                }
                if (errors.test(w))
                  return "error";
              } else if (stream.match(numbers)) {
                return "number";
              } else {
                return null;
              }
            } else if (stream.eat(";")) {
              stream.skipToEnd();
              return "comment";
            } else if (stream.eat('"')) {
              while (w = stream.next()) {
                if (w == '"')
                  break;
                if (w == "\\")
                  stream.next();
              }
              return "string";
            } else if (stream.eat("'")) {
              if (stream.match(/\\?.'/))
                return "number";
            } else if (stream.eat(".") || stream.sol() && stream.eat("#")) {
              state.context = 5;
              if (stream.eatWhile(/\w/))
                return "def";
            } else if (stream.eat("$")) {
              if (stream.eatWhile(/[\da-f]/i))
                return "number";
            } else if (stream.eat("%")) {
              if (stream.eatWhile(/[01]/))
                return "number";
            } else {
              stream.next();
            }
            return null;
          }
        };
      });
      CodeMirror2.defineMIME("text/x-z80", "z80");
      CodeMirror2.defineMIME("text/x-ez80", { name: "z80", ez80: true });
    });
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => UnitadePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var fs = __toESM(require("fs"));
var path = __toESM(require("path"));
var import_codemirror = __toESM(require_codemirror());
var import_codemirror2 = __toESM(require_codemirror());

// mode/meta.js
CodeMirror.modeInfo = [
  { name: "APL", mime: "text/apl", mode: "apl", ext: ["dyalog", "apl"] },
  { name: "PGP", mimes: ["application/pgp", "application/pgp-encrypted", "application/pgp-keys", "application/pgp-signature"], mode: "asciiarmor", ext: ["asc", "pgp", "sig"] },
  { name: "ASN.1", mime: "text/x-ttcn-asn", mode: "asn.1", ext: ["asn", "asn1"] },
  { name: "Asterisk", mime: "text/x-asterisk", mode: "asterisk", file: /^extensions\.conf$/i },
  { name: "Brainfuck", mime: "text/x-brainfuck", mode: "brainfuck", ext: ["b", "bf"] },
  { name: "C", mime: "text/x-csrc", mode: "clike", ext: ["c", "h", "ino"] },
  { name: "C++", mime: "text/x-c++src", mode: "clike", ext: ["cpp", "c++", "cc", "cxx", "hpp", "h++", "hh", "hxx"], alias: ["cpp"] },
  { name: "Cobol", mime: "text/x-cobol", mode: "cobol", ext: ["cob", "cpy"] },
  { name: "C#", mime: "text/x-csharp", mode: "clike", ext: ["cs"], alias: ["csharp", "cs"] },
  { name: "Clojure", mime: "text/x-clojure", mode: "clojure", ext: ["clj", "cljc", "cljx"] },
  { name: "ClojureScript", mime: "text/x-clojurescript", mode: "clojure", ext: ["cljs"] },
  { name: "Closure Stylesheets (GSS)", mime: "text/x-gss", mode: "css", ext: ["gss"] },
  { name: "CMake", mime: "text/x-cmake", mode: "cmake", ext: ["cmake", "cmake.in"], file: /^CMakeLists\.txt$/ },
  { name: "CoffeeScript", mimes: ["application/vnd.coffeescript", "text/coffeescript", "text/x-coffeescript"], mode: "coffeescript", ext: ["coffee"], alias: ["coffee", "coffee-script"] },
  { name: "Common Lisp", mime: "text/x-common-lisp", mode: "commonlisp", ext: ["cl", "lisp", "el"], alias: ["lisp"] },
  { name: "Cypher", mime: "application/x-cypher-query", mode: "cypher", ext: ["cyp", "cypher"] },
  { name: "Cython", mime: "text/x-cython", mode: "python", ext: ["pyx", "pxd", "pxi"] },
  { name: "Crystal", mime: "text/x-crystal", mode: "crystal", ext: ["cr"] },
  { name: "CSS", mime: "text/css", mode: "css", ext: ["css"] },
  { name: "CQL", mime: "text/x-cassandra", mode: "sql", ext: ["cql"] },
  { name: "D", mime: "text/x-d", mode: "d", ext: ["d"] },
  { name: "Dart", mimes: ["application/dart", "text/x-dart"], mode: "dart", ext: ["dart"] },
  { name: "diff", mime: "text/x-diff", mode: "diff", ext: ["diff", "patch"] },
  { name: "Django", mime: "text/x-django", mode: "django" },
  { name: "Dockerfile", mime: "text/x-dockerfile", mode: "dockerfile", file: /^Dockerfile$/ },
  { name: "DTD", mime: "application/xml-dtd", mode: "dtd", ext: ["dtd"] },
  { name: "Dylan", mime: "text/x-dylan", mode: "dylan", ext: ["dylan", "dyl", "intr"] },
  { name: "EBNF", mime: "text/x-ebnf", mode: "ebnf" },
  { name: "ECL", mime: "text/x-ecl", mode: "ecl", ext: ["ecl"] },
  { name: "edn", mime: "application/edn", mode: "clojure", ext: ["edn"] },
  { name: "Eiffel", mime: "text/x-eiffel", mode: "eiffel", ext: ["e"] },
  { name: "Elixir", mime: "text/x-elixir", mode: "elixir", ext: ["ex", "exs"] },
  { name: "Elm", mime: "text/x-elm", mode: "elm", ext: ["elm"] },
  { name: "Embedded Javascript", mime: "application/x-ejs", mode: "htmlembedded", ext: ["ejs"] },
  { name: "Embedded Ruby", mime: "application/x-erb", mode: "htmlembedded", ext: ["erb"] },
  { name: "Erlang", mime: "text/x-erlang", mode: "erlang", ext: ["erl"] },
  { name: "Esper", mime: "text/x-esper", mode: "sql" },
  { name: "Factor", mime: "text/x-factor", mode: "factor", ext: ["factor"] },
  { name: "FCL", mime: "text/x-fcl", mode: "fcl" },
  { name: "Forth", mime: "text/x-forth", mode: "forth", ext: ["forth", "fth", "4th"] },
  { name: "Fortran", mime: "text/x-fortran", mode: "fortran", ext: ["f", "for", "f77", "f90", "f95"] },
  { name: "F#", mime: "text/x-fsharp", mode: "mllike", ext: ["fs"], alias: ["fsharp"] },
  { name: "Gas", mime: "text/x-gas", mode: "gas", ext: ["s"] },
  { name: "Gherkin", mime: "text/x-feature", mode: "gherkin", ext: ["feature"] },
  { name: "GitHub Flavored Markdown", mime: "text/x-gfm", mode: "gfm", file: /^(readme|contributing|history)\.md$/i },
  { name: "Go", mime: "text/x-go", mode: "go", ext: ["go"] },
  { name: "Groovy", mime: "text/x-groovy", mode: "groovy", ext: ["groovy", "gradle"], file: /^Jenkinsfile$/ },
  { name: "HAML", mime: "text/x-haml", mode: "haml", ext: ["haml"] },
  { name: "Haskell", mime: "text/x-haskell", mode: "haskell", ext: ["hs"] },
  { name: "Haskell (Literate)", mime: "text/x-literate-haskell", mode: "haskell-literate", ext: ["lhs"] },
  { name: "Haxe", mime: "text/x-haxe", mode: "haxe", ext: ["hx"] },
  { name: "HXML", mime: "text/x-hxml", mode: "haxe", ext: ["hxml"] },
  { name: "ASP.NET", mime: "application/x-aspx", mode: "htmlembedded", ext: ["aspx"], alias: ["asp", "aspx"] },
  { name: "HTML", mime: "text/html", mode: "htmlmixed", ext: ["html", "htm", "handlebars", "hbs"], alias: ["xhtml"] },
  { name: "HTTP", mime: "message/http", mode: "http" },
  { name: "IDL", mime: "text/x-idl", mode: "idl", ext: ["pro"] },
  { name: "Pug", mime: "text/x-pug", mode: "pug", ext: ["jade", "pug"], alias: ["jade"] },
  { name: "Java", mime: "text/x-java", mode: "clike", ext: ["java"] },
  { name: "Java Server Pages", mime: "application/x-jsp", mode: "htmlembedded", ext: ["jsp"], alias: ["jsp"] },
  {
    name: "JavaScript",
    mimes: ["text/javascript", "text/ecmascript", "application/javascript", "application/x-javascript", "application/ecmascript"],
    mode: "javascript",
    ext: ["js"],
    alias: ["ecmascript", "js", "node", "dataviewjs"]
  },
  { name: "JSON", mimes: ["application/json", "application/x-json"], mode: "javascript", ext: ["json", "map"], alias: ["json5"] },
  { name: "JSON-LD", mime: "application/ld+json", mode: "javascript", ext: ["jsonld"], alias: ["jsonld"] },
  { name: "JSX", mime: "text/jsx", mode: "jsx", ext: ["jsx"] },
  { name: "Jinja2", mime: "text/jinja2", mode: "jinja2", ext: ["j2", "jinja", "jinja2"] },
  { name: "Julia", mime: "text/x-julia", mode: "julia", ext: ["jl"] },
  { name: "Kotlin", mime: "text/x-kotlin", mode: "clike", ext: ["kt"] },
  { name: "LESS", mime: "text/x-less", mode: "css", ext: ["less"] },
  { name: "LiveScript", mime: "text/x-livescript", mode: "livescript", ext: ["ls"], alias: ["ls"] },
  { name: "Lua", mime: "text/x-lua", mode: "lua", ext: ["lua"] },
  { name: "Markdown", mime: "text/x-markdown", mode: "markdown", ext: ["markdown", "md", "mkd"] },
  { name: "mIRC", mime: "text/mirc", mode: "mirc" },
  { name: "MariaDB SQL", mime: "text/x-mariadb", mode: "sql" },
  { name: "Mathematica", mime: "text/x-mathematica", mode: "mathematica", ext: ["m", "nb", "wl", "wls"] },
  { name: "Modelica", mime: "text/x-modelica", mode: "modelica", ext: ["mo"] },
  { name: "MUMPS", mime: "text/x-mumps", mode: "mumps", ext: ["mps"] },
  { name: "MS SQL", mime: "text/x-mssql", mode: "sql" },
  { name: "mbox", mime: "application/mbox", mode: "mbox", ext: ["mbox"] },
  { name: "MySQL", mime: "text/x-mysql", mode: "sql" },
  { name: "Nginx", mime: "text/x-nginx-conf", mode: "nginx", file: /nginx.*\.conf$/i },
  { name: "NSIS", mime: "text/x-nsis", mode: "nsis", ext: ["nsh", "nsi"] },
  {
    name: "NTriples",
    mimes: ["application/n-triples", "application/n-quads", "text/n-triples"],
    mode: "ntriples",
    ext: ["nt", "nq"]
  },
  { name: "Objective-C", mime: "text/x-objectivec", mode: "clike", ext: ["m"], alias: ["objective-c", "objc"] },
  { name: "Objective-C++", mime: "text/x-objectivec++", mode: "clike", ext: ["mm"], alias: ["objective-c++", "objc++"] },
  { name: "OCaml", mime: "text/x-ocaml", mode: "mllike", ext: ["ml", "mli", "mll", "mly"] },
  { name: "Octave", mime: "text/x-octave", mode: "octave", ext: ["m"] },
  { name: "Oz", mime: "text/x-oz", mode: "oz", ext: ["oz"] },
  { name: "Pascal", mime: "text/x-pascal", mode: "pascal", ext: ["p", "pas"] },
  { name: "PEG.js", mime: "null", mode: "pegjs", ext: ["jsonld"] },
  { name: "Perl", mime: "text/x-perl", mode: "perl", ext: ["pl", "pm"] },
  { name: "PHP", mimes: ["text/x-php", "application/x-httpd-php", "application/x-httpd-php-open"], mode: "php", ext: ["php", "php3", "php4", "php5", "php7", "phtml"] },
  { name: "Pig", mime: "text/x-pig", mode: "pig", ext: ["pig"] },
  { name: "Plain Text", mime: "text/plain", mode: "null", ext: ["txt", "text", "conf", "def", "list", "log"] },
  { name: "PLSQL", mime: "text/x-plsql", mode: "sql", ext: ["pls"] },
  { name: "PostgreSQL", mime: "text/x-pgsql", mode: "sql" },
  { name: "PowerShell", mime: "application/x-powershell", mode: "powershell", ext: ["ps1", "psd1", "psm1"] },
  { name: "Properties files", mime: "text/x-properties", mode: "properties", ext: ["properties", "ini", "in"], alias: ["ini", "properties"] },
  { name: "ProtoBuf", mime: "text/x-protobuf", mode: "protobuf", ext: ["proto"] },
  { name: "Python", mime: "text/x-python", mode: "python", ext: ["BUILD", "bzl", "py", "pyw"], file: /^(BUCK|BUILD)$/ },
  { name: "Puppet", mime: "text/x-puppet", mode: "puppet", ext: ["pp"] },
  { name: "Q", mime: "text/x-q", mode: "q", ext: ["q"] },
  { name: "R", mime: "text/x-rsrc", mode: "r", ext: ["r", "R"], alias: ["rscript"] },
  { name: "reStructuredText", mime: "text/x-rst", mode: "rst", ext: ["rst"], alias: ["rst"] },
  { name: "RPM Changes", mime: "text/x-rpm-changes", mode: "rpm" },
  { name: "RPM Spec", mime: "text/x-rpm-spec", mode: "rpm", ext: ["spec"] },
  { name: "Ruby", mime: "text/x-ruby", mode: "ruby", ext: ["rb"], alias: ["jruby", "macruby", "rake", "rb", "rbx"] },
  { name: "Rust", mime: "text/x-rustsrc", mode: "rust", ext: ["rs"] },
  { name: "SAS", mime: "text/x-sas", mode: "sas", ext: ["sas"] },
  { name: "Sass", mime: "text/x-sass", mode: "sass", ext: ["sass"] },
  { name: "Scala", mime: "text/x-scala", mode: "clike", ext: ["scala"] },
  { name: "Scheme", mime: "text/x-scheme", mode: "scheme", ext: ["scm", "ss"] },
  { name: "SCSS", mime: "text/x-scss", mode: "css", ext: ["scss"] },
  { name: "Shell", mimes: ["text/x-sh", "application/x-sh"], mode: "shell", ext: ["sh", "ksh", "bash"], alias: ["bash", "sh", "zsh"], file: /^PKGBUILD$/ },
  { name: "Sieve", mime: "application/sieve", mode: "sieve", ext: ["siv", "sieve"] },
  { name: "Slim", mimes: ["text/x-slim", "application/x-slim"], mode: "slim", ext: ["slim"] },
  { name: "Smalltalk", mime: "text/x-stsrc", mode: "smalltalk", ext: ["st"] },
  { name: "Smarty", mime: "text/x-smarty", mode: "smarty", ext: ["tpl"] },
  { name: "Solr", mime: "text/x-solr", mode: "solr" },
  { name: "SML", mime: "text/x-sml", mode: "mllike", ext: ["sml", "sig", "fun", "smackspec"] },
  { name: "Soy", mime: "text/x-soy", mode: "soy", ext: ["soy"], alias: ["closure template"] },
  { name: "SPARQL", mime: "application/sparql-query", mode: "sparql", ext: ["rq", "sparql"], alias: ["sparul"] },
  { name: "Spreadsheet", mime: "text/x-spreadsheet", mode: "spreadsheet", alias: ["excel", "formula"] },
  { name: "SQL", mime: "text/x-sql", mode: "sql", ext: ["sql"] },
  { name: "SQLite", mime: "text/x-sqlite", mode: "sql" },
  { name: "Squirrel", mime: "text/x-squirrel", mode: "clike", ext: ["nut"] },
  { name: "Stylus", mime: "text/x-styl", mode: "stylus", ext: ["styl"] },
  { name: "Swift", mime: "text/x-swift", mode: "swift", ext: ["swift"] },
  { name: "sTeX", mime: "text/x-stex", mode: "stex" },
  { name: "LaTeX", mime: "text/x-latex", mode: "stex", ext: ["text", "ltx", "tex"], alias: ["tex"] },
  { name: "SystemVerilog", mime: "text/x-systemverilog", mode: "verilog", ext: ["v", "sv", "svh"] },
  { name: "Tcl", mime: "text/x-tcl", mode: "tcl", ext: ["tcl"] },
  { name: "Textile", mime: "text/x-textile", mode: "textile", ext: ["textile"] },
  { name: "TiddlyWiki", mime: "text/x-tiddlywiki", mode: "tiddlywiki" },
  { name: "Tiki wiki", mime: "text/tiki", mode: "tiki" },
  { name: "TOML", mime: "text/x-toml", mode: "toml", ext: ["toml"] },
  { name: "Tornado", mime: "text/x-tornado", mode: "tornado" },
  { name: "troff", mime: "text/troff", mode: "troff", ext: ["1", "2", "3", "4", "5", "6", "7", "8", "9"] },
  { name: "TTCN", mime: "text/x-ttcn", mode: "ttcn", ext: ["ttcn", "ttcn3", "ttcnpp"] },
  { name: "TTCN_CFG", mime: "text/x-ttcn-cfg", mode: "ttcn-cfg", ext: ["cfg"] },
  { name: "Turtle", mime: "text/turtle", mode: "turtle", ext: ["ttl"] },
  { name: "TypeScript", mime: "application/typescript", mode: "javascript", ext: ["ts"], alias: ["ts"] },
  { name: "TypeScript-JSX", mime: "text/typescript-jsx", mode: "jsx", ext: ["tsx"], alias: ["tsx"] },
  { name: "Twig", mime: "text/x-twig", mode: "twig" },
  { name: "Web IDL", mime: "text/x-webidl", mode: "webidl", ext: ["webidl"] },
  { name: "VB.NET", mime: "text/x-vb", mode: "vb", ext: ["vb"] },
  { name: "VBScript", mime: "text/vbscript", mode: "vbscript", ext: ["vbs"] },
  { name: "Velocity", mime: "text/velocity", mode: "velocity", ext: ["vtl"] },
  { name: "Verilog", mime: "text/x-verilog", mode: "verilog", ext: ["v"] },
  { name: "VHDL", mime: "text/x-vhdl", mode: "vhdl", ext: ["vhd", "vhdl"] },
  { name: "Vue.js Component", mimes: ["script/x-vue", "text/x-vue"], mode: "vue", ext: ["vue"] },
  { name: "XML", mimes: ["application/xml", "text/xml"], mode: "xml", ext: ["xml", "xsl", "xsd", "svg"], alias: ["rss", "wsdl", "xsd"] },
  { name: "XQuery", mime: "application/xquery", mode: "xquery", ext: ["xy", "xquery"] },
  { name: "Yacas", mime: "text/x-yacas", mode: "yacas", ext: ["ys"] },
  { name: "YAML", mimes: ["text/x-yaml", "text/yaml"], mode: "yaml", ext: ["yaml", "yml"], alias: ["yml", "tracker", "dataview"] },
  { name: "Z80", mime: "text/x-z80", mode: "z80", ext: ["z80"] },
  { name: "mscgen", mime: "text/x-mscgen", mode: "mscgen", ext: ["mscgen", "mscin", "msc"] },
  { name: "xu", mime: "text/x-xu", mode: "mscgen", ext: ["xu"] },
  { name: "msgenny", mime: "text/x-msgenny", mode: "mscgen", ext: ["msgenny"] },
  { name: "WebAssembly", mime: "text/webassembly", mode: "wast", ext: ["wat", "wast"] }
];
for (i = 0; i < CodeMirror.modeInfo.length; i++) {
  info = CodeMirror.modeInfo[i];
  if (info.mimes)
    info.mime = info.mimes[0];
}
var info;
var i;
CodeMirror.findModeByMIME = function(mime) {
  mime = mime.toLowerCase();
  for (var i = 0; i < CodeMirror.modeInfo.length; i++) {
    var info = CodeMirror.modeInfo[i];
    if (info.mime == mime)
      return info;
    if (info.mimes) {
      for (var j = 0; j < info.mimes.length; j++)
        if (info.mimes[j] == mime)
          return info;
    }
  }
  if (/\+xml$/.test(mime))
    return CodeMirror.findModeByMIME("application/xml");
  if (/\+json$/.test(mime))
    return CodeMirror.findModeByMIME("application/json");
};
CodeMirror.findModeByExtension = function(ext) {
  ext = ext.toLowerCase();
  for (var i = 0; i < CodeMirror.modeInfo.length; i++) {
    var info = CodeMirror.modeInfo[i];
    if (info.ext) {
      for (var j = 0; j < info.ext.length; j++)
        if (info.ext[j] == ext)
          return info;
    }
  }
};
CodeMirror.findModeByFileName = function(filename) {
  for (var i = 0; i < CodeMirror.modeInfo.length; i++) {
    var info = CodeMirror.modeInfo[i];
    if (info.file && info.file.test(filename))
      return info;
  }
  var dot = filename.lastIndexOf(".");
  var ext = dot > -1 && filename.substring(dot + 1, filename.length);
  if (ext)
    return CodeMirror.findModeByExtension(ext);
};
CodeMirror.findModeByName = function(name) {
  name = name.toLowerCase();
  for (var i = 0; i < CodeMirror.modeInfo.length; i++) {
    var info = CodeMirror.modeInfo[i];
    if (info.name.toLowerCase() == name)
      return info;
    if (info.alias) {
      for (var j = 0; j < info.alias.length; j++)
        if (info.alias[j].toLowerCase() == name)
          return info;
    }
  }
};

// main.ts
var import_apl = __toESM(require_apl());
var import_asciiarmor = __toESM(require_asciiarmor());
var import_asn = __toESM(require_asn_1());
var import_asterisk = __toESM(require_asterisk());
var import_brainfuck = __toESM(require_brainfuck());
var import_clike = __toESM(require_clike());
var import_clojure = __toESM(require_clojure());
var import_cmake = __toESM(require_cmake());
var import_cobol = __toESM(require_cobol());
var import_coffeescript = __toESM(require_coffeescript());
var import_commonlisp = __toESM(require_commonlisp());
var import_crystal = __toESM(require_crystal());
var import_css = __toESM(require_css());
var import_cypher = __toESM(require_cypher());
var import_d = __toESM(require_d());
var import_dart = __toESM(require_dart());
var import_diff = __toESM(require_diff());
var import_django = __toESM(require_django());
var import_dockerfile = __toESM(require_dockerfile());
var import_dtd = __toESM(require_dtd());
var import_dylan = __toESM(require_dylan());
var import_ebnf = __toESM(require_ebnf());
var import_ecl = __toESM(require_ecl());
var import_eiffel = __toESM(require_eiffel());
var import_elixir = __toESM(require_elixir());
var import_elm = __toESM(require_elm());
var import_erlang = __toESM(require_erlang());
var import_factor = __toESM(require_factor());
var import_fcl = __toESM(require_fcl());
var import_forth = __toESM(require_forth());
var import_fortran = __toESM(require_fortran());
var import_gas = __toESM(require_gas());
var import_gherkin = __toESM(require_gherkin());
var import_go = __toESM(require_go());
var import_groovy = __toESM(require_groovy());
var import_haml = __toESM(require_haml());
var import_handlebars = __toESM(require_handlebars());
var import_haskell = __toESM(require_haskell());
var import_haskell_literate = __toESM(require_haskell_literate());
var import_haxe = __toESM(require_haxe());
var import_htmlembedded = __toESM(require_htmlembedded());
var import_htmlmixed = __toESM(require_htmlmixed());
var import_http = __toESM(require_http());
var import_idl = __toESM(require_idl());
var import_javascript = __toESM(require_javascript());
var import_jinja2 = __toESM(require_jinja2());
var import_jsx = __toESM(require_jsx());
var import_julia = __toESM(require_julia());
var import_livescript = __toESM(require_livescript());
var import_lua = __toESM(require_lua());
var import_mathematica = __toESM(require_mathematica());
var import_mbox = __toESM(require_mbox());
var import_mirc = __toESM(require_mirc());
var import_mllike = __toESM(require_mllike());
var import_modelica = __toESM(require_modelica());
var import_mscgen = __toESM(require_mscgen());
var import_mumps = __toESM(require_mumps());
var import_nginx = __toESM(require_nginx());
var import_nsis = __toESM(require_nsis());
var import_ntriples = __toESM(require_ntriples());
var import_octave = __toESM(require_octave());
var import_oz = __toESM(require_oz());
var import_pascal = __toESM(require_pascal());
var import_pegjs = __toESM(require_pegjs());
var import_perl = __toESM(require_perl());
var import_php = __toESM(require_php());
var import_pig = __toESM(require_pig());
var import_powershell = __toESM(require_powershell());
var import_properties = __toESM(require_properties());
var import_protobuf = __toESM(require_protobuf());
var import_pug = __toESM(require_pug());
var import_puppet = __toESM(require_puppet());
var import_python = __toESM(require_python());
var import_q = __toESM(require_q());
var import_r = __toESM(require_r());
var import_rpm = __toESM(require_rpm());
var import_rst = __toESM(require_rst());
var import_ruby = __toESM(require_ruby());
var import_rust = __toESM(require_rust());
var import_sas = __toESM(require_sas());
var import_sass = __toESM(require_sass());
var import_scheme = __toESM(require_scheme());
var import_shell = __toESM(require_shell());
var import_sieve = __toESM(require_sieve());
var import_slim = __toESM(require_slim());
var import_smalltalk = __toESM(require_smalltalk());
var import_smarty = __toESM(require_smarty());
var import_solr = __toESM(require_solr());
var import_soy = __toESM(require_soy());
var import_sparql = __toESM(require_sparql());
var import_spreadsheet = __toESM(require_spreadsheet());
var import_sql = __toESM(require_sql());
var import_stex = __toESM(require_stex());
var import_stylus = __toESM(require_stylus());
var import_swift = __toESM(require_swift());
var import_tcl = __toESM(require_tcl());
var import_textile = __toESM(require_textile());
var import_tiddlywiki = __toESM(require_tiddlywiki());
var import_tiki = __toESM(require_tiki());
var import_toml = __toESM(require_toml());
var import_tornado = __toESM(require_tornado());
var import_troff = __toESM(require_troff());
var import_ttcn = __toESM(require_ttcn());
var import_ttcn_cfg = __toESM(require_ttcn_cfg());
var import_turtle = __toESM(require_turtle());
var import_twig = __toESM(require_twig());
var import_vb = __toESM(require_vb());
var import_vbscript = __toESM(require_vbscript());
var import_velocity = __toESM(require_velocity());
var import_verilog = __toESM(require_verilog());
var import_vhdl = __toESM(require_vhdl());
var import_vue = __toESM(require_vue());
var import_wast = __toESM(require_wast());
var import_webidl = __toESM(require_webidl());
var import_xml = __toESM(require_xml());
var import_xquery = __toESM(require_xquery());
var import_yacas = __toESM(require_yacas());
var import_yaml = __toESM(require_yaml());
var import_yaml_frontmatter = __toESM(require_yaml_frontmatter());
var import_z80 = __toESM(require_z80());
var DEFAULT_SETTINGS = {
  extensions: "txt",
  is_forced_on: false,
  is_dynamic_on: true,
  force_extensions: ""
};
var CONFLICTING_PLUGINS = ["txt-as-md-obsidian", "ini-obsidian"];
var UnitadePlugin = class _UnitadePlugin extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.settings = DEFAULT_SETTINGS;
  }
  onload() {
    return __async(this, null, function* () {
      __superGet(_UnitadePlugin.prototype, this, "onload").call(this);
      yield this.loadSettings();
      this.app.vault.on("create", (file) => {
        if (!this.settings.is_dynamic_on)
          return;
        if (!file.path.includes("."))
          return;
        const ext = file.name.split(".")[1];
        if (ext == "md")
          return;
        this.dynamicExtensionRegister(ext);
        if (this.settings.extensions == "" || this.settings.force_extensions == " ")
          this.settings.extensions = ext;
        else
          this.settings.extensions += `, ${ext}`;
        this.saveSettings();
        console.log("UNITADE: Added registered extension: " + ext + " by file: " + file.path);
      });
      this.checkConflicts(void 0);
      this.addSettingTab(new UnitadeSettingsTab(this.app, this));
      this.registerOnLoadViews();
      this.registerOnLoadExtensions();
    });
  }
  checkConflicts(additional_message) {
    const pluginsFolder = path.join(this.app.vault.configDir, "plugins");
    if (additional_message == void 0)
      additional_message = "";
    const basePath = this.app.vault.adapter.getBasePath();
    fs.readdir(path.join(basePath, pluginsFolder), (err, folders) => {
      if (err) {
        console.error("Error reading plugins folder:", err);
        return;
      }
      const conflict = folders.filter((folder) => CONFLICTING_PLUGINS.includes(folder));
      if (conflict.length > 0) {
        console.warn("Conflicting plugin folders detected:", conflict);
        new import_obsidian.Notice(`Conflicting plugins detected: ${conflict.join(", ")}
${additional_message}`);
      } else
        console.log("No conflicting plugin folders found.");
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  registerOnLoadExtensions() {
    const extensions = this.settings.extensions.split(",").map((ext) => ext.trim()).filter((ext) => ext !== "");
    this.registerExtensions(extensions, "markdown");
  }
  dynamicExtensionRegister(extension) {
    this.registerExtensions([extension], "markdown");
  }
  registerOnLoadViews() {
    if (this.settings.is_forced_on) {
      const forced_extensions = this.settings.force_extensions.split(",").map((ext) => ext.trim()).filter((ext) => ext !== "");
      forced_extensions.forEach((ext) => {
        this.registerView(ext, (leaf) => {
          return new CustomView(leaf, ext);
        });
      });
    }
  }
};
var UnitadeSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Extensions").setDesc("Enter file extensions to interact with in Obsidian, separated by commas.").addText(
      (text) => text.setValue(this.plugin.settings.extensions).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.extensions = value;
        yield this.plugin.saveSettings();
      }))
    );
    new import_obsidian.Setting(containerEl).setName("Force-update plugin").setDesc("If you changed extensions array or any related on-load parameter, this plugin will imitate on-load process, can cause ERRORS, so its recommended to reload vault instead of this option.").addButton(
      (bt) => bt.setButtonText("Update extensions").onClick(() => {
        this.plugin.registerOnLoadExtensions();
        this.plugin.registerOnLoadViews();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Force-Open Files in Obsidian?").setDesc("Enable to force-open specified file extensions in Obsidian, if it is false, extensions will be opened with default editing software assigned to this extension or by themselves.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.is_forced_on).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.is_forced_on = value;
        yield this.plugin.saveSettings();
      }))
    );
    new import_obsidian.Setting(containerEl).setName("Force-Open Extensions").setDesc("Enter file extensions to force-open in Obsidian, separated by commas.").addText(
      (text) => text.setValue(this.plugin.settings.force_extensions).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.force_extensions = value;
        yield this.plugin.saveSettings();
      }))
    );
    new import_obsidian.Setting(containerEl).setName("Enable dynamic registry?").setDesc("Enable to registry and add to the setting new extension via creating/importing file with custom one.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.is_dynamic_on).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.is_dynamic_on = value;
        yield this.plugin.saveSettings();
      }))
    );
  }
};
var CustomView = class extends import_obsidian.TextFileView {
  constructor(leaf, extension) {
    super(leaf);
    this.FileExtension = "";
    // called on code mirror changes
    this.changed = (instance, changes) => __async(this, null, function* () {
      this.requestSave();
    });
    // get the new file contents
    this.getViewData = () => {
      return this.codeMirror.getValue();
    };
    // set the file contents
    this.setViewData = (data, clear) => {
      if (clear) {
        this.codeMirror.swapDoc(CodeMirror.Doc(data, `text/x-${this.FileExtension}`));
      } else {
        this.codeMirror.setValue(data);
      }
    };
    // clear the view content
    this.clear = () => {
      this.codeMirror.setValue("");
      this.codeMirror.clearHistory();
    };
    this.FileExtension = extension;
    this.codeMirror = CodeMirror(this.ContentEl, {
      theme: "obsidian"
    });
    this.codeMirror.on("changes", this.changed);
  }
  ContentEl() {
    return this.contentEl;
  }
  // when the view is resized, refresh CodeMirror (thanks Licat!)
  onResize() {
    this.codeMirror.refresh();
  }
  // gets the title of the document
  getDisplayText() {
    if (this.file)
      return this.file.basename;
    else
      return "no file";
  }
  // confirms this view can accept ini extension
  canAcceptExtension(extension) {
    return extension == this.FileExtension;
  }
  // the view type name
  getViewType() {
    return this.FileExtension;
  }
};
